package com.code.data.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.code.data.sqlbean.ChatListBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_LIST_BEAN".
*/
public class ChatListBeanDao extends AbstractDao<ChatListBean, Long> {

    public static final String TABLENAME = "CHAT_LIST_BEAN";

    /**
     * Properties of entity ChatListBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MUid = new Property(1, int.class, "mUid", false, "M_UID");
        public final static Property PeerUid = new Property(2, int.class, "peerUid", false, "PEER_UID");
        public final static Property UnreadMsgCount = new Property(3, int.class, "unreadMsgCount", false, "UNREAD_MSG_COUNT");
        public final static Property OldMessageTime = new Property(4, long.class, "oldMessageTime", false, "OLD_MESSAGE_TIME");
        public final static Property OldMessage = new Property(5, String.class, "oldMessage", false, "OLD_MESSAGE");
        public final static Property Status = new Property(6, int.class, "status", false, "STATUS");
        public final static Property SourceType = new Property(7, int.class, "sourceType", false, "SOURCE_TYPE");
        public final static Property NickName = new Property(8, String.class, "nickName", false, "NICK_NAME");
        public final static Property SendState = new Property(9, int.class, "sendState", false, "SEND_STATE");
        public final static Property UserAvatar = new Property(10, String.class, "userAvatar", false, "USER_AVATAR");
    }


    public ChatListBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ChatListBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_LIST_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"M_UID\" INTEGER NOT NULL ," + // 1: mUid
                "\"PEER_UID\" INTEGER NOT NULL ," + // 2: peerUid
                "\"UNREAD_MSG_COUNT\" INTEGER NOT NULL ," + // 3: unreadMsgCount
                "\"OLD_MESSAGE_TIME\" INTEGER NOT NULL ," + // 4: oldMessageTime
                "\"OLD_MESSAGE\" TEXT," + // 5: oldMessage
                "\"STATUS\" INTEGER NOT NULL ," + // 6: status
                "\"SOURCE_TYPE\" INTEGER NOT NULL ," + // 7: sourceType
                "\"NICK_NAME\" TEXT," + // 8: nickName
                "\"SEND_STATE\" INTEGER NOT NULL ," + // 9: sendState
                "\"USER_AVATAR\" TEXT);"); // 10: userAvatar
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_LIST_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatListBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMUid());
        stmt.bindLong(3, entity.getPeerUid());
        stmt.bindLong(4, entity.getUnreadMsgCount());
        stmt.bindLong(5, entity.getOldMessageTime());
 
        String oldMessage = entity.getOldMessage();
        if (oldMessage != null) {
            stmt.bindString(6, oldMessage);
        }
        stmt.bindLong(7, entity.getStatus());
        stmt.bindLong(8, entity.getSourceType());
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(9, nickName);
        }
        stmt.bindLong(10, entity.getSendState());
 
        String userAvatar = entity.getUserAvatar();
        if (userAvatar != null) {
            stmt.bindString(11, userAvatar);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatListBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMUid());
        stmt.bindLong(3, entity.getPeerUid());
        stmt.bindLong(4, entity.getUnreadMsgCount());
        stmt.bindLong(5, entity.getOldMessageTime());
 
        String oldMessage = entity.getOldMessage();
        if (oldMessage != null) {
            stmt.bindString(6, oldMessage);
        }
        stmt.bindLong(7, entity.getStatus());
        stmt.bindLong(8, entity.getSourceType());
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(9, nickName);
        }
        stmt.bindLong(10, entity.getSendState());
 
        String userAvatar = entity.getUserAvatar();
        if (userAvatar != null) {
            stmt.bindString(11, userAvatar);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChatListBean readEntity(Cursor cursor, int offset) {
        ChatListBean entity = new ChatListBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // mUid
            cursor.getInt(offset + 2), // peerUid
            cursor.getInt(offset + 3), // unreadMsgCount
            cursor.getLong(offset + 4), // oldMessageTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // oldMessage
            cursor.getInt(offset + 6), // status
            cursor.getInt(offset + 7), // sourceType
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // nickName
            cursor.getInt(offset + 9), // sendState
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // userAvatar
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatListBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMUid(cursor.getInt(offset + 1));
        entity.setPeerUid(cursor.getInt(offset + 2));
        entity.setUnreadMsgCount(cursor.getInt(offset + 3));
        entity.setOldMessageTime(cursor.getLong(offset + 4));
        entity.setOldMessage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStatus(cursor.getInt(offset + 6));
        entity.setSourceType(cursor.getInt(offset + 7));
        entity.setNickName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSendState(cursor.getInt(offset + 9));
        entity.setUserAvatar(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChatListBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChatListBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChatListBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
