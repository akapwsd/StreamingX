// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: consts.proto

#ifndef PROTOBUF_consts_2eproto__INCLUDED
#define PROTOBUF_consts_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace uyujoy {
namespace com {
namespace api {
namespace channel {
namespace frontend {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_consts_2eproto();
void protobuf_InitDefaults_consts_2eproto();
void protobuf_AssignDesc_consts_2eproto();
void protobuf_ShutdownFile_consts_2eproto();


enum channelState {
  ChannelStateClosed = 0,
  ChannelStateFree = 1,
  ChannelStateBusy = 2,
  ChannelStateInsufficientBalance = 999,
  channelState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  channelState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool channelState_IsValid(int value);
const channelState channelState_MIN = ChannelStateClosed;
const channelState channelState_MAX = ChannelStateInsufficientBalance;
const int channelState_ARRAYSIZE = channelState_MAX + 1;

const ::google::protobuf::EnumDescriptor* channelState_descriptor();
inline const ::std::string& channelState_Name(channelState value) {
  return ::google::protobuf::internal::NameOfEnum(
    channelState_descriptor(), value);
}
inline bool channelState_Parse(
    const ::std::string& name, channelState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<channelState>(
    channelState_descriptor(), name, value);
}
enum channelStopReason {
  ChannelStopReasonUnknown = 0,
  ChannelStopReasonNormal = 1,
  ChannelStopReasonClosedBySystem = 2,
  ChannelStopReasonError = 3,
  channelStopReason_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  channelStopReason_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool channelStopReason_IsValid(int value);
const channelStopReason channelStopReason_MIN = ChannelStopReasonUnknown;
const channelStopReason channelStopReason_MAX = ChannelStopReasonError;
const int channelStopReason_ARRAYSIZE = channelStopReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* channelStopReason_descriptor();
inline const ::std::string& channelStopReason_Name(channelStopReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    channelStopReason_descriptor(), value);
}
inline bool channelStopReason_Parse(
    const ::std::string& name, channelStopReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<channelStopReason>(
    channelStopReason_descriptor(), name, value);
}
enum channelUserKickReason {
  ChannelUserKickReasonNormal = 0,
  ChannelUserKickReasonKickBySystem = 1,
  ChannelUserKickReasonError = 2,
  channelUserKickReason_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  channelUserKickReason_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool channelUserKickReason_IsValid(int value);
const channelUserKickReason channelUserKickReason_MIN = ChannelUserKickReasonNormal;
const channelUserKickReason channelUserKickReason_MAX = ChannelUserKickReasonError;
const int channelUserKickReason_ARRAYSIZE = channelUserKickReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* channelUserKickReason_descriptor();
inline const ::std::string& channelUserKickReason_Name(channelUserKickReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    channelUserKickReason_descriptor(), value);
}
inline bool channelUserKickReason_Parse(
    const ::std::string& name, channelUserKickReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<channelUserKickReason>(
    channelUserKickReason_descriptor(), name, value);
}
enum channelCategory {
  ChannelCategoryUnknown = 0,
  ChannelCategorySingle = 1,
  ChannelCategoryMultiple = 2,
  channelCategory_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  channelCategory_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool channelCategory_IsValid(int value);
const channelCategory channelCategory_MIN = ChannelCategoryUnknown;
const channelCategory channelCategory_MAX = ChannelCategoryMultiple;
const int channelCategory_ARRAYSIZE = channelCategory_MAX + 1;

const ::google::protobuf::EnumDescriptor* channelCategory_descriptor();
inline const ::std::string& channelCategory_Name(channelCategory value) {
  return ::google::protobuf::internal::NameOfEnum(
    channelCategory_descriptor(), value);
}
inline bool channelCategory_Parse(
    const ::std::string& name, channelCategory* value) {
  return ::google::protobuf::internal::ParseNamedEnum<channelCategory>(
    channelCategory_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace frontend
}  // namespace channel
}  // namespace api
}  // namespace com
}  // namespace uyujoy

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::uyujoy::com::api::channel::frontend::channelState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::uyujoy::com::api::channel::frontend::channelState>() {
  return ::uyujoy::com::api::channel::frontend::channelState_descriptor();
}
template <> struct is_proto_enum< ::uyujoy::com::api::channel::frontend::channelStopReason> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::uyujoy::com::api::channel::frontend::channelStopReason>() {
  return ::uyujoy::com::api::channel::frontend::channelStopReason_descriptor();
}
template <> struct is_proto_enum< ::uyujoy::com::api::channel::frontend::channelUserKickReason> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::uyujoy::com::api::channel::frontend::channelUserKickReason>() {
  return ::uyujoy::com::api::channel::frontend::channelUserKickReason_descriptor();
}
template <> struct is_proto_enum< ::uyujoy::com::api::channel::frontend::channelCategory> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::uyujoy::com::api::channel::frontend::channelCategory>() {
  return ::uyujoy::com::api::channel::frontend::channelCategory_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_consts_2eproto__INCLUDED
