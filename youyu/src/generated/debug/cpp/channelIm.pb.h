// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: channelIm.proto

#ifndef PROTOBUF_channelIm_2eproto__INCLUDED
#define PROTOBUF_channelIm_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace uyujoy {
namespace api {
namespace channelim {
namespace frontend {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_channelIm_2eproto();
void protobuf_InitDefaults_channelIm_2eproto();
void protobuf_AssignDesc_channelIm_2eproto();
void protobuf_ShutdownFile_channelIm_2eproto();

class channelMsgRecord;
class channelMsgRecordAck;
class getDiffChannelMsgRecord;
class getDiffChannelMsgRecordAck;
class rcvChannelMsgRecord;

// ===================================================================

class channelMsgRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:uyujoy.api.channelim.frontend.channelMsgRecord) */ {
 public:
  channelMsgRecord();
  virtual ~channelMsgRecord();

  channelMsgRecord(const channelMsgRecord& from);

  inline channelMsgRecord& operator=(const channelMsgRecord& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const channelMsgRecord& default_instance();

  static const channelMsgRecord* internal_default_instance();

  void Swap(channelMsgRecord* other);

  // implements Message ----------------------------------------------

  inline channelMsgRecord* New() const { return New(NULL); }

  channelMsgRecord* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const channelMsgRecord& from);
  void MergeFrom(const channelMsgRecord& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(channelMsgRecord* other);
  void UnsafeMergeFrom(const channelMsgRecord& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 msgId = 1;
  void clear_msgid();
  static const int kMsgIdFieldNumber = 1;
  ::google::protobuf::uint32 msgid() const;
  void set_msgid(::google::protobuf::uint32 value);

  // optional string msgFp = 2;
  void clear_msgfp();
  static const int kMsgFpFieldNumber = 2;
  const ::std::string& msgfp() const;
  void set_msgfp(const ::std::string& value);
  void set_msgfp(const char* value);
  void set_msgfp(const char* value, size_t size);
  ::std::string* mutable_msgfp();
  ::std::string* release_msgfp();
  void set_allocated_msgfp(::std::string* msgfp);

  // optional string from = 3;
  void clear_from();
  static const int kFromFieldNumber = 3;
  const ::std::string& from() const;
  void set_from(const ::std::string& value);
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  ::std::string* mutable_from();
  ::std::string* release_from();
  void set_allocated_from(::std::string* from);

  // optional string channelId = 4;
  void clear_channelid();
  static const int kChannelIdFieldNumber = 4;
  const ::std::string& channelid() const;
  void set_channelid(const ::std::string& value);
  void set_channelid(const char* value);
  void set_channelid(const char* value, size_t size);
  ::std::string* mutable_channelid();
  ::std::string* release_channelid();
  void set_allocated_channelid(::std::string* channelid);

  // optional string msg = 5;
  void clear_msg();
  static const int kMsgFieldNumber = 5;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional int64 sendTime = 6;
  void clear_sendtime();
  static const int kSendTimeFieldNumber = 6;
  ::google::protobuf::int64 sendtime() const;
  void set_sendtime(::google::protobuf::int64 value);

  // optional string lang = 7;
  void clear_lang();
  static const int kLangFieldNumber = 7;
  const ::std::string& lang() const;
  void set_lang(const ::std::string& value);
  void set_lang(const char* value);
  void set_lang(const char* value, size_t size);
  ::std::string* mutable_lang();
  ::std::string* release_lang();
  void set_allocated_lang(::std::string* lang);

  // @@protoc_insertion_point(class_scope:uyujoy.api.channelim.frontend.channelMsgRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msgfp_;
  ::google::protobuf::internal::ArenaStringPtr from_;
  ::google::protobuf::internal::ArenaStringPtr channelid_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::internal::ArenaStringPtr lang_;
  ::google::protobuf::int64 sendtime_;
  ::google::protobuf::uint32 msgid_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_channelIm_2eproto_impl();
  friend void  protobuf_AddDesc_channelIm_2eproto_impl();
  friend void protobuf_AssignDesc_channelIm_2eproto();
  friend void protobuf_ShutdownFile_channelIm_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<channelMsgRecord> channelMsgRecord_default_instance_;

// -------------------------------------------------------------------

class channelMsgRecordAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:uyujoy.api.channelim.frontend.channelMsgRecordAck) */ {
 public:
  channelMsgRecordAck();
  virtual ~channelMsgRecordAck();

  channelMsgRecordAck(const channelMsgRecordAck& from);

  inline channelMsgRecordAck& operator=(const channelMsgRecordAck& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const channelMsgRecordAck& default_instance();

  static const channelMsgRecordAck* internal_default_instance();

  void Swap(channelMsgRecordAck* other);

  // implements Message ----------------------------------------------

  inline channelMsgRecordAck* New() const { return New(NULL); }

  channelMsgRecordAck* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const channelMsgRecordAck& from);
  void MergeFrom(const channelMsgRecordAck& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(channelMsgRecordAck* other);
  void UnsafeMergeFrom(const channelMsgRecordAck& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 msgId = 1;
  void clear_msgid();
  static const int kMsgIdFieldNumber = 1;
  ::google::protobuf::uint32 msgid() const;
  void set_msgid(::google::protobuf::uint32 value);

  // optional string fp = 2;
  void clear_fp();
  static const int kFpFieldNumber = 2;
  const ::std::string& fp() const;
  void set_fp(const ::std::string& value);
  void set_fp(const char* value);
  void set_fp(const char* value, size_t size);
  ::std::string* mutable_fp();
  ::std::string* release_fp();
  void set_allocated_fp(::std::string* fp);

  // @@protoc_insertion_point(class_scope:uyujoy.api.channelim.frontend.channelMsgRecordAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr fp_;
  ::google::protobuf::uint32 msgid_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_channelIm_2eproto_impl();
  friend void  protobuf_AddDesc_channelIm_2eproto_impl();
  friend void protobuf_AssignDesc_channelIm_2eproto();
  friend void protobuf_ShutdownFile_channelIm_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<channelMsgRecordAck> channelMsgRecordAck_default_instance_;

// -------------------------------------------------------------------

class rcvChannelMsgRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:uyujoy.api.channelim.frontend.rcvChannelMsgRecord) */ {
 public:
  rcvChannelMsgRecord();
  virtual ~rcvChannelMsgRecord();

  rcvChannelMsgRecord(const rcvChannelMsgRecord& from);

  inline rcvChannelMsgRecord& operator=(const rcvChannelMsgRecord& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rcvChannelMsgRecord& default_instance();

  static const rcvChannelMsgRecord* internal_default_instance();

  void Swap(rcvChannelMsgRecord* other);

  // implements Message ----------------------------------------------

  inline rcvChannelMsgRecord* New() const { return New(NULL); }

  rcvChannelMsgRecord* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rcvChannelMsgRecord& from);
  void MergeFrom(const rcvChannelMsgRecord& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rcvChannelMsgRecord* other);
  void UnsafeMergeFrom(const rcvChannelMsgRecord& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .uyujoy.api.channelim.frontend.channelMsgRecord msg = 1;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 1;
  const ::uyujoy::api::channelim::frontend::channelMsgRecord& msg() const;
  ::uyujoy::api::channelim::frontend::channelMsgRecord* mutable_msg();
  ::uyujoy::api::channelim::frontend::channelMsgRecord* release_msg();
  void set_allocated_msg(::uyujoy::api::channelim::frontend::channelMsgRecord* msg);

  // @@protoc_insertion_point(class_scope:uyujoy.api.channelim.frontend.rcvChannelMsgRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::uyujoy::api::channelim::frontend::channelMsgRecord* msg_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_channelIm_2eproto_impl();
  friend void  protobuf_AddDesc_channelIm_2eproto_impl();
  friend void protobuf_AssignDesc_channelIm_2eproto();
  friend void protobuf_ShutdownFile_channelIm_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<rcvChannelMsgRecord> rcvChannelMsgRecord_default_instance_;

// -------------------------------------------------------------------

class getDiffChannelMsgRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:uyujoy.api.channelim.frontend.getDiffChannelMsgRecord) */ {
 public:
  getDiffChannelMsgRecord();
  virtual ~getDiffChannelMsgRecord();

  getDiffChannelMsgRecord(const getDiffChannelMsgRecord& from);

  inline getDiffChannelMsgRecord& operator=(const getDiffChannelMsgRecord& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const getDiffChannelMsgRecord& default_instance();

  static const getDiffChannelMsgRecord* internal_default_instance();

  void Swap(getDiffChannelMsgRecord* other);

  // implements Message ----------------------------------------------

  inline getDiffChannelMsgRecord* New() const { return New(NULL); }

  getDiffChannelMsgRecord* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const getDiffChannelMsgRecord& from);
  void MergeFrom(const getDiffChannelMsgRecord& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(getDiffChannelMsgRecord* other);
  void UnsafeMergeFrom(const getDiffChannelMsgRecord& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 msgId = 1;
  void clear_msgid();
  static const int kMsgIdFieldNumber = 1;
  ::google::protobuf::uint32 msgid() const;
  void set_msgid(::google::protobuf::uint32 value);

  // optional string channelId = 2;
  void clear_channelid();
  static const int kChannelIdFieldNumber = 2;
  const ::std::string& channelid() const;
  void set_channelid(const ::std::string& value);
  void set_channelid(const char* value);
  void set_channelid(const char* value, size_t size);
  ::std::string* mutable_channelid();
  ::std::string* release_channelid();
  void set_allocated_channelid(::std::string* channelid);

  // @@protoc_insertion_point(class_scope:uyujoy.api.channelim.frontend.getDiffChannelMsgRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr channelid_;
  ::google::protobuf::uint32 msgid_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_channelIm_2eproto_impl();
  friend void  protobuf_AddDesc_channelIm_2eproto_impl();
  friend void protobuf_AssignDesc_channelIm_2eproto();
  friend void protobuf_ShutdownFile_channelIm_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<getDiffChannelMsgRecord> getDiffChannelMsgRecord_default_instance_;

// -------------------------------------------------------------------

class getDiffChannelMsgRecordAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:uyujoy.api.channelim.frontend.getDiffChannelMsgRecordAck) */ {
 public:
  getDiffChannelMsgRecordAck();
  virtual ~getDiffChannelMsgRecordAck();

  getDiffChannelMsgRecordAck(const getDiffChannelMsgRecordAck& from);

  inline getDiffChannelMsgRecordAck& operator=(const getDiffChannelMsgRecordAck& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const getDiffChannelMsgRecordAck& default_instance();

  static const getDiffChannelMsgRecordAck* internal_default_instance();

  void Swap(getDiffChannelMsgRecordAck* other);

  // implements Message ----------------------------------------------

  inline getDiffChannelMsgRecordAck* New() const { return New(NULL); }

  getDiffChannelMsgRecordAck* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const getDiffChannelMsgRecordAck& from);
  void MergeFrom(const getDiffChannelMsgRecordAck& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(getDiffChannelMsgRecordAck* other);
  void UnsafeMergeFrom(const getDiffChannelMsgRecordAck& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .uyujoy.api.channelim.frontend.channelMsgRecord list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  const ::uyujoy::api::channelim::frontend::channelMsgRecord& list(int index) const;
  ::uyujoy::api::channelim::frontend::channelMsgRecord* mutable_list(int index);
  ::uyujoy::api::channelim::frontend::channelMsgRecord* add_list();
  ::google::protobuf::RepeatedPtrField< ::uyujoy::api::channelim::frontend::channelMsgRecord >*
      mutable_list();
  const ::google::protobuf::RepeatedPtrField< ::uyujoy::api::channelim::frontend::channelMsgRecord >&
      list() const;

  // @@protoc_insertion_point(class_scope:uyujoy.api.channelim.frontend.getDiffChannelMsgRecordAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::uyujoy::api::channelim::frontend::channelMsgRecord > list_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_channelIm_2eproto_impl();
  friend void  protobuf_AddDesc_channelIm_2eproto_impl();
  friend void protobuf_AssignDesc_channelIm_2eproto();
  friend void protobuf_ShutdownFile_channelIm_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<getDiffChannelMsgRecordAck> getDiffChannelMsgRecordAck_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// channelMsgRecord

// optional uint32 msgId = 1;
inline void channelMsgRecord::clear_msgid() {
  msgid_ = 0u;
}
inline ::google::protobuf::uint32 channelMsgRecord::msgid() const {
  // @@protoc_insertion_point(field_get:uyujoy.api.channelim.frontend.channelMsgRecord.msgId)
  return msgid_;
}
inline void channelMsgRecord::set_msgid(::google::protobuf::uint32 value) {
  
  msgid_ = value;
  // @@protoc_insertion_point(field_set:uyujoy.api.channelim.frontend.channelMsgRecord.msgId)
}

// optional string msgFp = 2;
inline void channelMsgRecord::clear_msgfp() {
  msgfp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& channelMsgRecord::msgfp() const {
  // @@protoc_insertion_point(field_get:uyujoy.api.channelim.frontend.channelMsgRecord.msgFp)
  return msgfp_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void channelMsgRecord::set_msgfp(const ::std::string& value) {
  
  msgfp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:uyujoy.api.channelim.frontend.channelMsgRecord.msgFp)
}
inline void channelMsgRecord::set_msgfp(const char* value) {
  
  msgfp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:uyujoy.api.channelim.frontend.channelMsgRecord.msgFp)
}
inline void channelMsgRecord::set_msgfp(const char* value, size_t size) {
  
  msgfp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:uyujoy.api.channelim.frontend.channelMsgRecord.msgFp)
}
inline ::std::string* channelMsgRecord::mutable_msgfp() {
  
  // @@protoc_insertion_point(field_mutable:uyujoy.api.channelim.frontend.channelMsgRecord.msgFp)
  return msgfp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* channelMsgRecord::release_msgfp() {
  // @@protoc_insertion_point(field_release:uyujoy.api.channelim.frontend.channelMsgRecord.msgFp)
  
  return msgfp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void channelMsgRecord::set_allocated_msgfp(::std::string* msgfp) {
  if (msgfp != NULL) {
    
  } else {
    
  }
  msgfp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgfp);
  // @@protoc_insertion_point(field_set_allocated:uyujoy.api.channelim.frontend.channelMsgRecord.msgFp)
}

// optional string from = 3;
inline void channelMsgRecord::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& channelMsgRecord::from() const {
  // @@protoc_insertion_point(field_get:uyujoy.api.channelim.frontend.channelMsgRecord.from)
  return from_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void channelMsgRecord::set_from(const ::std::string& value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:uyujoy.api.channelim.frontend.channelMsgRecord.from)
}
inline void channelMsgRecord::set_from(const char* value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:uyujoy.api.channelim.frontend.channelMsgRecord.from)
}
inline void channelMsgRecord::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:uyujoy.api.channelim.frontend.channelMsgRecord.from)
}
inline ::std::string* channelMsgRecord::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:uyujoy.api.channelim.frontend.channelMsgRecord.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* channelMsgRecord::release_from() {
  // @@protoc_insertion_point(field_release:uyujoy.api.channelim.frontend.channelMsgRecord.from)
  
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void channelMsgRecord::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:uyujoy.api.channelim.frontend.channelMsgRecord.from)
}

// optional string channelId = 4;
inline void channelMsgRecord::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& channelMsgRecord::channelid() const {
  // @@protoc_insertion_point(field_get:uyujoy.api.channelim.frontend.channelMsgRecord.channelId)
  return channelid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void channelMsgRecord::set_channelid(const ::std::string& value) {
  
  channelid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:uyujoy.api.channelim.frontend.channelMsgRecord.channelId)
}
inline void channelMsgRecord::set_channelid(const char* value) {
  
  channelid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:uyujoy.api.channelim.frontend.channelMsgRecord.channelId)
}
inline void channelMsgRecord::set_channelid(const char* value, size_t size) {
  
  channelid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:uyujoy.api.channelim.frontend.channelMsgRecord.channelId)
}
inline ::std::string* channelMsgRecord::mutable_channelid() {
  
  // @@protoc_insertion_point(field_mutable:uyujoy.api.channelim.frontend.channelMsgRecord.channelId)
  return channelid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* channelMsgRecord::release_channelid() {
  // @@protoc_insertion_point(field_release:uyujoy.api.channelim.frontend.channelMsgRecord.channelId)
  
  return channelid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void channelMsgRecord::set_allocated_channelid(::std::string* channelid) {
  if (channelid != NULL) {
    
  } else {
    
  }
  channelid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:uyujoy.api.channelim.frontend.channelMsgRecord.channelId)
}

// optional string msg = 5;
inline void channelMsgRecord::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& channelMsgRecord::msg() const {
  // @@protoc_insertion_point(field_get:uyujoy.api.channelim.frontend.channelMsgRecord.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void channelMsgRecord::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:uyujoy.api.channelim.frontend.channelMsgRecord.msg)
}
inline void channelMsgRecord::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:uyujoy.api.channelim.frontend.channelMsgRecord.msg)
}
inline void channelMsgRecord::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:uyujoy.api.channelim.frontend.channelMsgRecord.msg)
}
inline ::std::string* channelMsgRecord::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:uyujoy.api.channelim.frontend.channelMsgRecord.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* channelMsgRecord::release_msg() {
  // @@protoc_insertion_point(field_release:uyujoy.api.channelim.frontend.channelMsgRecord.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void channelMsgRecord::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:uyujoy.api.channelim.frontend.channelMsgRecord.msg)
}

// optional int64 sendTime = 6;
inline void channelMsgRecord::clear_sendtime() {
  sendtime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 channelMsgRecord::sendtime() const {
  // @@protoc_insertion_point(field_get:uyujoy.api.channelim.frontend.channelMsgRecord.sendTime)
  return sendtime_;
}
inline void channelMsgRecord::set_sendtime(::google::protobuf::int64 value) {
  
  sendtime_ = value;
  // @@protoc_insertion_point(field_set:uyujoy.api.channelim.frontend.channelMsgRecord.sendTime)
}

// optional string lang = 7;
inline void channelMsgRecord::clear_lang() {
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& channelMsgRecord::lang() const {
  // @@protoc_insertion_point(field_get:uyujoy.api.channelim.frontend.channelMsgRecord.lang)
  return lang_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void channelMsgRecord::set_lang(const ::std::string& value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:uyujoy.api.channelim.frontend.channelMsgRecord.lang)
}
inline void channelMsgRecord::set_lang(const char* value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:uyujoy.api.channelim.frontend.channelMsgRecord.lang)
}
inline void channelMsgRecord::set_lang(const char* value, size_t size) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:uyujoy.api.channelim.frontend.channelMsgRecord.lang)
}
inline ::std::string* channelMsgRecord::mutable_lang() {
  
  // @@protoc_insertion_point(field_mutable:uyujoy.api.channelim.frontend.channelMsgRecord.lang)
  return lang_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* channelMsgRecord::release_lang() {
  // @@protoc_insertion_point(field_release:uyujoy.api.channelim.frontend.channelMsgRecord.lang)
  
  return lang_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void channelMsgRecord::set_allocated_lang(::std::string* lang) {
  if (lang != NULL) {
    
  } else {
    
  }
  lang_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lang);
  // @@protoc_insertion_point(field_set_allocated:uyujoy.api.channelim.frontend.channelMsgRecord.lang)
}

inline const channelMsgRecord* channelMsgRecord::internal_default_instance() {
  return &channelMsgRecord_default_instance_.get();
}
// -------------------------------------------------------------------

// channelMsgRecordAck

// optional uint32 msgId = 1;
inline void channelMsgRecordAck::clear_msgid() {
  msgid_ = 0u;
}
inline ::google::protobuf::uint32 channelMsgRecordAck::msgid() const {
  // @@protoc_insertion_point(field_get:uyujoy.api.channelim.frontend.channelMsgRecordAck.msgId)
  return msgid_;
}
inline void channelMsgRecordAck::set_msgid(::google::protobuf::uint32 value) {
  
  msgid_ = value;
  // @@protoc_insertion_point(field_set:uyujoy.api.channelim.frontend.channelMsgRecordAck.msgId)
}

// optional string fp = 2;
inline void channelMsgRecordAck::clear_fp() {
  fp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& channelMsgRecordAck::fp() const {
  // @@protoc_insertion_point(field_get:uyujoy.api.channelim.frontend.channelMsgRecordAck.fp)
  return fp_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void channelMsgRecordAck::set_fp(const ::std::string& value) {
  
  fp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:uyujoy.api.channelim.frontend.channelMsgRecordAck.fp)
}
inline void channelMsgRecordAck::set_fp(const char* value) {
  
  fp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:uyujoy.api.channelim.frontend.channelMsgRecordAck.fp)
}
inline void channelMsgRecordAck::set_fp(const char* value, size_t size) {
  
  fp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:uyujoy.api.channelim.frontend.channelMsgRecordAck.fp)
}
inline ::std::string* channelMsgRecordAck::mutable_fp() {
  
  // @@protoc_insertion_point(field_mutable:uyujoy.api.channelim.frontend.channelMsgRecordAck.fp)
  return fp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* channelMsgRecordAck::release_fp() {
  // @@protoc_insertion_point(field_release:uyujoy.api.channelim.frontend.channelMsgRecordAck.fp)
  
  return fp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void channelMsgRecordAck::set_allocated_fp(::std::string* fp) {
  if (fp != NULL) {
    
  } else {
    
  }
  fp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fp);
  // @@protoc_insertion_point(field_set_allocated:uyujoy.api.channelim.frontend.channelMsgRecordAck.fp)
}

inline const channelMsgRecordAck* channelMsgRecordAck::internal_default_instance() {
  return &channelMsgRecordAck_default_instance_.get();
}
// -------------------------------------------------------------------

// rcvChannelMsgRecord

// optional .uyujoy.api.channelim.frontend.channelMsgRecord msg = 1;
inline bool rcvChannelMsgRecord::has_msg() const {
  return this != internal_default_instance() && msg_ != NULL;
}
inline void rcvChannelMsgRecord::clear_msg() {
  if (GetArenaNoVirtual() == NULL && msg_ != NULL) delete msg_;
  msg_ = NULL;
}
inline const ::uyujoy::api::channelim::frontend::channelMsgRecord& rcvChannelMsgRecord::msg() const {
  // @@protoc_insertion_point(field_get:uyujoy.api.channelim.frontend.rcvChannelMsgRecord.msg)
  return msg_ != NULL ? *msg_
                         : *::uyujoy::api::channelim::frontend::channelMsgRecord::internal_default_instance();
}
inline ::uyujoy::api::channelim::frontend::channelMsgRecord* rcvChannelMsgRecord::mutable_msg() {
  
  if (msg_ == NULL) {
    msg_ = new ::uyujoy::api::channelim::frontend::channelMsgRecord;
  }
  // @@protoc_insertion_point(field_mutable:uyujoy.api.channelim.frontend.rcvChannelMsgRecord.msg)
  return msg_;
}
inline ::uyujoy::api::channelim::frontend::channelMsgRecord* rcvChannelMsgRecord::release_msg() {
  // @@protoc_insertion_point(field_release:uyujoy.api.channelim.frontend.rcvChannelMsgRecord.msg)
  
  ::uyujoy::api::channelim::frontend::channelMsgRecord* temp = msg_;
  msg_ = NULL;
  return temp;
}
inline void rcvChannelMsgRecord::set_allocated_msg(::uyujoy::api::channelim::frontend::channelMsgRecord* msg) {
  delete msg_;
  msg_ = msg;
  if (msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uyujoy.api.channelim.frontend.rcvChannelMsgRecord.msg)
}

inline const rcvChannelMsgRecord* rcvChannelMsgRecord::internal_default_instance() {
  return &rcvChannelMsgRecord_default_instance_.get();
}
// -------------------------------------------------------------------

// getDiffChannelMsgRecord

// optional uint32 msgId = 1;
inline void getDiffChannelMsgRecord::clear_msgid() {
  msgid_ = 0u;
}
inline ::google::protobuf::uint32 getDiffChannelMsgRecord::msgid() const {
  // @@protoc_insertion_point(field_get:uyujoy.api.channelim.frontend.getDiffChannelMsgRecord.msgId)
  return msgid_;
}
inline void getDiffChannelMsgRecord::set_msgid(::google::protobuf::uint32 value) {
  
  msgid_ = value;
  // @@protoc_insertion_point(field_set:uyujoy.api.channelim.frontend.getDiffChannelMsgRecord.msgId)
}

// optional string channelId = 2;
inline void getDiffChannelMsgRecord::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& getDiffChannelMsgRecord::channelid() const {
  // @@protoc_insertion_point(field_get:uyujoy.api.channelim.frontend.getDiffChannelMsgRecord.channelId)
  return channelid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void getDiffChannelMsgRecord::set_channelid(const ::std::string& value) {
  
  channelid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:uyujoy.api.channelim.frontend.getDiffChannelMsgRecord.channelId)
}
inline void getDiffChannelMsgRecord::set_channelid(const char* value) {
  
  channelid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:uyujoy.api.channelim.frontend.getDiffChannelMsgRecord.channelId)
}
inline void getDiffChannelMsgRecord::set_channelid(const char* value, size_t size) {
  
  channelid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:uyujoy.api.channelim.frontend.getDiffChannelMsgRecord.channelId)
}
inline ::std::string* getDiffChannelMsgRecord::mutable_channelid() {
  
  // @@protoc_insertion_point(field_mutable:uyujoy.api.channelim.frontend.getDiffChannelMsgRecord.channelId)
  return channelid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* getDiffChannelMsgRecord::release_channelid() {
  // @@protoc_insertion_point(field_release:uyujoy.api.channelim.frontend.getDiffChannelMsgRecord.channelId)
  
  return channelid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void getDiffChannelMsgRecord::set_allocated_channelid(::std::string* channelid) {
  if (channelid != NULL) {
    
  } else {
    
  }
  channelid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:uyujoy.api.channelim.frontend.getDiffChannelMsgRecord.channelId)
}

inline const getDiffChannelMsgRecord* getDiffChannelMsgRecord::internal_default_instance() {
  return &getDiffChannelMsgRecord_default_instance_.get();
}
// -------------------------------------------------------------------

// getDiffChannelMsgRecordAck

// repeated .uyujoy.api.channelim.frontend.channelMsgRecord list = 1;
inline int getDiffChannelMsgRecordAck::list_size() const {
  return list_.size();
}
inline void getDiffChannelMsgRecordAck::clear_list() {
  list_.Clear();
}
inline const ::uyujoy::api::channelim::frontend::channelMsgRecord& getDiffChannelMsgRecordAck::list(int index) const {
  // @@protoc_insertion_point(field_get:uyujoy.api.channelim.frontend.getDiffChannelMsgRecordAck.list)
  return list_.Get(index);
}
inline ::uyujoy::api::channelim::frontend::channelMsgRecord* getDiffChannelMsgRecordAck::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:uyujoy.api.channelim.frontend.getDiffChannelMsgRecordAck.list)
  return list_.Mutable(index);
}
inline ::uyujoy::api::channelim::frontend::channelMsgRecord* getDiffChannelMsgRecordAck::add_list() {
  // @@protoc_insertion_point(field_add:uyujoy.api.channelim.frontend.getDiffChannelMsgRecordAck.list)
  return list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::uyujoy::api::channelim::frontend::channelMsgRecord >*
getDiffChannelMsgRecordAck::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:uyujoy.api.channelim.frontend.getDiffChannelMsgRecordAck.list)
  return &list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::uyujoy::api::channelim::frontend::channelMsgRecord >&
getDiffChannelMsgRecordAck::list() const {
  // @@protoc_insertion_point(field_list:uyujoy.api.channelim.frontend.getDiffChannelMsgRecordAck.list)
  return list_;
}

inline const getDiffChannelMsgRecordAck* getDiffChannelMsgRecordAck::internal_default_instance() {
  return &getDiffChannelMsgRecordAck_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace frontend
}  // namespace channelim
}  // namespace api
}  // namespace uyujoy

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_channelIm_2eproto__INCLUDED
