// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/visibility.proto

#ifndef PROTOBUF_google_2fapi_2fvisibility_2eproto__INCLUDED
#define PROTOBUF_google_2fapi_2fvisibility_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace api {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_google_2fapi_2fvisibility_2eproto();
void protobuf_InitDefaults_google_2fapi_2fvisibility_2eproto();
void protobuf_AssignDesc_google_2fapi_2fvisibility_2eproto();
void protobuf_ShutdownFile_google_2fapi_2fvisibility_2eproto();

class Visibility;
class VisibilityRule;

// ===================================================================

class Visibility : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.Visibility) */ {
 public:
  Visibility();
  virtual ~Visibility();

  Visibility(const Visibility& from);

  inline Visibility& operator=(const Visibility& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Visibility& default_instance();

  static const Visibility* internal_default_instance();

  void UnsafeArenaSwap(Visibility* other);
  void Swap(Visibility* other);

  // implements Message ----------------------------------------------

  inline Visibility* New() const { return New(NULL); }

  Visibility* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Visibility& from);
  void MergeFrom(const Visibility& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Visibility* other);
  void UnsafeMergeFrom(const Visibility& from);
  protected:
  explicit Visibility(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.api.VisibilityRule rules = 1;
  int rules_size() const;
  void clear_rules();
  static const int kRulesFieldNumber = 1;
  const ::google::api::VisibilityRule& rules(int index) const;
  ::google::api::VisibilityRule* mutable_rules(int index);
  ::google::api::VisibilityRule* add_rules();
  ::google::protobuf::RepeatedPtrField< ::google::api::VisibilityRule >*
      mutable_rules();
  const ::google::protobuf::RepeatedPtrField< ::google::api::VisibilityRule >&
      rules() const;

  // @@protoc_insertion_point(class_scope:google.api.Visibility)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::api::VisibilityRule > rules_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fapi_2fvisibility_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fapi_2fvisibility_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fapi_2fvisibility_2eproto();
  friend void protobuf_ShutdownFile_google_2fapi_2fvisibility_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Visibility> Visibility_default_instance_;

// -------------------------------------------------------------------

class VisibilityRule : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.VisibilityRule) */ {
 public:
  VisibilityRule();
  virtual ~VisibilityRule();

  VisibilityRule(const VisibilityRule& from);

  inline VisibilityRule& operator=(const VisibilityRule& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const VisibilityRule& default_instance();

  static const VisibilityRule* internal_default_instance();

  void UnsafeArenaSwap(VisibilityRule* other);
  void Swap(VisibilityRule* other);

  // implements Message ----------------------------------------------

  inline VisibilityRule* New() const { return New(NULL); }

  VisibilityRule* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VisibilityRule& from);
  void MergeFrom(const VisibilityRule& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VisibilityRule* other);
  void UnsafeMergeFrom(const VisibilityRule& from);
  protected:
  explicit VisibilityRule(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string selector = 1;
  void clear_selector();
  static const int kSelectorFieldNumber = 1;
  const ::std::string& selector() const;
  void set_selector(const ::std::string& value);
  void set_selector(const char* value);
  void set_selector(const char* value, size_t size);
  ::std::string* mutable_selector();
  ::std::string* release_selector();
  void set_allocated_selector(::std::string* selector);
  ::std::string* unsafe_arena_release_selector();
  void unsafe_arena_set_allocated_selector(
      ::std::string* selector);

  // optional string restriction = 2;
  void clear_restriction();
  static const int kRestrictionFieldNumber = 2;
  const ::std::string& restriction() const;
  void set_restriction(const ::std::string& value);
  void set_restriction(const char* value);
  void set_restriction(const char* value, size_t size);
  ::std::string* mutable_restriction();
  ::std::string* release_restriction();
  void set_allocated_restriction(::std::string* restriction);
  ::std::string* unsafe_arena_release_restriction();
  void unsafe_arena_set_allocated_restriction(
      ::std::string* restriction);

  // @@protoc_insertion_point(class_scope:google.api.VisibilityRule)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr selector_;
  ::google::protobuf::internal::ArenaStringPtr restriction_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fapi_2fvisibility_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fapi_2fvisibility_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fapi_2fvisibility_2eproto();
  friend void protobuf_ShutdownFile_google_2fapi_2fvisibility_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<VisibilityRule> VisibilityRule_default_instance_;

// ===================================================================

static const int kEnumVisibilityFieldNumber = 72295727;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::EnumOptions,
    ::google::protobuf::internal::MessageTypeTraits< ::google::api::VisibilityRule >, 11, false >
  enum_visibility;
static const int kValueVisibilityFieldNumber = 72295727;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::EnumValueOptions,
    ::google::protobuf::internal::MessageTypeTraits< ::google::api::VisibilityRule >, 11, false >
  value_visibility;
static const int kFieldVisibilityFieldNumber = 72295727;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::MessageTypeTraits< ::google::api::VisibilityRule >, 11, false >
  field_visibility;
static const int kMessageVisibilityFieldNumber = 72295727;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::google::protobuf::internal::MessageTypeTraits< ::google::api::VisibilityRule >, 11, false >
  message_visibility;
static const int kMethodVisibilityFieldNumber = 72295727;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MethodOptions,
    ::google::protobuf::internal::MessageTypeTraits< ::google::api::VisibilityRule >, 11, false >
  method_visibility;
static const int kApiVisibilityFieldNumber = 72295727;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::ServiceOptions,
    ::google::protobuf::internal::MessageTypeTraits< ::google::api::VisibilityRule >, 11, false >
  api_visibility;

// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Visibility

// repeated .google.api.VisibilityRule rules = 1;
inline int Visibility::rules_size() const {
  return rules_.size();
}
inline void Visibility::clear_rules() {
  rules_.Clear();
}
inline const ::google::api::VisibilityRule& Visibility::rules(int index) const {
  // @@protoc_insertion_point(field_get:google.api.Visibility.rules)
  return rules_.Get(index);
}
inline ::google::api::VisibilityRule* Visibility::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.Visibility.rules)
  return rules_.Mutable(index);
}
inline ::google::api::VisibilityRule* Visibility::add_rules() {
  // @@protoc_insertion_point(field_add:google.api.Visibility.rules)
  return rules_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::api::VisibilityRule >*
Visibility::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:google.api.Visibility.rules)
  return &rules_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::api::VisibilityRule >&
Visibility::rules() const {
  // @@protoc_insertion_point(field_list:google.api.Visibility.rules)
  return rules_;
}

inline const Visibility* Visibility::internal_default_instance() {
  return &Visibility_default_instance_.get();
}
// -------------------------------------------------------------------

// VisibilityRule

// optional string selector = 1;
inline void VisibilityRule::clear_selector() {
  selector_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& VisibilityRule::selector() const {
  // @@protoc_insertion_point(field_get:google.api.VisibilityRule.selector)
  return selector_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VisibilityRule::set_selector(const ::std::string& value) {
  
  selector_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.api.VisibilityRule.selector)
}
inline void VisibilityRule::set_selector(const char* value) {
  
  selector_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.VisibilityRule.selector)
}
inline void VisibilityRule::set_selector(const char* value,
    size_t size) {
  
  selector_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.VisibilityRule.selector)
}
inline ::std::string* VisibilityRule::mutable_selector() {
  
  // @@protoc_insertion_point(field_mutable:google.api.VisibilityRule.selector)
  return selector_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* VisibilityRule::release_selector() {
  // @@protoc_insertion_point(field_release:google.api.VisibilityRule.selector)
  
  return selector_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* VisibilityRule::unsafe_arena_release_selector() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.VisibilityRule.selector)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return selector_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void VisibilityRule::set_allocated_selector(::std::string* selector) {
  if (selector != NULL) {
    
  } else {
    
  }
  selector_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), selector,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.VisibilityRule.selector)
}
inline void VisibilityRule::unsafe_arena_set_allocated_selector(
    ::std::string* selector) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (selector != NULL) {
    
  } else {
    
  }
  selector_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      selector, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.VisibilityRule.selector)
}

// optional string restriction = 2;
inline void VisibilityRule::clear_restriction() {
  restriction_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& VisibilityRule::restriction() const {
  // @@protoc_insertion_point(field_get:google.api.VisibilityRule.restriction)
  return restriction_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VisibilityRule::set_restriction(const ::std::string& value) {
  
  restriction_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.api.VisibilityRule.restriction)
}
inline void VisibilityRule::set_restriction(const char* value) {
  
  restriction_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.VisibilityRule.restriction)
}
inline void VisibilityRule::set_restriction(const char* value,
    size_t size) {
  
  restriction_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.VisibilityRule.restriction)
}
inline ::std::string* VisibilityRule::mutable_restriction() {
  
  // @@protoc_insertion_point(field_mutable:google.api.VisibilityRule.restriction)
  return restriction_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* VisibilityRule::release_restriction() {
  // @@protoc_insertion_point(field_release:google.api.VisibilityRule.restriction)
  
  return restriction_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* VisibilityRule::unsafe_arena_release_restriction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.VisibilityRule.restriction)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return restriction_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void VisibilityRule::set_allocated_restriction(::std::string* restriction) {
  if (restriction != NULL) {
    
  } else {
    
  }
  restriction_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), restriction,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.VisibilityRule.restriction)
}
inline void VisibilityRule::unsafe_arena_set_allocated_restriction(
    ::std::string* restriction) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (restriction != NULL) {
    
  } else {
    
  }
  restriction_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      restriction, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.VisibilityRule.restriction)
}

inline const VisibilityRule* VisibilityRule::internal_default_instance() {
  return &VisibilityRule_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fapi_2fvisibility_2eproto__INCLUDED
