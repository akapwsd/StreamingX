// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/rpc/context/audit_context.proto

#ifndef PROTOBUF_google_2fapi_2frpc_2fcontext_2faudit_5fcontext_2eproto__INCLUDED
#define PROTOBUF_google_2fapi_2frpc_2fcontext_2faudit_5fcontext_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace rpc {
namespace context {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_google_2fapi_2frpc_2fcontext_2faudit_5fcontext_2eproto();
void protobuf_InitDefaults_google_2fapi_2frpc_2fcontext_2faudit_5fcontext_2eproto();
void protobuf_AssignDesc_google_2fapi_2frpc_2fcontext_2faudit_5fcontext_2eproto();
void protobuf_ShutdownFile_google_2fapi_2frpc_2fcontext_2faudit_5fcontext_2eproto();

class AuditContext;

// ===================================================================

class AuditContext : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.rpc.context.AuditContext) */ {
 public:
  AuditContext();
  virtual ~AuditContext();

  AuditContext(const AuditContext& from);

  inline AuditContext& operator=(const AuditContext& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const AuditContext& default_instance();

  static const AuditContext* internal_default_instance();

  void UnsafeArenaSwap(AuditContext* other);
  void Swap(AuditContext* other);

  // implements Message ----------------------------------------------

  inline AuditContext* New() const { return New(NULL); }

  AuditContext* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuditContext& from);
  void MergeFrom(const AuditContext& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AuditContext* other);
  void UnsafeMergeFrom(const AuditContext& from);
  protected:
  explicit AuditContext(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes audit_log = 1;
  void clear_audit_log();
  static const int kAuditLogFieldNumber = 1;
  const ::std::string& audit_log() const;
  void set_audit_log(const ::std::string& value);
  void set_audit_log(const char* value);
  void set_audit_log(const void* value, size_t size);
  ::std::string* mutable_audit_log();
  ::std::string* release_audit_log();
  void set_allocated_audit_log(::std::string* audit_log);
  ::std::string* unsafe_arena_release_audit_log();
  void unsafe_arena_set_allocated_audit_log(
      ::std::string* audit_log);

  // optional .google.protobuf.Struct scrubbed_request = 2;
  bool has_scrubbed_request() const;
  void clear_scrubbed_request();
  static const int kScrubbedRequestFieldNumber = 2;
  private:
  void _slow_mutable_scrubbed_request();
  void _slow_set_allocated_scrubbed_request(
      ::google::protobuf::Arena* message_arena, ::google::protobuf::Struct** scrubbed_request);
  ::google::protobuf::Struct* _slow_release_scrubbed_request();
  public:
  const ::google::protobuf::Struct& scrubbed_request() const;
  ::google::protobuf::Struct* mutable_scrubbed_request();
  ::google::protobuf::Struct* release_scrubbed_request();
  void set_allocated_scrubbed_request(::google::protobuf::Struct* scrubbed_request);
  ::google::protobuf::Struct* unsafe_arena_release_scrubbed_request();
  void unsafe_arena_set_allocated_scrubbed_request(
      ::google::protobuf::Struct* scrubbed_request);

  // optional .google.protobuf.Struct scrubbed_response = 3;
  bool has_scrubbed_response() const;
  void clear_scrubbed_response();
  static const int kScrubbedResponseFieldNumber = 3;
  private:
  void _slow_mutable_scrubbed_response();
  void _slow_set_allocated_scrubbed_response(
      ::google::protobuf::Arena* message_arena, ::google::protobuf::Struct** scrubbed_response);
  ::google::protobuf::Struct* _slow_release_scrubbed_response();
  public:
  const ::google::protobuf::Struct& scrubbed_response() const;
  ::google::protobuf::Struct* mutable_scrubbed_response();
  ::google::protobuf::Struct* release_scrubbed_response();
  void set_allocated_scrubbed_response(::google::protobuf::Struct* scrubbed_response);
  ::google::protobuf::Struct* unsafe_arena_release_scrubbed_response();
  void unsafe_arena_set_allocated_scrubbed_response(
      ::google::protobuf::Struct* scrubbed_response);

  // optional int32 scrubbed_response_item_count = 4;
  void clear_scrubbed_response_item_count();
  static const int kScrubbedResponseItemCountFieldNumber = 4;
  ::google::protobuf::int32 scrubbed_response_item_count() const;
  void set_scrubbed_response_item_count(::google::protobuf::int32 value);

  // optional string target_resource = 5;
  void clear_target_resource();
  static const int kTargetResourceFieldNumber = 5;
  const ::std::string& target_resource() const;
  void set_target_resource(const ::std::string& value);
  void set_target_resource(const char* value);
  void set_target_resource(const char* value, size_t size);
  ::std::string* mutable_target_resource();
  ::std::string* release_target_resource();
  void set_allocated_target_resource(::std::string* target_resource);
  ::std::string* unsafe_arena_release_target_resource();
  void unsafe_arena_set_allocated_target_resource(
      ::std::string* target_resource);

  // @@protoc_insertion_point(class_scope:google.rpc.context.AuditContext)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr audit_log_;
  ::google::protobuf::internal::ArenaStringPtr target_resource_;
  ::google::protobuf::Struct* scrubbed_request_;
  ::google::protobuf::Struct* scrubbed_response_;
  ::google::protobuf::int32 scrubbed_response_item_count_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fapi_2frpc_2fcontext_2faudit_5fcontext_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fapi_2frpc_2fcontext_2faudit_5fcontext_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fapi_2frpc_2fcontext_2faudit_5fcontext_2eproto();
  friend void protobuf_ShutdownFile_google_2fapi_2frpc_2fcontext_2faudit_5fcontext_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AuditContext> AuditContext_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// AuditContext

// optional bytes audit_log = 1;
inline void AuditContext::clear_audit_log() {
  audit_log_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& AuditContext::audit_log() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AuditContext.audit_log)
  return audit_log_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuditContext::set_audit_log(const ::std::string& value) {
  
  audit_log_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.rpc.context.AuditContext.audit_log)
}
inline void AuditContext::set_audit_log(const char* value) {
  
  audit_log_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.rpc.context.AuditContext.audit_log)
}
inline void AuditContext::set_audit_log(const void* value,
    size_t size) {
  
  audit_log_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.rpc.context.AuditContext.audit_log)
}
inline ::std::string* AuditContext::mutable_audit_log() {
  
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AuditContext.audit_log)
  return audit_log_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* AuditContext::release_audit_log() {
  // @@protoc_insertion_point(field_release:google.rpc.context.AuditContext.audit_log)
  
  return audit_log_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* AuditContext::unsafe_arena_release_audit_log() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.rpc.context.AuditContext.audit_log)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return audit_log_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void AuditContext::set_allocated_audit_log(::std::string* audit_log) {
  if (audit_log != NULL) {
    
  } else {
    
  }
  audit_log_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audit_log,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AuditContext.audit_log)
}
inline void AuditContext::unsafe_arena_set_allocated_audit_log(
    ::std::string* audit_log) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (audit_log != NULL) {
    
  } else {
    
  }
  audit_log_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      audit_log, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AuditContext.audit_log)
}

// optional .google.protobuf.Struct scrubbed_request = 2;
inline bool AuditContext::has_scrubbed_request() const {
  return this != internal_default_instance() && scrubbed_request_ != NULL;
}
inline void AuditContext::clear_scrubbed_request() {
  if (GetArenaNoVirtual() == NULL && scrubbed_request_ != NULL) delete scrubbed_request_;
  scrubbed_request_ = NULL;
}
inline const ::google::protobuf::Struct& AuditContext::scrubbed_request() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AuditContext.scrubbed_request)
  return scrubbed_request_ != NULL ? *scrubbed_request_
                         : *::google::protobuf::Struct::internal_default_instance();
}
inline ::google::protobuf::Struct* AuditContext::mutable_scrubbed_request() {
  
  if (scrubbed_request_ == NULL) {
    _slow_mutable_scrubbed_request();
  }
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AuditContext.scrubbed_request)
  return scrubbed_request_;
}
inline ::google::protobuf::Struct* AuditContext::release_scrubbed_request() {
  // @@protoc_insertion_point(field_release:google.rpc.context.AuditContext.scrubbed_request)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_scrubbed_request();
  } else {
    ::google::protobuf::Struct* temp = scrubbed_request_;
    scrubbed_request_ = NULL;
    return temp;
  }
}
inline  void AuditContext::set_allocated_scrubbed_request(::google::protobuf::Struct* scrubbed_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scrubbed_request_;
  }
  if (scrubbed_request != NULL) {
    _slow_set_allocated_scrubbed_request(message_arena, &scrubbed_request);
  }
  scrubbed_request_ = scrubbed_request;
  if (scrubbed_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AuditContext.scrubbed_request)
}

// optional .google.protobuf.Struct scrubbed_response = 3;
inline bool AuditContext::has_scrubbed_response() const {
  return this != internal_default_instance() && scrubbed_response_ != NULL;
}
inline void AuditContext::clear_scrubbed_response() {
  if (GetArenaNoVirtual() == NULL && scrubbed_response_ != NULL) delete scrubbed_response_;
  scrubbed_response_ = NULL;
}
inline const ::google::protobuf::Struct& AuditContext::scrubbed_response() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AuditContext.scrubbed_response)
  return scrubbed_response_ != NULL ? *scrubbed_response_
                         : *::google::protobuf::Struct::internal_default_instance();
}
inline ::google::protobuf::Struct* AuditContext::mutable_scrubbed_response() {
  
  if (scrubbed_response_ == NULL) {
    _slow_mutable_scrubbed_response();
  }
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AuditContext.scrubbed_response)
  return scrubbed_response_;
}
inline ::google::protobuf::Struct* AuditContext::release_scrubbed_response() {
  // @@protoc_insertion_point(field_release:google.rpc.context.AuditContext.scrubbed_response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_scrubbed_response();
  } else {
    ::google::protobuf::Struct* temp = scrubbed_response_;
    scrubbed_response_ = NULL;
    return temp;
  }
}
inline  void AuditContext::set_allocated_scrubbed_response(::google::protobuf::Struct* scrubbed_response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scrubbed_response_;
  }
  if (scrubbed_response != NULL) {
    _slow_set_allocated_scrubbed_response(message_arena, &scrubbed_response);
  }
  scrubbed_response_ = scrubbed_response;
  if (scrubbed_response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AuditContext.scrubbed_response)
}

// optional int32 scrubbed_response_item_count = 4;
inline void AuditContext::clear_scrubbed_response_item_count() {
  scrubbed_response_item_count_ = 0;
}
inline ::google::protobuf::int32 AuditContext::scrubbed_response_item_count() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AuditContext.scrubbed_response_item_count)
  return scrubbed_response_item_count_;
}
inline void AuditContext::set_scrubbed_response_item_count(::google::protobuf::int32 value) {
  
  scrubbed_response_item_count_ = value;
  // @@protoc_insertion_point(field_set:google.rpc.context.AuditContext.scrubbed_response_item_count)
}

// optional string target_resource = 5;
inline void AuditContext::clear_target_resource() {
  target_resource_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& AuditContext::target_resource() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AuditContext.target_resource)
  return target_resource_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuditContext::set_target_resource(const ::std::string& value) {
  
  target_resource_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.rpc.context.AuditContext.target_resource)
}
inline void AuditContext::set_target_resource(const char* value) {
  
  target_resource_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.rpc.context.AuditContext.target_resource)
}
inline void AuditContext::set_target_resource(const char* value,
    size_t size) {
  
  target_resource_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.rpc.context.AuditContext.target_resource)
}
inline ::std::string* AuditContext::mutable_target_resource() {
  
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AuditContext.target_resource)
  return target_resource_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* AuditContext::release_target_resource() {
  // @@protoc_insertion_point(field_release:google.rpc.context.AuditContext.target_resource)
  
  return target_resource_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* AuditContext::unsafe_arena_release_target_resource() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.rpc.context.AuditContext.target_resource)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return target_resource_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void AuditContext::set_allocated_target_resource(::std::string* target_resource) {
  if (target_resource != NULL) {
    
  } else {
    
  }
  target_resource_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_resource,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AuditContext.target_resource)
}
inline void AuditContext::unsafe_arena_set_allocated_target_resource(
    ::std::string* target_resource) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (target_resource != NULL) {
    
  } else {
    
  }
  target_resource_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      target_resource, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AuditContext.target_resource)
}

inline const AuditContext* AuditContext::internal_default_instance() {
  return &AuditContext_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace context
}  // namespace rpc
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fapi_2frpc_2fcontext_2faudit_5fcontext_2eproto__INCLUDED
