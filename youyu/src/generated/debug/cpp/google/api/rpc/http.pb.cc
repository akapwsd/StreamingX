// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/rpc/http.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/api/rpc/http.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace rpc {

namespace {

const ::google::protobuf::Descriptor* HttpRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HttpRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HttpResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HttpResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HttpHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HttpHeader_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_google_2fapi_2frpc_2fhttp_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_google_2fapi_2frpc_2fhttp_2eproto() {
  protobuf_AddDesc_google_2fapi_2frpc_2fhttp_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "google/api/rpc/http.proto");
  GOOGLE_CHECK(file != NULL);
  HttpRequest_descriptor_ = file->message_type(0);
  static const int HttpRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpRequest, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpRequest, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpRequest, headers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpRequest, body_),
  };
  HttpRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HttpRequest_descriptor_,
      HttpRequest::internal_default_instance(),
      HttpRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(HttpRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpRequest, _internal_metadata_));
  HttpResponse_descriptor_ = file->message_type(1);
  static const int HttpResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpResponse, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpResponse, headers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpResponse, body_),
  };
  HttpResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HttpResponse_descriptor_,
      HttpResponse::internal_default_instance(),
      HttpResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(HttpResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpResponse, _internal_metadata_));
  HttpHeader_descriptor_ = file->message_type(2);
  static const int HttpHeader_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpHeader, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpHeader, value_),
  };
  HttpHeader_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HttpHeader_descriptor_,
      HttpHeader::internal_default_instance(),
      HttpHeader_offsets_,
      -1,
      -1,
      -1,
      sizeof(HttpHeader),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpHeader, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_google_2fapi_2frpc_2fhttp_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HttpRequest_descriptor_, HttpRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HttpResponse_descriptor_, HttpResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HttpHeader_descriptor_, HttpHeader::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_google_2fapi_2frpc_2fhttp_2eproto() {
  HttpRequest_default_instance_.Shutdown();
  delete HttpRequest_reflection_;
  HttpResponse_default_instance_.Shutdown();
  delete HttpResponse_reflection_;
  HttpHeader_default_instance_.Shutdown();
  delete HttpHeader_reflection_;
}

void protobuf_InitDefaults_google_2fapi_2frpc_2fhttp_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  HttpRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  HttpResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  HttpHeader_default_instance_.DefaultConstruct();
  HttpRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  HttpResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  HttpHeader_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_google_2fapi_2frpc_2fhttp_2eproto_once_);
void protobuf_InitDefaults_google_2fapi_2frpc_2fhttp_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_google_2fapi_2frpc_2fhttp_2eproto_once_,
                 &protobuf_InitDefaults_google_2fapi_2frpc_2fhttp_2eproto_impl);
}
void protobuf_AddDesc_google_2fapi_2frpc_2fhttp_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_google_2fapi_2frpc_2fhttp_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031google/api/rpc/http.proto\022\ngoogle.rpc\""
    "a\n\013HttpRequest\022\016\n\006method\030\001 \001(\t\022\013\n\003uri\030\002 "
    "\001(\t\022\'\n\007headers\030\003 \003(\0132\026.google.rpc.HttpHe"
    "ader\022\014\n\004body\030\004 \001(\014\"e\n\014HttpResponse\022\016\n\006st"
    "atus\030\001 \001(\005\022\016\n\006reason\030\002 \001(\t\022\'\n\007headers\030\003 "
    "\003(\0132\026.google.rpc.HttpHeader\022\014\n\004body\030\004 \001("
    "\014\"(\n\nHttpHeader\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 "
    "\001(\tBX\n\016com.google.rpcB\tHttpProtoP\001Z3goog"
    "le.golang.org/genproto/googleapis/rpc/ht"
    "tp;http\242\002\003RPCb\006proto3", 381);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/api/rpc/http.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_google_2fapi_2frpc_2fhttp_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_google_2fapi_2frpc_2fhttp_2eproto_once_);
void protobuf_AddDesc_google_2fapi_2frpc_2fhttp_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_google_2fapi_2frpc_2fhttp_2eproto_once_,
                 &protobuf_AddDesc_google_2fapi_2frpc_2fhttp_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_google_2fapi_2frpc_2fhttp_2eproto {
  StaticDescriptorInitializer_google_2fapi_2frpc_2fhttp_2eproto() {
    protobuf_AddDesc_google_2fapi_2frpc_2fhttp_2eproto();
  }
} static_descriptor_initializer_google_2fapi_2frpc_2fhttp_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HttpRequest::kMethodFieldNumber;
const int HttpRequest::kUriFieldNumber;
const int HttpRequest::kHeadersFieldNumber;
const int HttpRequest::kBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HttpRequest::HttpRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fapi_2frpc_2fhttp_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.rpc.HttpRequest)
}

void HttpRequest::InitAsDefaultInstance() {
}

HttpRequest::HttpRequest(const HttpRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.rpc.HttpRequest)
}

void HttpRequest::SharedCtor() {
  method_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

HttpRequest::~HttpRequest() {
  // @@protoc_insertion_point(destructor:google.rpc.HttpRequest)
  SharedDtor();
}

void HttpRequest::SharedDtor() {
  method_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HttpRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HttpRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HttpRequest_descriptor_;
}

const HttpRequest& HttpRequest::default_instance() {
  protobuf_InitDefaults_google_2fapi_2frpc_2fhttp_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<HttpRequest> HttpRequest_default_instance_;

HttpRequest* HttpRequest::New(::google::protobuf::Arena* arena) const {
  HttpRequest* n = new HttpRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HttpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.rpc.HttpRequest)
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headers_.Clear();
}

bool HttpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.rpc.HttpRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string method = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->method().data(), this->method().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.rpc.HttpRequest.method"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uri;
        break;
      }

      // optional string uri = 2;
      case 2: {
        if (tag == 18) {
         parse_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.rpc.HttpRequest.uri"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_headers;
        break;
      }

      // repeated .google.rpc.HttpHeader headers = 3;
      case 3: {
        if (tag == 26) {
         parse_headers:
          DO_(input->IncrementRecursionDepth());
         parse_loop_headers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_headers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_headers;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_body;
        break;
      }

      // optional bytes body = 4;
      case 4: {
        if (tag == 34) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.rpc.HttpRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.rpc.HttpRequest)
  return false;
#undef DO_
}

void HttpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.rpc.HttpRequest)
  // optional string method = 1;
  if (this->method().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.rpc.HttpRequest.method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->method(), output);
  }

  // optional string uri = 2;
  if (this->uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.rpc.HttpRequest.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uri(), output);
  }

  // repeated .google.rpc.HttpHeader headers = 3;
  for (unsigned int i = 0, n = this->headers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->headers(i), output);
  }

  // optional bytes body = 4;
  if (this->body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->body(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.rpc.HttpRequest)
}

::google::protobuf::uint8* HttpRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.rpc.HttpRequest)
  // optional string method = 1;
  if (this->method().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.rpc.HttpRequest.method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->method(), target);
  }

  // optional string uri = 2;
  if (this->uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.rpc.HttpRequest.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uri(), target);
  }

  // repeated .google.rpc.HttpHeader headers = 3;
  for (unsigned int i = 0, n = this->headers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->headers(i), false, target);
  }

  // optional bytes body = 4;
  if (this->body().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->body(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.rpc.HttpRequest)
  return target;
}

size_t HttpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.rpc.HttpRequest)
  size_t total_size = 0;

  // optional string method = 1;
  if (this->method().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->method());
  }

  // optional string uri = 2;
  if (this->uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uri());
  }

  // optional bytes body = 4;
  if (this->body().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->body());
  }

  // repeated .google.rpc.HttpHeader headers = 3;
  {
    unsigned int count = this->headers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->headers(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HttpRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.rpc.HttpRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HttpRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HttpRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.rpc.HttpRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.rpc.HttpRequest)
    UnsafeMergeFrom(*source);
  }
}

void HttpRequest::MergeFrom(const HttpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.rpc.HttpRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void HttpRequest::UnsafeMergeFrom(const HttpRequest& from) {
  GOOGLE_DCHECK(&from != this);
  headers_.MergeFrom(from.headers_);
  if (from.method().size() > 0) {

    method_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_);
  }
  if (from.uri().size() > 0) {

    uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
  if (from.body().size() > 0) {

    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
}

void HttpRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.rpc.HttpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpRequest::CopyFrom(const HttpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.rpc.HttpRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool HttpRequest::IsInitialized() const {

  return true;
}

void HttpRequest::Swap(HttpRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HttpRequest::InternalSwap(HttpRequest* other) {
  method_.Swap(&other->method_);
  uri_.Swap(&other->uri_);
  headers_.UnsafeArenaSwap(&other->headers_);
  body_.Swap(&other->body_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HttpRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HttpRequest_descriptor_;
  metadata.reflection = HttpRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HttpRequest

// optional string method = 1;
void HttpRequest::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HttpRequest::method() const {
  // @@protoc_insertion_point(field_get:google.rpc.HttpRequest.method)
  return method_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HttpRequest::set_method(const ::std::string& value) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.rpc.HttpRequest.method)
}
void HttpRequest::set_method(const char* value) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.rpc.HttpRequest.method)
}
void HttpRequest::set_method(const char* value, size_t size) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.rpc.HttpRequest.method)
}
::std::string* HttpRequest::mutable_method() {
  
  // @@protoc_insertion_point(field_mutable:google.rpc.HttpRequest.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HttpRequest::release_method() {
  // @@protoc_insertion_point(field_release:google.rpc.HttpRequest.method)
  
  return method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HttpRequest::set_allocated_method(::std::string* method) {
  if (method != NULL) {
    
  } else {
    
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:google.rpc.HttpRequest.method)
}

// optional string uri = 2;
void HttpRequest::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HttpRequest::uri() const {
  // @@protoc_insertion_point(field_get:google.rpc.HttpRequest.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HttpRequest::set_uri(const ::std::string& value) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.rpc.HttpRequest.uri)
}
void HttpRequest::set_uri(const char* value) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.rpc.HttpRequest.uri)
}
void HttpRequest::set_uri(const char* value, size_t size) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.rpc.HttpRequest.uri)
}
::std::string* HttpRequest::mutable_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.rpc.HttpRequest.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HttpRequest::release_uri() {
  // @@protoc_insertion_point(field_release:google.rpc.HttpRequest.uri)
  
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HttpRequest::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    
  } else {
    
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:google.rpc.HttpRequest.uri)
}

// repeated .google.rpc.HttpHeader headers = 3;
int HttpRequest::headers_size() const {
  return headers_.size();
}
void HttpRequest::clear_headers() {
  headers_.Clear();
}
const ::google::rpc::HttpHeader& HttpRequest::headers(int index) const {
  // @@protoc_insertion_point(field_get:google.rpc.HttpRequest.headers)
  return headers_.Get(index);
}
::google::rpc::HttpHeader* HttpRequest::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:google.rpc.HttpRequest.headers)
  return headers_.Mutable(index);
}
::google::rpc::HttpHeader* HttpRequest::add_headers() {
  // @@protoc_insertion_point(field_add:google.rpc.HttpRequest.headers)
  return headers_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::rpc::HttpHeader >*
HttpRequest::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:google.rpc.HttpRequest.headers)
  return &headers_;
}
const ::google::protobuf::RepeatedPtrField< ::google::rpc::HttpHeader >&
HttpRequest::headers() const {
  // @@protoc_insertion_point(field_list:google.rpc.HttpRequest.headers)
  return headers_;
}

// optional bytes body = 4;
void HttpRequest::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HttpRequest::body() const {
  // @@protoc_insertion_point(field_get:google.rpc.HttpRequest.body)
  return body_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HttpRequest::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.rpc.HttpRequest.body)
}
void HttpRequest::set_body(const char* value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.rpc.HttpRequest.body)
}
void HttpRequest::set_body(const void* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.rpc.HttpRequest.body)
}
::std::string* HttpRequest::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:google.rpc.HttpRequest.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HttpRequest::release_body() {
  // @@protoc_insertion_point(field_release:google.rpc.HttpRequest.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HttpRequest::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:google.rpc.HttpRequest.body)
}

inline const HttpRequest* HttpRequest::internal_default_instance() {
  return &HttpRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HttpResponse::kStatusFieldNumber;
const int HttpResponse::kReasonFieldNumber;
const int HttpResponse::kHeadersFieldNumber;
const int HttpResponse::kBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HttpResponse::HttpResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fapi_2frpc_2fhttp_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.rpc.HttpResponse)
}

void HttpResponse::InitAsDefaultInstance() {
}

HttpResponse::HttpResponse(const HttpResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.rpc.HttpResponse)
}

void HttpResponse::SharedCtor() {
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  _cached_size_ = 0;
}

HttpResponse::~HttpResponse() {
  // @@protoc_insertion_point(destructor:google.rpc.HttpResponse)
  SharedDtor();
}

void HttpResponse::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HttpResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HttpResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HttpResponse_descriptor_;
}

const HttpResponse& HttpResponse::default_instance() {
  protobuf_InitDefaults_google_2fapi_2frpc_2fhttp_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<HttpResponse> HttpResponse_default_instance_;

HttpResponse* HttpResponse::New(::google::protobuf::Arena* arena) const {
  HttpResponse* n = new HttpResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HttpResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.rpc.HttpResponse)
  status_ = 0;
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headers_.Clear();
}

bool HttpResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.rpc.HttpResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 status = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reason;
        break;
      }

      // optional string reason = 2;
      case 2: {
        if (tag == 18) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.rpc.HttpResponse.reason"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_headers;
        break;
      }

      // repeated .google.rpc.HttpHeader headers = 3;
      case 3: {
        if (tag == 26) {
         parse_headers:
          DO_(input->IncrementRecursionDepth());
         parse_loop_headers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_headers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_headers;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_body;
        break;
      }

      // optional bytes body = 4;
      case 4: {
        if (tag == 34) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.rpc.HttpResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.rpc.HttpResponse)
  return false;
#undef DO_
}

void HttpResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.rpc.HttpResponse)
  // optional int32 status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // optional string reason = 2;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.rpc.HttpResponse.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reason(), output);
  }

  // repeated .google.rpc.HttpHeader headers = 3;
  for (unsigned int i = 0, n = this->headers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->headers(i), output);
  }

  // optional bytes body = 4;
  if (this->body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->body(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.rpc.HttpResponse)
}

::google::protobuf::uint8* HttpResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.rpc.HttpResponse)
  // optional int32 status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // optional string reason = 2;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.rpc.HttpResponse.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reason(), target);
  }

  // repeated .google.rpc.HttpHeader headers = 3;
  for (unsigned int i = 0, n = this->headers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->headers(i), false, target);
  }

  // optional bytes body = 4;
  if (this->body().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->body(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.rpc.HttpResponse)
  return target;
}

size_t HttpResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.rpc.HttpResponse)
  size_t total_size = 0;

  // optional int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  // optional string reason = 2;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason());
  }

  // optional bytes body = 4;
  if (this->body().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->body());
  }

  // repeated .google.rpc.HttpHeader headers = 3;
  {
    unsigned int count = this->headers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->headers(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HttpResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.rpc.HttpResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HttpResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HttpResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.rpc.HttpResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.rpc.HttpResponse)
    UnsafeMergeFrom(*source);
  }
}

void HttpResponse::MergeFrom(const HttpResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.rpc.HttpResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void HttpResponse::UnsafeMergeFrom(const HttpResponse& from) {
  GOOGLE_DCHECK(&from != this);
  headers_.MergeFrom(from.headers_);
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.reason().size() > 0) {

    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  if (from.body().size() > 0) {

    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
}

void HttpResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.rpc.HttpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpResponse::CopyFrom(const HttpResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.rpc.HttpResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool HttpResponse::IsInitialized() const {

  return true;
}

void HttpResponse::Swap(HttpResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HttpResponse::InternalSwap(HttpResponse* other) {
  std::swap(status_, other->status_);
  reason_.Swap(&other->reason_);
  headers_.UnsafeArenaSwap(&other->headers_);
  body_.Swap(&other->body_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HttpResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HttpResponse_descriptor_;
  metadata.reflection = HttpResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HttpResponse

// optional int32 status = 1;
void HttpResponse::clear_status() {
  status_ = 0;
}
::google::protobuf::int32 HttpResponse::status() const {
  // @@protoc_insertion_point(field_get:google.rpc.HttpResponse.status)
  return status_;
}
void HttpResponse::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:google.rpc.HttpResponse.status)
}

// optional string reason = 2;
void HttpResponse::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HttpResponse::reason() const {
  // @@protoc_insertion_point(field_get:google.rpc.HttpResponse.reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HttpResponse::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.rpc.HttpResponse.reason)
}
void HttpResponse::set_reason(const char* value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.rpc.HttpResponse.reason)
}
void HttpResponse::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.rpc.HttpResponse.reason)
}
::std::string* HttpResponse::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:google.rpc.HttpResponse.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HttpResponse::release_reason() {
  // @@protoc_insertion_point(field_release:google.rpc.HttpResponse.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HttpResponse::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:google.rpc.HttpResponse.reason)
}

// repeated .google.rpc.HttpHeader headers = 3;
int HttpResponse::headers_size() const {
  return headers_.size();
}
void HttpResponse::clear_headers() {
  headers_.Clear();
}
const ::google::rpc::HttpHeader& HttpResponse::headers(int index) const {
  // @@protoc_insertion_point(field_get:google.rpc.HttpResponse.headers)
  return headers_.Get(index);
}
::google::rpc::HttpHeader* HttpResponse::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:google.rpc.HttpResponse.headers)
  return headers_.Mutable(index);
}
::google::rpc::HttpHeader* HttpResponse::add_headers() {
  // @@protoc_insertion_point(field_add:google.rpc.HttpResponse.headers)
  return headers_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::rpc::HttpHeader >*
HttpResponse::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:google.rpc.HttpResponse.headers)
  return &headers_;
}
const ::google::protobuf::RepeatedPtrField< ::google::rpc::HttpHeader >&
HttpResponse::headers() const {
  // @@protoc_insertion_point(field_list:google.rpc.HttpResponse.headers)
  return headers_;
}

// optional bytes body = 4;
void HttpResponse::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HttpResponse::body() const {
  // @@protoc_insertion_point(field_get:google.rpc.HttpResponse.body)
  return body_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HttpResponse::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.rpc.HttpResponse.body)
}
void HttpResponse::set_body(const char* value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.rpc.HttpResponse.body)
}
void HttpResponse::set_body(const void* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.rpc.HttpResponse.body)
}
::std::string* HttpResponse::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:google.rpc.HttpResponse.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HttpResponse::release_body() {
  // @@protoc_insertion_point(field_release:google.rpc.HttpResponse.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HttpResponse::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:google.rpc.HttpResponse.body)
}

inline const HttpResponse* HttpResponse::internal_default_instance() {
  return &HttpResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HttpHeader::kKeyFieldNumber;
const int HttpHeader::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HttpHeader::HttpHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fapi_2frpc_2fhttp_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.rpc.HttpHeader)
}

void HttpHeader::InitAsDefaultInstance() {
}

HttpHeader::HttpHeader(const HttpHeader& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.rpc.HttpHeader)
}

void HttpHeader::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

HttpHeader::~HttpHeader() {
  // @@protoc_insertion_point(destructor:google.rpc.HttpHeader)
  SharedDtor();
}

void HttpHeader::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HttpHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HttpHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HttpHeader_descriptor_;
}

const HttpHeader& HttpHeader::default_instance() {
  protobuf_InitDefaults_google_2fapi_2frpc_2fhttp_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<HttpHeader> HttpHeader_default_instance_;

HttpHeader* HttpHeader::New(::google::protobuf::Arena* arena) const {
  HttpHeader* n = new HttpHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HttpHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:google.rpc.HttpHeader)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool HttpHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.rpc.HttpHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.rpc.HttpHeader.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.rpc.HttpHeader.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.rpc.HttpHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.rpc.HttpHeader)
  return false;
#undef DO_
}

void HttpHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.rpc.HttpHeader)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.rpc.HttpHeader.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.rpc.HttpHeader.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.rpc.HttpHeader)
}

::google::protobuf::uint8* HttpHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.rpc.HttpHeader)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.rpc.HttpHeader.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.rpc.HttpHeader.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.rpc.HttpHeader)
  return target;
}

size_t HttpHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.rpc.HttpHeader)
  size_t total_size = 0;

  // optional string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HttpHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.rpc.HttpHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HttpHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HttpHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.rpc.HttpHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.rpc.HttpHeader)
    UnsafeMergeFrom(*source);
  }
}

void HttpHeader::MergeFrom(const HttpHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.rpc.HttpHeader)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void HttpHeader::UnsafeMergeFrom(const HttpHeader& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void HttpHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.rpc.HttpHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpHeader::CopyFrom(const HttpHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.rpc.HttpHeader)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool HttpHeader::IsInitialized() const {

  return true;
}

void HttpHeader::Swap(HttpHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HttpHeader::InternalSwap(HttpHeader* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HttpHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HttpHeader_descriptor_;
  metadata.reflection = HttpHeader_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HttpHeader

// optional string key = 1;
void HttpHeader::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HttpHeader::key() const {
  // @@protoc_insertion_point(field_get:google.rpc.HttpHeader.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HttpHeader::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.rpc.HttpHeader.key)
}
void HttpHeader::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.rpc.HttpHeader.key)
}
void HttpHeader::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.rpc.HttpHeader.key)
}
::std::string* HttpHeader::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:google.rpc.HttpHeader.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HttpHeader::release_key() {
  // @@protoc_insertion_point(field_release:google.rpc.HttpHeader.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HttpHeader::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:google.rpc.HttpHeader.key)
}

// optional string value = 2;
void HttpHeader::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HttpHeader::value() const {
  // @@protoc_insertion_point(field_get:google.rpc.HttpHeader.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HttpHeader::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.rpc.HttpHeader.value)
}
void HttpHeader::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.rpc.HttpHeader.value)
}
void HttpHeader::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.rpc.HttpHeader.value)
}
::std::string* HttpHeader::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:google.rpc.HttpHeader.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HttpHeader::release_value() {
  // @@protoc_insertion_point(field_release:google.rpc.HttpHeader.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HttpHeader::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:google.rpc.HttpHeader.value)
}

inline const HttpHeader* HttpHeader::internal_default_instance() {
  return &HttpHeader_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace google

// @@protoc_insertion_point(global_scope)
