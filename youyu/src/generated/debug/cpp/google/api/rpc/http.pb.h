// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/rpc/http.proto

#ifndef PROTOBUF_google_2fapi_2frpc_2fhttp_2eproto__INCLUDED
#define PROTOBUF_google_2fapi_2frpc_2fhttp_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace rpc {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_google_2fapi_2frpc_2fhttp_2eproto();
void protobuf_InitDefaults_google_2fapi_2frpc_2fhttp_2eproto();
void protobuf_AssignDesc_google_2fapi_2frpc_2fhttp_2eproto();
void protobuf_ShutdownFile_google_2fapi_2frpc_2fhttp_2eproto();

class HttpHeader;
class HttpRequest;
class HttpResponse;

// ===================================================================

class HttpRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.rpc.HttpRequest) */ {
 public:
  HttpRequest();
  virtual ~HttpRequest();

  HttpRequest(const HttpRequest& from);

  inline HttpRequest& operator=(const HttpRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HttpRequest& default_instance();

  static const HttpRequest* internal_default_instance();

  void Swap(HttpRequest* other);

  // implements Message ----------------------------------------------

  inline HttpRequest* New() const { return New(NULL); }

  HttpRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HttpRequest& from);
  void MergeFrom(const HttpRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HttpRequest* other);
  void UnsafeMergeFrom(const HttpRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string method = 1;
  void clear_method();
  static const int kMethodFieldNumber = 1;
  const ::std::string& method() const;
  void set_method(const ::std::string& value);
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  ::std::string* mutable_method();
  ::std::string* release_method();
  void set_allocated_method(::std::string* method);

  // optional string uri = 2;
  void clear_uri();
  static const int kUriFieldNumber = 2;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // repeated .google.rpc.HttpHeader headers = 3;
  int headers_size() const;
  void clear_headers();
  static const int kHeadersFieldNumber = 3;
  const ::google::rpc::HttpHeader& headers(int index) const;
  ::google::rpc::HttpHeader* mutable_headers(int index);
  ::google::rpc::HttpHeader* add_headers();
  ::google::protobuf::RepeatedPtrField< ::google::rpc::HttpHeader >*
      mutable_headers();
  const ::google::protobuf::RepeatedPtrField< ::google::rpc::HttpHeader >&
      headers() const;

  // optional bytes body = 4;
  void clear_body();
  static const int kBodyFieldNumber = 4;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // @@protoc_insertion_point(class_scope:google.rpc.HttpRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::rpc::HttpHeader > headers_;
  ::google::protobuf::internal::ArenaStringPtr method_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fapi_2frpc_2fhttp_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fapi_2frpc_2fhttp_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fapi_2frpc_2fhttp_2eproto();
  friend void protobuf_ShutdownFile_google_2fapi_2frpc_2fhttp_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<HttpRequest> HttpRequest_default_instance_;

// -------------------------------------------------------------------

class HttpResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.rpc.HttpResponse) */ {
 public:
  HttpResponse();
  virtual ~HttpResponse();

  HttpResponse(const HttpResponse& from);

  inline HttpResponse& operator=(const HttpResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HttpResponse& default_instance();

  static const HttpResponse* internal_default_instance();

  void Swap(HttpResponse* other);

  // implements Message ----------------------------------------------

  inline HttpResponse* New() const { return New(NULL); }

  HttpResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HttpResponse& from);
  void MergeFrom(const HttpResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HttpResponse* other);
  void UnsafeMergeFrom(const HttpResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // optional string reason = 2;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // repeated .google.rpc.HttpHeader headers = 3;
  int headers_size() const;
  void clear_headers();
  static const int kHeadersFieldNumber = 3;
  const ::google::rpc::HttpHeader& headers(int index) const;
  ::google::rpc::HttpHeader* mutable_headers(int index);
  ::google::rpc::HttpHeader* add_headers();
  ::google::protobuf::RepeatedPtrField< ::google::rpc::HttpHeader >*
      mutable_headers();
  const ::google::protobuf::RepeatedPtrField< ::google::rpc::HttpHeader >&
      headers() const;

  // optional bytes body = 4;
  void clear_body();
  static const int kBodyFieldNumber = 4;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // @@protoc_insertion_point(class_scope:google.rpc.HttpResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::rpc::HttpHeader > headers_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  ::google::protobuf::int32 status_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fapi_2frpc_2fhttp_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fapi_2frpc_2fhttp_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fapi_2frpc_2fhttp_2eproto();
  friend void protobuf_ShutdownFile_google_2fapi_2frpc_2fhttp_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<HttpResponse> HttpResponse_default_instance_;

// -------------------------------------------------------------------

class HttpHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.rpc.HttpHeader) */ {
 public:
  HttpHeader();
  virtual ~HttpHeader();

  HttpHeader(const HttpHeader& from);

  inline HttpHeader& operator=(const HttpHeader& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HttpHeader& default_instance();

  static const HttpHeader* internal_default_instance();

  void Swap(HttpHeader* other);

  // implements Message ----------------------------------------------

  inline HttpHeader* New() const { return New(NULL); }

  HttpHeader* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HttpHeader& from);
  void MergeFrom(const HttpHeader& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HttpHeader* other);
  void UnsafeMergeFrom(const HttpHeader& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:google.rpc.HttpHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_google_2fapi_2frpc_2fhttp_2eproto_impl();
  friend void  protobuf_AddDesc_google_2fapi_2frpc_2fhttp_2eproto_impl();
  friend void protobuf_AssignDesc_google_2fapi_2frpc_2fhttp_2eproto();
  friend void protobuf_ShutdownFile_google_2fapi_2frpc_2fhttp_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<HttpHeader> HttpHeader_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// HttpRequest

// optional string method = 1;
inline void HttpRequest::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HttpRequest::method() const {
  // @@protoc_insertion_point(field_get:google.rpc.HttpRequest.method)
  return method_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HttpRequest::set_method(const ::std::string& value) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.rpc.HttpRequest.method)
}
inline void HttpRequest::set_method(const char* value) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.rpc.HttpRequest.method)
}
inline void HttpRequest::set_method(const char* value, size_t size) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.rpc.HttpRequest.method)
}
inline ::std::string* HttpRequest::mutable_method() {
  
  // @@protoc_insertion_point(field_mutable:google.rpc.HttpRequest.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HttpRequest::release_method() {
  // @@protoc_insertion_point(field_release:google.rpc.HttpRequest.method)
  
  return method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HttpRequest::set_allocated_method(::std::string* method) {
  if (method != NULL) {
    
  } else {
    
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:google.rpc.HttpRequest.method)
}

// optional string uri = 2;
inline void HttpRequest::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HttpRequest::uri() const {
  // @@protoc_insertion_point(field_get:google.rpc.HttpRequest.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HttpRequest::set_uri(const ::std::string& value) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.rpc.HttpRequest.uri)
}
inline void HttpRequest::set_uri(const char* value) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.rpc.HttpRequest.uri)
}
inline void HttpRequest::set_uri(const char* value, size_t size) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.rpc.HttpRequest.uri)
}
inline ::std::string* HttpRequest::mutable_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.rpc.HttpRequest.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HttpRequest::release_uri() {
  // @@protoc_insertion_point(field_release:google.rpc.HttpRequest.uri)
  
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HttpRequest::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    
  } else {
    
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:google.rpc.HttpRequest.uri)
}

// repeated .google.rpc.HttpHeader headers = 3;
inline int HttpRequest::headers_size() const {
  return headers_.size();
}
inline void HttpRequest::clear_headers() {
  headers_.Clear();
}
inline const ::google::rpc::HttpHeader& HttpRequest::headers(int index) const {
  // @@protoc_insertion_point(field_get:google.rpc.HttpRequest.headers)
  return headers_.Get(index);
}
inline ::google::rpc::HttpHeader* HttpRequest::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:google.rpc.HttpRequest.headers)
  return headers_.Mutable(index);
}
inline ::google::rpc::HttpHeader* HttpRequest::add_headers() {
  // @@protoc_insertion_point(field_add:google.rpc.HttpRequest.headers)
  return headers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::rpc::HttpHeader >*
HttpRequest::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:google.rpc.HttpRequest.headers)
  return &headers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::rpc::HttpHeader >&
HttpRequest::headers() const {
  // @@protoc_insertion_point(field_list:google.rpc.HttpRequest.headers)
  return headers_;
}

// optional bytes body = 4;
inline void HttpRequest::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HttpRequest::body() const {
  // @@protoc_insertion_point(field_get:google.rpc.HttpRequest.body)
  return body_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HttpRequest::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.rpc.HttpRequest.body)
}
inline void HttpRequest::set_body(const char* value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.rpc.HttpRequest.body)
}
inline void HttpRequest::set_body(const void* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.rpc.HttpRequest.body)
}
inline ::std::string* HttpRequest::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:google.rpc.HttpRequest.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HttpRequest::release_body() {
  // @@protoc_insertion_point(field_release:google.rpc.HttpRequest.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HttpRequest::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:google.rpc.HttpRequest.body)
}

inline const HttpRequest* HttpRequest::internal_default_instance() {
  return &HttpRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// HttpResponse

// optional int32 status = 1;
inline void HttpResponse::clear_status() {
  status_ = 0;
}
inline ::google::protobuf::int32 HttpResponse::status() const {
  // @@protoc_insertion_point(field_get:google.rpc.HttpResponse.status)
  return status_;
}
inline void HttpResponse::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:google.rpc.HttpResponse.status)
}

// optional string reason = 2;
inline void HttpResponse::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HttpResponse::reason() const {
  // @@protoc_insertion_point(field_get:google.rpc.HttpResponse.reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HttpResponse::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.rpc.HttpResponse.reason)
}
inline void HttpResponse::set_reason(const char* value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.rpc.HttpResponse.reason)
}
inline void HttpResponse::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.rpc.HttpResponse.reason)
}
inline ::std::string* HttpResponse::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:google.rpc.HttpResponse.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HttpResponse::release_reason() {
  // @@protoc_insertion_point(field_release:google.rpc.HttpResponse.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HttpResponse::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:google.rpc.HttpResponse.reason)
}

// repeated .google.rpc.HttpHeader headers = 3;
inline int HttpResponse::headers_size() const {
  return headers_.size();
}
inline void HttpResponse::clear_headers() {
  headers_.Clear();
}
inline const ::google::rpc::HttpHeader& HttpResponse::headers(int index) const {
  // @@protoc_insertion_point(field_get:google.rpc.HttpResponse.headers)
  return headers_.Get(index);
}
inline ::google::rpc::HttpHeader* HttpResponse::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:google.rpc.HttpResponse.headers)
  return headers_.Mutable(index);
}
inline ::google::rpc::HttpHeader* HttpResponse::add_headers() {
  // @@protoc_insertion_point(field_add:google.rpc.HttpResponse.headers)
  return headers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::rpc::HttpHeader >*
HttpResponse::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:google.rpc.HttpResponse.headers)
  return &headers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::rpc::HttpHeader >&
HttpResponse::headers() const {
  // @@protoc_insertion_point(field_list:google.rpc.HttpResponse.headers)
  return headers_;
}

// optional bytes body = 4;
inline void HttpResponse::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HttpResponse::body() const {
  // @@protoc_insertion_point(field_get:google.rpc.HttpResponse.body)
  return body_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HttpResponse::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.rpc.HttpResponse.body)
}
inline void HttpResponse::set_body(const char* value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.rpc.HttpResponse.body)
}
inline void HttpResponse::set_body(const void* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.rpc.HttpResponse.body)
}
inline ::std::string* HttpResponse::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:google.rpc.HttpResponse.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HttpResponse::release_body() {
  // @@protoc_insertion_point(field_release:google.rpc.HttpResponse.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HttpResponse::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:google.rpc.HttpResponse.body)
}

inline const HttpResponse* HttpResponse::internal_default_instance() {
  return &HttpResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// HttpHeader

// optional string key = 1;
inline void HttpHeader::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HttpHeader::key() const {
  // @@protoc_insertion_point(field_get:google.rpc.HttpHeader.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HttpHeader::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.rpc.HttpHeader.key)
}
inline void HttpHeader::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.rpc.HttpHeader.key)
}
inline void HttpHeader::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.rpc.HttpHeader.key)
}
inline ::std::string* HttpHeader::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:google.rpc.HttpHeader.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HttpHeader::release_key() {
  // @@protoc_insertion_point(field_release:google.rpc.HttpHeader.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HttpHeader::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:google.rpc.HttpHeader.key)
}

// optional string value = 2;
inline void HttpHeader::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HttpHeader::value() const {
  // @@protoc_insertion_point(field_get:google.rpc.HttpHeader.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HttpHeader::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.rpc.HttpHeader.value)
}
inline void HttpHeader::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.rpc.HttpHeader.value)
}
inline void HttpHeader::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.rpc.HttpHeader.value)
}
inline ::std::string* HttpHeader::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:google.rpc.HttpHeader.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HttpHeader::release_value() {
  // @@protoc_insertion_point(field_release:google.rpc.HttpHeader.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HttpHeader::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:google.rpc.HttpHeader.value)
}

inline const HttpHeader* HttpHeader::internal_default_instance() {
  return &HttpHeader_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fapi_2frpc_2fhttp_2eproto__INCLUDED
