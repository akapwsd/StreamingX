// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/rpc/context/audit_context.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/api/rpc/context/audit_context.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace rpc {
namespace context {

namespace {

const ::google::protobuf::Descriptor* AuditContext_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuditContext_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_google_2fapi_2frpc_2fcontext_2faudit_5fcontext_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_google_2fapi_2frpc_2fcontext_2faudit_5fcontext_2eproto() {
  protobuf_AddDesc_google_2fapi_2frpc_2fcontext_2faudit_5fcontext_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "google/api/rpc/context/audit_context.proto");
  GOOGLE_CHECK(file != NULL);
  AuditContext_descriptor_ = file->message_type(0);
  static const int AuditContext_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuditContext, audit_log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuditContext, scrubbed_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuditContext, scrubbed_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuditContext, scrubbed_response_item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuditContext, target_resource_),
  };
  AuditContext_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AuditContext_descriptor_,
      AuditContext::internal_default_instance(),
      AuditContext_offsets_,
      -1,
      -1,
      -1,
      sizeof(AuditContext),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuditContext, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_google_2fapi_2frpc_2fcontext_2faudit_5fcontext_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AuditContext_descriptor_, AuditContext::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_google_2fapi_2frpc_2fcontext_2faudit_5fcontext_2eproto() {
  AuditContext_default_instance_.Shutdown();
  delete AuditContext_reflection_;
}

void protobuf_InitDefaults_google_2fapi_2frpc_2fcontext_2faudit_5fcontext_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2fstruct_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  AuditContext_default_instance_.DefaultConstruct();
  AuditContext_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_google_2fapi_2frpc_2fcontext_2faudit_5fcontext_2eproto_once_);
void protobuf_InitDefaults_google_2fapi_2frpc_2fcontext_2faudit_5fcontext_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_google_2fapi_2frpc_2fcontext_2faudit_5fcontext_2eproto_once_,
                 &protobuf_InitDefaults_google_2fapi_2frpc_2fcontext_2faudit_5fcontext_2eproto_impl);
}
void protobuf_AddDesc_google_2fapi_2frpc_2fcontext_2faudit_5fcontext_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_google_2fapi_2frpc_2fcontext_2faudit_5fcontext_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n*google/api/rpc/context/audit_context.p"
    "roto\022\022google.rpc.context\032\034google/protobu"
    "f/struct.proto\"\307\001\n\014AuditContext\022\021\n\taudit"
    "_log\030\001 \001(\014\0221\n\020scrubbed_request\030\002 \001(\0132\027.g"
    "oogle.protobuf.Struct\0222\n\021scrubbed_respon"
    "se\030\003 \001(\0132\027.google.protobuf.Struct\022$\n\034scr"
    "ubbed_response_item_count\030\004 \001(\005\022\027\n\017targe"
    "t_resource\030\005 \001(\tBk\n\026com.google.rpc.conte"
    "xtB\021AuditContextProtoP\001Z9google.golang.o"
    "rg/genproto/googleapis/rpc/context;conte"
    "xt\370\001\001b\006proto3", 413);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/api/rpc/context/audit_context.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fstruct_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_google_2fapi_2frpc_2fcontext_2faudit_5fcontext_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_google_2fapi_2frpc_2fcontext_2faudit_5fcontext_2eproto_once_);
void protobuf_AddDesc_google_2fapi_2frpc_2fcontext_2faudit_5fcontext_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_google_2fapi_2frpc_2fcontext_2faudit_5fcontext_2eproto_once_,
                 &protobuf_AddDesc_google_2fapi_2frpc_2fcontext_2faudit_5fcontext_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_google_2fapi_2frpc_2fcontext_2faudit_5fcontext_2eproto {
  StaticDescriptorInitializer_google_2fapi_2frpc_2fcontext_2faudit_5fcontext_2eproto() {
    protobuf_AddDesc_google_2fapi_2frpc_2fcontext_2faudit_5fcontext_2eproto();
  }
} static_descriptor_initializer_google_2fapi_2frpc_2fcontext_2faudit_5fcontext_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

void AuditContext::_slow_mutable_scrubbed_request() {
  scrubbed_request_ = ::google::protobuf::Arena::CreateMessage< ::google::protobuf::Struct >(
      GetArenaNoVirtual());
}
::google::protobuf::Struct* AuditContext::_slow_release_scrubbed_request() {
  if (scrubbed_request_ == NULL) {
    return NULL;
  } else {
    ::google::protobuf::Struct* temp = new ::google::protobuf::Struct(*scrubbed_request_);
    scrubbed_request_ = NULL;
    return temp;
  }
}
::google::protobuf::Struct* AuditContext::unsafe_arena_release_scrubbed_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.rpc.context.AuditContext.scrubbed_request)
  
  ::google::protobuf::Struct* temp = scrubbed_request_;
  scrubbed_request_ = NULL;
  return temp;
}
void AuditContext::_slow_set_allocated_scrubbed_request(
    ::google::protobuf::Arena* message_arena, ::google::protobuf::Struct** scrubbed_request) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*scrubbed_request) == NULL) {
      message_arena->Own(*scrubbed_request);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*scrubbed_request)) {
      ::google::protobuf::Struct* new_scrubbed_request = 
            ::google::protobuf::Arena::CreateMessage< ::google::protobuf::Struct >(
            message_arena);
      new_scrubbed_request->CopyFrom(**scrubbed_request);
      *scrubbed_request = new_scrubbed_request;
    }
}
void AuditContext::unsafe_arena_set_allocated_scrubbed_request(
    ::google::protobuf::Struct* scrubbed_request) {
  if (GetArenaNoVirtual() == NULL) {
    delete scrubbed_request_;
  }
  scrubbed_request_ = scrubbed_request;
  if (scrubbed_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AuditContext.scrubbed_request)
}
void AuditContext::_slow_mutable_scrubbed_response() {
  scrubbed_response_ = ::google::protobuf::Arena::CreateMessage< ::google::protobuf::Struct >(
      GetArenaNoVirtual());
}
::google::protobuf::Struct* AuditContext::_slow_release_scrubbed_response() {
  if (scrubbed_response_ == NULL) {
    return NULL;
  } else {
    ::google::protobuf::Struct* temp = new ::google::protobuf::Struct(*scrubbed_response_);
    scrubbed_response_ = NULL;
    return temp;
  }
}
::google::protobuf::Struct* AuditContext::unsafe_arena_release_scrubbed_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.rpc.context.AuditContext.scrubbed_response)
  
  ::google::protobuf::Struct* temp = scrubbed_response_;
  scrubbed_response_ = NULL;
  return temp;
}
void AuditContext::_slow_set_allocated_scrubbed_response(
    ::google::protobuf::Arena* message_arena, ::google::protobuf::Struct** scrubbed_response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*scrubbed_response) == NULL) {
      message_arena->Own(*scrubbed_response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*scrubbed_response)) {
      ::google::protobuf::Struct* new_scrubbed_response = 
            ::google::protobuf::Arena::CreateMessage< ::google::protobuf::Struct >(
            message_arena);
      new_scrubbed_response->CopyFrom(**scrubbed_response);
      *scrubbed_response = new_scrubbed_response;
    }
}
void AuditContext::unsafe_arena_set_allocated_scrubbed_response(
    ::google::protobuf::Struct* scrubbed_response) {
  if (GetArenaNoVirtual() == NULL) {
    delete scrubbed_response_;
  }
  scrubbed_response_ = scrubbed_response;
  if (scrubbed_response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AuditContext.scrubbed_response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuditContext::kAuditLogFieldNumber;
const int AuditContext::kScrubbedRequestFieldNumber;
const int AuditContext::kScrubbedResponseFieldNumber;
const int AuditContext::kScrubbedResponseItemCountFieldNumber;
const int AuditContext::kTargetResourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuditContext::AuditContext()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fapi_2frpc_2fcontext_2faudit_5fcontext_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.rpc.context.AuditContext)
}
AuditContext::AuditContext(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fapi_2frpc_2fcontext_2faudit_5fcontext_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.rpc.context.AuditContext)
}

void AuditContext::InitAsDefaultInstance() {
  scrubbed_request_ = const_cast< ::google::protobuf::Struct*>(
      ::google::protobuf::Struct::internal_default_instance());
  scrubbed_response_ = const_cast< ::google::protobuf::Struct*>(
      ::google::protobuf::Struct::internal_default_instance());
}

AuditContext::AuditContext(const AuditContext& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.rpc.context.AuditContext)
}

void AuditContext::SharedCtor() {
  audit_log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_resource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scrubbed_request_ = NULL;
  scrubbed_response_ = NULL;
  scrubbed_response_item_count_ = 0;
  _cached_size_ = 0;
}

AuditContext::~AuditContext() {
  // @@protoc_insertion_point(destructor:google.rpc.context.AuditContext)
  SharedDtor();
}

void AuditContext::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  audit_log_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  target_resource_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != &AuditContext_default_instance_.get()) {
    delete scrubbed_request_;
    delete scrubbed_response_;
  }
}

void AuditContext::ArenaDtor(void* object) {
  AuditContext* _this = reinterpret_cast< AuditContext* >(object);
  (void)_this;
}
void AuditContext::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void AuditContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuditContext::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuditContext_descriptor_;
}

const AuditContext& AuditContext::default_instance() {
  protobuf_InitDefaults_google_2fapi_2frpc_2fcontext_2faudit_5fcontext_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AuditContext> AuditContext_default_instance_;

AuditContext* AuditContext::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<AuditContext>(arena);
}

void AuditContext::Clear() {
// @@protoc_insertion_point(message_clear_start:google.rpc.context.AuditContext)
  audit_log_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && scrubbed_request_ != NULL) delete scrubbed_request_;
  scrubbed_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && scrubbed_response_ != NULL) delete scrubbed_response_;
  scrubbed_response_ = NULL;
  scrubbed_response_item_count_ = 0;
  target_resource_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool AuditContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.rpc.context.AuditContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes audit_log = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_audit_log()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_scrubbed_request;
        break;
      }

      // optional .google.protobuf.Struct scrubbed_request = 2;
      case 2: {
        if (tag == 18) {
         parse_scrubbed_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scrubbed_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_scrubbed_response;
        break;
      }

      // optional .google.protobuf.Struct scrubbed_response = 3;
      case 3: {
        if (tag == 26) {
         parse_scrubbed_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scrubbed_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_scrubbed_response_item_count;
        break;
      }

      // optional int32 scrubbed_response_item_count = 4;
      case 4: {
        if (tag == 32) {
         parse_scrubbed_response_item_count:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scrubbed_response_item_count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_target_resource;
        break;
      }

      // optional string target_resource = 5;
      case 5: {
        if (tag == 42) {
         parse_target_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_resource()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->target_resource().data(), this->target_resource().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.rpc.context.AuditContext.target_resource"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.rpc.context.AuditContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.rpc.context.AuditContext)
  return false;
#undef DO_
}

void AuditContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.rpc.context.AuditContext)
  // optional bytes audit_log = 1;
  if (this->audit_log().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->audit_log(), output);
  }

  // optional .google.protobuf.Struct scrubbed_request = 2;
  if (this->has_scrubbed_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->scrubbed_request_, output);
  }

  // optional .google.protobuf.Struct scrubbed_response = 3;
  if (this->has_scrubbed_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->scrubbed_response_, output);
  }

  // optional int32 scrubbed_response_item_count = 4;
  if (this->scrubbed_response_item_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->scrubbed_response_item_count(), output);
  }

  // optional string target_resource = 5;
  if (this->target_resource().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target_resource().data(), this->target_resource().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.rpc.context.AuditContext.target_resource");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->target_resource(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.rpc.context.AuditContext)
}

::google::protobuf::uint8* AuditContext::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.rpc.context.AuditContext)
  // optional bytes audit_log = 1;
  if (this->audit_log().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->audit_log(), target);
  }

  // optional .google.protobuf.Struct scrubbed_request = 2;
  if (this->has_scrubbed_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->scrubbed_request_, false, target);
  }

  // optional .google.protobuf.Struct scrubbed_response = 3;
  if (this->has_scrubbed_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->scrubbed_response_, false, target);
  }

  // optional int32 scrubbed_response_item_count = 4;
  if (this->scrubbed_response_item_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->scrubbed_response_item_count(), target);
  }

  // optional string target_resource = 5;
  if (this->target_resource().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target_resource().data(), this->target_resource().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.rpc.context.AuditContext.target_resource");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->target_resource(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.rpc.context.AuditContext)
  return target;
}

size_t AuditContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.rpc.context.AuditContext)
  size_t total_size = 0;

  // optional bytes audit_log = 1;
  if (this->audit_log().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->audit_log());
  }

  // optional .google.protobuf.Struct scrubbed_request = 2;
  if (this->has_scrubbed_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->scrubbed_request_);
  }

  // optional .google.protobuf.Struct scrubbed_response = 3;
  if (this->has_scrubbed_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->scrubbed_response_);
  }

  // optional int32 scrubbed_response_item_count = 4;
  if (this->scrubbed_response_item_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->scrubbed_response_item_count());
  }

  // optional string target_resource = 5;
  if (this->target_resource().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->target_resource());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuditContext::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.rpc.context.AuditContext)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AuditContext* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuditContext>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.rpc.context.AuditContext)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.rpc.context.AuditContext)
    UnsafeMergeFrom(*source);
  }
}

void AuditContext::MergeFrom(const AuditContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.rpc.context.AuditContext)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AuditContext::UnsafeMergeFrom(const AuditContext& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.audit_log().size() > 0) {
    set_audit_log(from.audit_log());
  }
  if (from.has_scrubbed_request()) {
    mutable_scrubbed_request()->::google::protobuf::Struct::MergeFrom(from.scrubbed_request());
  }
  if (from.has_scrubbed_response()) {
    mutable_scrubbed_response()->::google::protobuf::Struct::MergeFrom(from.scrubbed_response());
  }
  if (from.scrubbed_response_item_count() != 0) {
    set_scrubbed_response_item_count(from.scrubbed_response_item_count());
  }
  if (from.target_resource().size() > 0) {
    set_target_resource(from.target_resource());
  }
}

void AuditContext::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.rpc.context.AuditContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuditContext::CopyFrom(const AuditContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.rpc.context.AuditContext)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AuditContext::IsInitialized() const {

  return true;
}

void AuditContext::Swap(AuditContext* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    AuditContext temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void AuditContext::UnsafeArenaSwap(AuditContext* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void AuditContext::InternalSwap(AuditContext* other) {
  audit_log_.Swap(&other->audit_log_);
  std::swap(scrubbed_request_, other->scrubbed_request_);
  std::swap(scrubbed_response_, other->scrubbed_response_);
  std::swap(scrubbed_response_item_count_, other->scrubbed_response_item_count_);
  target_resource_.Swap(&other->target_resource_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuditContext::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuditContext_descriptor_;
  metadata.reflection = AuditContext_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuditContext

// optional bytes audit_log = 1;
void AuditContext::clear_audit_log() {
  audit_log_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& AuditContext::audit_log() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AuditContext.audit_log)
  return audit_log_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuditContext::set_audit_log(const ::std::string& value) {
  
  audit_log_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.rpc.context.AuditContext.audit_log)
}
void AuditContext::set_audit_log(const char* value) {
  
  audit_log_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.rpc.context.AuditContext.audit_log)
}
void AuditContext::set_audit_log(const void* value,
    size_t size) {
  
  audit_log_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.rpc.context.AuditContext.audit_log)
}
::std::string* AuditContext::mutable_audit_log() {
  
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AuditContext.audit_log)
  return audit_log_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* AuditContext::release_audit_log() {
  // @@protoc_insertion_point(field_release:google.rpc.context.AuditContext.audit_log)
  
  return audit_log_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* AuditContext::unsafe_arena_release_audit_log() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.rpc.context.AuditContext.audit_log)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return audit_log_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void AuditContext::set_allocated_audit_log(::std::string* audit_log) {
  if (audit_log != NULL) {
    
  } else {
    
  }
  audit_log_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audit_log,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AuditContext.audit_log)
}
void AuditContext::unsafe_arena_set_allocated_audit_log(
    ::std::string* audit_log) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (audit_log != NULL) {
    
  } else {
    
  }
  audit_log_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      audit_log, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AuditContext.audit_log)
}

// optional .google.protobuf.Struct scrubbed_request = 2;
bool AuditContext::has_scrubbed_request() const {
  return this != internal_default_instance() && scrubbed_request_ != NULL;
}
void AuditContext::clear_scrubbed_request() {
  if (GetArenaNoVirtual() == NULL && scrubbed_request_ != NULL) delete scrubbed_request_;
  scrubbed_request_ = NULL;
}
const ::google::protobuf::Struct& AuditContext::scrubbed_request() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AuditContext.scrubbed_request)
  return scrubbed_request_ != NULL ? *scrubbed_request_
                         : *::google::protobuf::Struct::internal_default_instance();
}
::google::protobuf::Struct* AuditContext::mutable_scrubbed_request() {
  
  if (scrubbed_request_ == NULL) {
    _slow_mutable_scrubbed_request();
  }
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AuditContext.scrubbed_request)
  return scrubbed_request_;
}
::google::protobuf::Struct* AuditContext::release_scrubbed_request() {
  // @@protoc_insertion_point(field_release:google.rpc.context.AuditContext.scrubbed_request)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_scrubbed_request();
  } else {
    ::google::protobuf::Struct* temp = scrubbed_request_;
    scrubbed_request_ = NULL;
    return temp;
  }
}
 void AuditContext::set_allocated_scrubbed_request(::google::protobuf::Struct* scrubbed_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scrubbed_request_;
  }
  if (scrubbed_request != NULL) {
    _slow_set_allocated_scrubbed_request(message_arena, &scrubbed_request);
  }
  scrubbed_request_ = scrubbed_request;
  if (scrubbed_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AuditContext.scrubbed_request)
}

// optional .google.protobuf.Struct scrubbed_response = 3;
bool AuditContext::has_scrubbed_response() const {
  return this != internal_default_instance() && scrubbed_response_ != NULL;
}
void AuditContext::clear_scrubbed_response() {
  if (GetArenaNoVirtual() == NULL && scrubbed_response_ != NULL) delete scrubbed_response_;
  scrubbed_response_ = NULL;
}
const ::google::protobuf::Struct& AuditContext::scrubbed_response() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AuditContext.scrubbed_response)
  return scrubbed_response_ != NULL ? *scrubbed_response_
                         : *::google::protobuf::Struct::internal_default_instance();
}
::google::protobuf::Struct* AuditContext::mutable_scrubbed_response() {
  
  if (scrubbed_response_ == NULL) {
    _slow_mutable_scrubbed_response();
  }
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AuditContext.scrubbed_response)
  return scrubbed_response_;
}
::google::protobuf::Struct* AuditContext::release_scrubbed_response() {
  // @@protoc_insertion_point(field_release:google.rpc.context.AuditContext.scrubbed_response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_scrubbed_response();
  } else {
    ::google::protobuf::Struct* temp = scrubbed_response_;
    scrubbed_response_ = NULL;
    return temp;
  }
}
 void AuditContext::set_allocated_scrubbed_response(::google::protobuf::Struct* scrubbed_response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scrubbed_response_;
  }
  if (scrubbed_response != NULL) {
    _slow_set_allocated_scrubbed_response(message_arena, &scrubbed_response);
  }
  scrubbed_response_ = scrubbed_response;
  if (scrubbed_response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AuditContext.scrubbed_response)
}

// optional int32 scrubbed_response_item_count = 4;
void AuditContext::clear_scrubbed_response_item_count() {
  scrubbed_response_item_count_ = 0;
}
::google::protobuf::int32 AuditContext::scrubbed_response_item_count() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AuditContext.scrubbed_response_item_count)
  return scrubbed_response_item_count_;
}
void AuditContext::set_scrubbed_response_item_count(::google::protobuf::int32 value) {
  
  scrubbed_response_item_count_ = value;
  // @@protoc_insertion_point(field_set:google.rpc.context.AuditContext.scrubbed_response_item_count)
}

// optional string target_resource = 5;
void AuditContext::clear_target_resource() {
  target_resource_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& AuditContext::target_resource() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AuditContext.target_resource)
  return target_resource_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuditContext::set_target_resource(const ::std::string& value) {
  
  target_resource_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.rpc.context.AuditContext.target_resource)
}
void AuditContext::set_target_resource(const char* value) {
  
  target_resource_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.rpc.context.AuditContext.target_resource)
}
void AuditContext::set_target_resource(const char* value,
    size_t size) {
  
  target_resource_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.rpc.context.AuditContext.target_resource)
}
::std::string* AuditContext::mutable_target_resource() {
  
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AuditContext.target_resource)
  return target_resource_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* AuditContext::release_target_resource() {
  // @@protoc_insertion_point(field_release:google.rpc.context.AuditContext.target_resource)
  
  return target_resource_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* AuditContext::unsafe_arena_release_target_resource() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.rpc.context.AuditContext.target_resource)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return target_resource_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void AuditContext::set_allocated_target_resource(::std::string* target_resource) {
  if (target_resource != NULL) {
    
  } else {
    
  }
  target_resource_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_resource,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AuditContext.target_resource)
}
void AuditContext::unsafe_arena_set_allocated_target_resource(
    ::std::string* target_resource) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (target_resource != NULL) {
    
  } else {
    
  }
  target_resource_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      target_resource, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AuditContext.target_resource)
}

inline const AuditContext* AuditContext::internal_default_instance() {
  return &AuditContext_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace context
}  // namespace rpc
}  // namespace google

// @@protoc_insertion_point(global_scope)
