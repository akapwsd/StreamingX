// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/quota.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/api/quota.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace api {

namespace {

const ::google::protobuf::Descriptor* Quota_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Quota_reflection_ = NULL;
const ::google::protobuf::Descriptor* MetricRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetricRule_reflection_ = NULL;
const ::google::protobuf::Descriptor* MetricRule_MetricCostsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* QuotaLimit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuotaLimit_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuotaLimit_ValuesEntry_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_google_2fapi_2fquota_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_google_2fapi_2fquota_2eproto() {
  protobuf_AddDesc_google_2fapi_2fquota_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "google/api/quota.proto");
  GOOGLE_CHECK(file != NULL);
  Quota_descriptor_ = file->message_type(0);
  static const int Quota_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quota, limits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quota, metric_rules_),
  };
  Quota_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Quota_descriptor_,
      Quota::internal_default_instance(),
      Quota_offsets_,
      -1,
      -1,
      -1,
      sizeof(Quota),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quota, _internal_metadata_));
  MetricRule_descriptor_ = file->message_type(1);
  static const int MetricRule_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricRule, selector_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricRule, metric_costs_),
  };
  MetricRule_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MetricRule_descriptor_,
      MetricRule::internal_default_instance(),
      MetricRule_offsets_,
      -1,
      -1,
      -1,
      sizeof(MetricRule),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricRule, _internal_metadata_));
  MetricRule_MetricCostsEntry_descriptor_ = MetricRule_descriptor_->nested_type(0);
  QuotaLimit_descriptor_ = file->message_type(2);
  static const int QuotaLimit_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaLimit, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaLimit, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaLimit, default_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaLimit, max_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaLimit, free_tier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaLimit, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaLimit, metric_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaLimit, unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaLimit, values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaLimit, display_name_),
  };
  QuotaLimit_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QuotaLimit_descriptor_,
      QuotaLimit::internal_default_instance(),
      QuotaLimit_offsets_,
      -1,
      -1,
      -1,
      sizeof(QuotaLimit),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaLimit, _internal_metadata_));
  QuotaLimit_ValuesEntry_descriptor_ = QuotaLimit_descriptor_->nested_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_google_2fapi_2fquota_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Quota_descriptor_, Quota::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MetricRule_descriptor_, MetricRule::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        MetricRule_MetricCostsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::google::protobuf::int64,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
            0>::CreateDefaultInstance(
                MetricRule_MetricCostsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QuotaLimit_descriptor_, QuotaLimit::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        QuotaLimit_ValuesEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::google::protobuf::int64,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
            0>::CreateDefaultInstance(
                QuotaLimit_ValuesEntry_descriptor_));
}

}  // namespace

void protobuf_ShutdownFile_google_2fapi_2fquota_2eproto() {
  Quota_default_instance_.Shutdown();
  delete Quota_reflection_;
  MetricRule_default_instance_.Shutdown();
  delete MetricRule_reflection_;
  QuotaLimit_default_instance_.Shutdown();
  delete QuotaLimit_reflection_;
}

void protobuf_InitDefaults_google_2fapi_2fquota_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  Quota_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  MetricRule_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ::google::protobuf::internal::GetEmptyString();
  QuotaLimit_default_instance_.DefaultConstruct();
  Quota_default_instance_.get_mutable()->InitAsDefaultInstance();
  MetricRule_default_instance_.get_mutable()->InitAsDefaultInstance();
  QuotaLimit_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_google_2fapi_2fquota_2eproto_once_);
void protobuf_InitDefaults_google_2fapi_2fquota_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_google_2fapi_2fquota_2eproto_once_,
                 &protobuf_InitDefaults_google_2fapi_2fquota_2eproto_impl);
}
void protobuf_AddDesc_google_2fapi_2fquota_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_google_2fapi_2fquota_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026google/api/quota.proto\022\ngoogle.api\"]\n\005"
    "Quota\022&\n\006limits\030\003 \003(\0132\026.google.api.Quota"
    "Limit\022,\n\014metric_rules\030\004 \003(\0132\026.google.api"
    ".MetricRule\"\221\001\n\nMetricRule\022\020\n\010selector\030\001"
    " \001(\t\022=\n\014metric_costs\030\002 \003(\0132\'.google.api."
    "MetricRule.MetricCostsEntry\0322\n\020MetricCos"
    "tsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\003:\0028\001\""
    "\225\002\n\nQuotaLimit\022\014\n\004name\030\006 \001(\t\022\023\n\013descript"
    "ion\030\002 \001(\t\022\025\n\rdefault_limit\030\003 \001(\003\022\021\n\tmax_"
    "limit\030\004 \001(\003\022\021\n\tfree_tier\030\007 \001(\003\022\020\n\010durati"
    "on\030\005 \001(\t\022\016\n\006metric\030\010 \001(\t\022\014\n\004unit\030\t \001(\t\0222"
    "\n\006values\030\n \003(\0132\".google.api.QuotaLimit.V"
    "aluesEntry\022\024\n\014display_name\030\014 \001(\t\032-\n\013Valu"
    "esEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\003:\0028\001B"
    "l\n\016com.google.apiB\nQuotaProtoP\001ZEgoogle."
    "golang.org/genproto/googleapis/api/servi"
    "ceconfig;serviceconfig\242\002\004GAPIb\006proto3", 677);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/api/quota.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_google_2fapi_2fquota_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_google_2fapi_2fquota_2eproto_once_);
void protobuf_AddDesc_google_2fapi_2fquota_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_google_2fapi_2fquota_2eproto_once_,
                 &protobuf_AddDesc_google_2fapi_2fquota_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_google_2fapi_2fquota_2eproto {
  StaticDescriptorInitializer_google_2fapi_2fquota_2eproto() {
    protobuf_AddDesc_google_2fapi_2fquota_2eproto();
  }
} static_descriptor_initializer_google_2fapi_2fquota_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Quota::kLimitsFieldNumber;
const int Quota::kMetricRulesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Quota::Quota()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fapi_2fquota_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.Quota)
}

void Quota::InitAsDefaultInstance() {
}

Quota::Quota(const Quota& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.api.Quota)
}

void Quota::SharedCtor() {
  _cached_size_ = 0;
}

Quota::~Quota() {
  // @@protoc_insertion_point(destructor:google.api.Quota)
  SharedDtor();
}

void Quota::SharedDtor() {
}

void Quota::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quota::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Quota_descriptor_;
}

const Quota& Quota::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fquota_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Quota> Quota_default_instance_;

Quota* Quota::New(::google::protobuf::Arena* arena) const {
  Quota* n = new Quota;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Quota::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.Quota)
  limits_.Clear();
  metric_rules_.Clear();
}

bool Quota::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.Quota)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.api.QuotaLimit limits = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_limits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_limits()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_limits;
        if (input->ExpectTag(34)) goto parse_loop_metric_rules;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .google.api.MetricRule metric_rules = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_metric_rules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_metric_rules()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_metric_rules;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.Quota)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.Quota)
  return false;
#undef DO_
}

void Quota::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.Quota)
  // repeated .google.api.QuotaLimit limits = 3;
  for (unsigned int i = 0, n = this->limits_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->limits(i), output);
  }

  // repeated .google.api.MetricRule metric_rules = 4;
  for (unsigned int i = 0, n = this->metric_rules_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->metric_rules(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.Quota)
}

::google::protobuf::uint8* Quota::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.Quota)
  // repeated .google.api.QuotaLimit limits = 3;
  for (unsigned int i = 0, n = this->limits_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->limits(i), false, target);
  }

  // repeated .google.api.MetricRule metric_rules = 4;
  for (unsigned int i = 0, n = this->metric_rules_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->metric_rules(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.Quota)
  return target;
}

size_t Quota::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.Quota)
  size_t total_size = 0;

  // repeated .google.api.QuotaLimit limits = 3;
  {
    unsigned int count = this->limits_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->limits(i));
    }
  }

  // repeated .google.api.MetricRule metric_rules = 4;
  {
    unsigned int count = this->metric_rules_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->metric_rules(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quota::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.Quota)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Quota* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Quota>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.Quota)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.Quota)
    UnsafeMergeFrom(*source);
  }
}

void Quota::MergeFrom(const Quota& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.Quota)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Quota::UnsafeMergeFrom(const Quota& from) {
  GOOGLE_DCHECK(&from != this);
  limits_.MergeFrom(from.limits_);
  metric_rules_.MergeFrom(from.metric_rules_);
}

void Quota::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.Quota)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quota::CopyFrom(const Quota& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.Quota)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Quota::IsInitialized() const {

  return true;
}

void Quota::Swap(Quota* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Quota::InternalSwap(Quota* other) {
  limits_.UnsafeArenaSwap(&other->limits_);
  metric_rules_.UnsafeArenaSwap(&other->metric_rules_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Quota::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Quota_descriptor_;
  metadata.reflection = Quota_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Quota

// repeated .google.api.QuotaLimit limits = 3;
int Quota::limits_size() const {
  return limits_.size();
}
void Quota::clear_limits() {
  limits_.Clear();
}
const ::google::api::QuotaLimit& Quota::limits(int index) const {
  // @@protoc_insertion_point(field_get:google.api.Quota.limits)
  return limits_.Get(index);
}
::google::api::QuotaLimit* Quota::mutable_limits(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.Quota.limits)
  return limits_.Mutable(index);
}
::google::api::QuotaLimit* Quota::add_limits() {
  // @@protoc_insertion_point(field_add:google.api.Quota.limits)
  return limits_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::api::QuotaLimit >*
Quota::mutable_limits() {
  // @@protoc_insertion_point(field_mutable_list:google.api.Quota.limits)
  return &limits_;
}
const ::google::protobuf::RepeatedPtrField< ::google::api::QuotaLimit >&
Quota::limits() const {
  // @@protoc_insertion_point(field_list:google.api.Quota.limits)
  return limits_;
}

// repeated .google.api.MetricRule metric_rules = 4;
int Quota::metric_rules_size() const {
  return metric_rules_.size();
}
void Quota::clear_metric_rules() {
  metric_rules_.Clear();
}
const ::google::api::MetricRule& Quota::metric_rules(int index) const {
  // @@protoc_insertion_point(field_get:google.api.Quota.metric_rules)
  return metric_rules_.Get(index);
}
::google::api::MetricRule* Quota::mutable_metric_rules(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.Quota.metric_rules)
  return metric_rules_.Mutable(index);
}
::google::api::MetricRule* Quota::add_metric_rules() {
  // @@protoc_insertion_point(field_add:google.api.Quota.metric_rules)
  return metric_rules_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::api::MetricRule >*
Quota::mutable_metric_rules() {
  // @@protoc_insertion_point(field_mutable_list:google.api.Quota.metric_rules)
  return &metric_rules_;
}
const ::google::protobuf::RepeatedPtrField< ::google::api::MetricRule >&
Quota::metric_rules() const {
  // @@protoc_insertion_point(field_list:google.api.Quota.metric_rules)
  return metric_rules_;
}

inline const Quota* Quota::internal_default_instance() {
  return &Quota_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MetricRule::kSelectorFieldNumber;
const int MetricRule::kMetricCostsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MetricRule::MetricRule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fapi_2fquota_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.MetricRule)
}

void MetricRule::InitAsDefaultInstance() {
}

MetricRule::MetricRule(const MetricRule& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.api.MetricRule)
}

void MetricRule::SharedCtor() {
  metric_costs_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  metric_costs_.SetEntryDescriptor(
      &::google::api::MetricRule_MetricCostsEntry_descriptor_);
  selector_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

MetricRule::~MetricRule() {
  // @@protoc_insertion_point(destructor:google.api.MetricRule)
  SharedDtor();
}

void MetricRule::SharedDtor() {
  selector_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MetricRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetricRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetricRule_descriptor_;
}

const MetricRule& MetricRule::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fquota_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MetricRule> MetricRule_default_instance_;

MetricRule* MetricRule::New(::google::protobuf::Arena* arena) const {
  MetricRule* n = new MetricRule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MetricRule::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.MetricRule)
  selector_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metric_costs_.Clear();
}

bool MetricRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.MetricRule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string selector = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_selector()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->selector().data(), this->selector().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.MetricRule.selector"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_metric_costs;
        break;
      }

      // map<string, int64> metric_costs = 2;
      case 2: {
        if (tag == 18) {
         parse_metric_costs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_metric_costs:
          MetricRule_MetricCostsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::google::protobuf::int64,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 > > parser(&metric_costs_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.MetricRule.MetricCostsEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_metric_costs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.MetricRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.MetricRule)
  return false;
#undef DO_
}

void MetricRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.MetricRule)
  // optional string selector = 1;
  if (this->selector().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->selector().data(), this->selector().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.MetricRule.selector");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->selector(), output);
  }

  // map<string, int64> metric_costs = 2;
  if (!this->metric_costs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.api.MetricRule.MetricCostsEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->metric_costs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->metric_costs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->metric_costs().begin();
          it != this->metric_costs().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<MetricRule_MetricCostsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(metric_costs_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MetricRule_MetricCostsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->metric_costs().begin();
          it != this->metric_costs().end(); ++it) {
        entry.reset(metric_costs_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:google.api.MetricRule)
}

::google::protobuf::uint8* MetricRule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.MetricRule)
  // optional string selector = 1;
  if (this->selector().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->selector().data(), this->selector().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.MetricRule.selector");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->selector(), target);
  }

  // map<string, int64> metric_costs = 2;
  if (!this->metric_costs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.api.MetricRule.MetricCostsEntry.key");
      }
    };

    if (deterministic &&
        this->metric_costs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->metric_costs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->metric_costs().begin();
          it != this->metric_costs().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<MetricRule_MetricCostsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(metric_costs_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MetricRule_MetricCostsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->metric_costs().begin();
          it != this->metric_costs().end(); ++it) {
        entry.reset(metric_costs_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.MetricRule)
  return target;
}

size_t MetricRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.MetricRule)
  size_t total_size = 0;

  // optional string selector = 1;
  if (this->selector().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->selector());
  }

  // map<string, int64> metric_costs = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->metric_costs_size());
  {
    ::google::protobuf::scoped_ptr<MetricRule_MetricCostsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
        it = this->metric_costs().begin();
        it != this->metric_costs().end(); ++it) {
      entry.reset(metric_costs_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetricRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.MetricRule)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MetricRule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MetricRule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.MetricRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.MetricRule)
    UnsafeMergeFrom(*source);
  }
}

void MetricRule::MergeFrom(const MetricRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.MetricRule)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MetricRule::UnsafeMergeFrom(const MetricRule& from) {
  GOOGLE_DCHECK(&from != this);
  metric_costs_.MergeFrom(from.metric_costs_);
  if (from.selector().size() > 0) {

    selector_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.selector_);
  }
}

void MetricRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.MetricRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetricRule::CopyFrom(const MetricRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.MetricRule)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MetricRule::IsInitialized() const {

  return true;
}

void MetricRule::Swap(MetricRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MetricRule::InternalSwap(MetricRule* other) {
  selector_.Swap(&other->selector_);
  metric_costs_.Swap(&other->metric_costs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MetricRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetricRule_descriptor_;
  metadata.reflection = MetricRule_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MetricRule

// optional string selector = 1;
void MetricRule::clear_selector() {
  selector_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MetricRule::selector() const {
  // @@protoc_insertion_point(field_get:google.api.MetricRule.selector)
  return selector_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MetricRule::set_selector(const ::std::string& value) {
  
  selector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.MetricRule.selector)
}
void MetricRule::set_selector(const char* value) {
  
  selector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.MetricRule.selector)
}
void MetricRule::set_selector(const char* value, size_t size) {
  
  selector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.MetricRule.selector)
}
::std::string* MetricRule::mutable_selector() {
  
  // @@protoc_insertion_point(field_mutable:google.api.MetricRule.selector)
  return selector_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MetricRule::release_selector() {
  // @@protoc_insertion_point(field_release:google.api.MetricRule.selector)
  
  return selector_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MetricRule::set_allocated_selector(::std::string* selector) {
  if (selector != NULL) {
    
  } else {
    
  }
  selector_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), selector);
  // @@protoc_insertion_point(field_set_allocated:google.api.MetricRule.selector)
}

// map<string, int64> metric_costs = 2;
int MetricRule::metric_costs_size() const {
  return metric_costs_.size();
}
void MetricRule::clear_metric_costs() {
  metric_costs_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >&
MetricRule::metric_costs() const {
  // @@protoc_insertion_point(field_map:google.api.MetricRule.metric_costs)
  return metric_costs_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >*
MetricRule::mutable_metric_costs() {
  // @@protoc_insertion_point(field_mutable_map:google.api.MetricRule.metric_costs)
  return metric_costs_.MutableMap();
}

inline const MetricRule* MetricRule::internal_default_instance() {
  return &MetricRule_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuotaLimit::kNameFieldNumber;
const int QuotaLimit::kDescriptionFieldNumber;
const int QuotaLimit::kDefaultLimitFieldNumber;
const int QuotaLimit::kMaxLimitFieldNumber;
const int QuotaLimit::kFreeTierFieldNumber;
const int QuotaLimit::kDurationFieldNumber;
const int QuotaLimit::kMetricFieldNumber;
const int QuotaLimit::kUnitFieldNumber;
const int QuotaLimit::kValuesFieldNumber;
const int QuotaLimit::kDisplayNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuotaLimit::QuotaLimit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fapi_2fquota_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.QuotaLimit)
}

void QuotaLimit::InitAsDefaultInstance() {
}

QuotaLimit::QuotaLimit(const QuotaLimit& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.api.QuotaLimit)
}

void QuotaLimit::SharedCtor() {
  values_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  values_.SetEntryDescriptor(
      &::google::api::QuotaLimit_ValuesEntry_descriptor_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  duration_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metric_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&default_limit_, 0, reinterpret_cast<char*>(&free_tier_) -
    reinterpret_cast<char*>(&default_limit_) + sizeof(free_tier_));
  _cached_size_ = 0;
}

QuotaLimit::~QuotaLimit() {
  // @@protoc_insertion_point(destructor:google.api.QuotaLimit)
  SharedDtor();
}

void QuotaLimit::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  duration_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metric_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unit_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QuotaLimit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuotaLimit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuotaLimit_descriptor_;
}

const QuotaLimit& QuotaLimit::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fquota_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<QuotaLimit> QuotaLimit_default_instance_;

QuotaLimit* QuotaLimit::New(::google::protobuf::Arena* arena) const {
  QuotaLimit* n = new QuotaLimit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuotaLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.QuotaLimit)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(QuotaLimit, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<QuotaLimit*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(default_limit_, free_tier_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  duration_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metric_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  values_.Clear();
}

bool QuotaLimit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.QuotaLimit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string description = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.QuotaLimit.description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_default_limit;
        break;
      }

      // optional int64 default_limit = 3;
      case 3: {
        if (tag == 24) {
         parse_default_limit:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &default_limit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_max_limit;
        break;
      }

      // optional int64 max_limit = 4;
      case 4: {
        if (tag == 32) {
         parse_max_limit:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_limit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_duration;
        break;
      }

      // optional string duration = 5;
      case 5: {
        if (tag == 42) {
         parse_duration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_duration()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->duration().data(), this->duration().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.QuotaLimit.duration"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }

      // optional string name = 6;
      case 6: {
        if (tag == 50) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.QuotaLimit.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_free_tier;
        break;
      }

      // optional int64 free_tier = 7;
      case 7: {
        if (tag == 56) {
         parse_free_tier:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &free_tier_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_metric;
        break;
      }

      // optional string metric = 8;
      case 8: {
        if (tag == 66) {
         parse_metric:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metric()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->metric().data(), this->metric().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.QuotaLimit.metric"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_unit;
        break;
      }

      // optional string unit = 9;
      case 9: {
        if (tag == 74) {
         parse_unit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unit()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->unit().data(), this->unit().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.QuotaLimit.unit"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_values;
        break;
      }

      // map<string, int64> values = 10;
      case 10: {
        if (tag == 82) {
         parse_values:
          DO_(input->IncrementRecursionDepth());
         parse_loop_values:
          QuotaLimit_ValuesEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::google::protobuf::int64,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 > > parser(&values_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.QuotaLimit.ValuesEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_values;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(98)) goto parse_display_name;
        break;
      }

      // optional string display_name = 12;
      case 12: {
        if (tag == 98) {
         parse_display_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->display_name().data(), this->display_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.QuotaLimit.display_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.QuotaLimit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.QuotaLimit)
  return false;
#undef DO_
}

void QuotaLimit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.QuotaLimit)
  // optional string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.QuotaLimit.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // optional int64 default_limit = 3;
  if (this->default_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->default_limit(), output);
  }

  // optional int64 max_limit = 4;
  if (this->max_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->max_limit(), output);
  }

  // optional string duration = 5;
  if (this->duration().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->duration().data(), this->duration().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.QuotaLimit.duration");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->duration(), output);
  }

  // optional string name = 6;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.QuotaLimit.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->name(), output);
  }

  // optional int64 free_tier = 7;
  if (this->free_tier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->free_tier(), output);
  }

  // optional string metric = 8;
  if (this->metric().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metric().data(), this->metric().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.QuotaLimit.metric");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->metric(), output);
  }

  // optional string unit = 9;
  if (this->unit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unit().data(), this->unit().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.QuotaLimit.unit");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->unit(), output);
  }

  // map<string, int64> values = 10;
  if (!this->values().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.api.QuotaLimit.ValuesEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->values().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->values().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<QuotaLimit_ValuesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(values_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<QuotaLimit_ValuesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it) {
        entry.reset(values_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional string display_name = 12;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.QuotaLimit.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->display_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.QuotaLimit)
}

::google::protobuf::uint8* QuotaLimit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.QuotaLimit)
  // optional string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.QuotaLimit.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // optional int64 default_limit = 3;
  if (this->default_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->default_limit(), target);
  }

  // optional int64 max_limit = 4;
  if (this->max_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->max_limit(), target);
  }

  // optional string duration = 5;
  if (this->duration().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->duration().data(), this->duration().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.QuotaLimit.duration");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->duration(), target);
  }

  // optional string name = 6;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.QuotaLimit.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  // optional int64 free_tier = 7;
  if (this->free_tier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->free_tier(), target);
  }

  // optional string metric = 8;
  if (this->metric().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metric().data(), this->metric().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.QuotaLimit.metric");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->metric(), target);
  }

  // optional string unit = 9;
  if (this->unit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unit().data(), this->unit().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.QuotaLimit.unit");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->unit(), target);
  }

  // map<string, int64> values = 10;
  if (!this->values().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.api.QuotaLimit.ValuesEntry.key");
      }
    };

    if (deterministic &&
        this->values().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->values().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<QuotaLimit_ValuesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(values_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<QuotaLimit_ValuesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it) {
        entry.reset(values_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional string display_name = 12;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.QuotaLimit.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->display_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.QuotaLimit)
  return target;
}

size_t QuotaLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.QuotaLimit)
  size_t total_size = 0;

  // optional string name = 6;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // optional int64 default_limit = 3;
  if (this->default_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->default_limit());
  }

  // optional int64 max_limit = 4;
  if (this->max_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->max_limit());
  }

  // optional int64 free_tier = 7;
  if (this->free_tier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->free_tier());
  }

  // optional string duration = 5;
  if (this->duration().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->duration());
  }

  // optional string metric = 8;
  if (this->metric().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->metric());
  }

  // optional string unit = 9;
  if (this->unit().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->unit());
  }

  // optional string display_name = 12;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->display_name());
  }

  // map<string, int64> values = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->values_size());
  {
    ::google::protobuf::scoped_ptr<QuotaLimit_ValuesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
        it = this->values().begin();
        it != this->values().end(); ++it) {
      entry.reset(values_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuotaLimit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.QuotaLimit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QuotaLimit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuotaLimit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.QuotaLimit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.QuotaLimit)
    UnsafeMergeFrom(*source);
  }
}

void QuotaLimit::MergeFrom(const QuotaLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.QuotaLimit)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void QuotaLimit::UnsafeMergeFrom(const QuotaLimit& from) {
  GOOGLE_DCHECK(&from != this);
  values_.MergeFrom(from.values_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.default_limit() != 0) {
    set_default_limit(from.default_limit());
  }
  if (from.max_limit() != 0) {
    set_max_limit(from.max_limit());
  }
  if (from.free_tier() != 0) {
    set_free_tier(from.free_tier());
  }
  if (from.duration().size() > 0) {

    duration_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.duration_);
  }
  if (from.metric().size() > 0) {

    metric_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metric_);
  }
  if (from.unit().size() > 0) {

    unit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unit_);
  }
  if (from.display_name().size() > 0) {

    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
}

void QuotaLimit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.QuotaLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuotaLimit::CopyFrom(const QuotaLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.QuotaLimit)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool QuotaLimit::IsInitialized() const {

  return true;
}

void QuotaLimit::Swap(QuotaLimit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuotaLimit::InternalSwap(QuotaLimit* other) {
  name_.Swap(&other->name_);
  description_.Swap(&other->description_);
  std::swap(default_limit_, other->default_limit_);
  std::swap(max_limit_, other->max_limit_);
  std::swap(free_tier_, other->free_tier_);
  duration_.Swap(&other->duration_);
  metric_.Swap(&other->metric_);
  unit_.Swap(&other->unit_);
  values_.Swap(&other->values_);
  display_name_.Swap(&other->display_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuotaLimit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuotaLimit_descriptor_;
  metadata.reflection = QuotaLimit_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuotaLimit

// optional string name = 6;
void QuotaLimit::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QuotaLimit::name() const {
  // @@protoc_insertion_point(field_get:google.api.QuotaLimit.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuotaLimit::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.QuotaLimit.name)
}
void QuotaLimit::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.QuotaLimit.name)
}
void QuotaLimit::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.QuotaLimit.name)
}
::std::string* QuotaLimit::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.api.QuotaLimit.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QuotaLimit::release_name() {
  // @@protoc_insertion_point(field_release:google.api.QuotaLimit.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuotaLimit::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.api.QuotaLimit.name)
}

// optional string description = 2;
void QuotaLimit::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QuotaLimit::description() const {
  // @@protoc_insertion_point(field_get:google.api.QuotaLimit.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuotaLimit::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.QuotaLimit.description)
}
void QuotaLimit::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.QuotaLimit.description)
}
void QuotaLimit::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.QuotaLimit.description)
}
::std::string* QuotaLimit::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.api.QuotaLimit.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QuotaLimit::release_description() {
  // @@protoc_insertion_point(field_release:google.api.QuotaLimit.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuotaLimit::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:google.api.QuotaLimit.description)
}

// optional int64 default_limit = 3;
void QuotaLimit::clear_default_limit() {
  default_limit_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 QuotaLimit::default_limit() const {
  // @@protoc_insertion_point(field_get:google.api.QuotaLimit.default_limit)
  return default_limit_;
}
void QuotaLimit::set_default_limit(::google::protobuf::int64 value) {
  
  default_limit_ = value;
  // @@protoc_insertion_point(field_set:google.api.QuotaLimit.default_limit)
}

// optional int64 max_limit = 4;
void QuotaLimit::clear_max_limit() {
  max_limit_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 QuotaLimit::max_limit() const {
  // @@protoc_insertion_point(field_get:google.api.QuotaLimit.max_limit)
  return max_limit_;
}
void QuotaLimit::set_max_limit(::google::protobuf::int64 value) {
  
  max_limit_ = value;
  // @@protoc_insertion_point(field_set:google.api.QuotaLimit.max_limit)
}

// optional int64 free_tier = 7;
void QuotaLimit::clear_free_tier() {
  free_tier_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 QuotaLimit::free_tier() const {
  // @@protoc_insertion_point(field_get:google.api.QuotaLimit.free_tier)
  return free_tier_;
}
void QuotaLimit::set_free_tier(::google::protobuf::int64 value) {
  
  free_tier_ = value;
  // @@protoc_insertion_point(field_set:google.api.QuotaLimit.free_tier)
}

// optional string duration = 5;
void QuotaLimit::clear_duration() {
  duration_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QuotaLimit::duration() const {
  // @@protoc_insertion_point(field_get:google.api.QuotaLimit.duration)
  return duration_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuotaLimit::set_duration(const ::std::string& value) {
  
  duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.QuotaLimit.duration)
}
void QuotaLimit::set_duration(const char* value) {
  
  duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.QuotaLimit.duration)
}
void QuotaLimit::set_duration(const char* value, size_t size) {
  
  duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.QuotaLimit.duration)
}
::std::string* QuotaLimit::mutable_duration() {
  
  // @@protoc_insertion_point(field_mutable:google.api.QuotaLimit.duration)
  return duration_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QuotaLimit::release_duration() {
  // @@protoc_insertion_point(field_release:google.api.QuotaLimit.duration)
  
  return duration_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuotaLimit::set_allocated_duration(::std::string* duration) {
  if (duration != NULL) {
    
  } else {
    
  }
  duration_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), duration);
  // @@protoc_insertion_point(field_set_allocated:google.api.QuotaLimit.duration)
}

// optional string metric = 8;
void QuotaLimit::clear_metric() {
  metric_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QuotaLimit::metric() const {
  // @@protoc_insertion_point(field_get:google.api.QuotaLimit.metric)
  return metric_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuotaLimit::set_metric(const ::std::string& value) {
  
  metric_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.QuotaLimit.metric)
}
void QuotaLimit::set_metric(const char* value) {
  
  metric_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.QuotaLimit.metric)
}
void QuotaLimit::set_metric(const char* value, size_t size) {
  
  metric_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.QuotaLimit.metric)
}
::std::string* QuotaLimit::mutable_metric() {
  
  // @@protoc_insertion_point(field_mutable:google.api.QuotaLimit.metric)
  return metric_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QuotaLimit::release_metric() {
  // @@protoc_insertion_point(field_release:google.api.QuotaLimit.metric)
  
  return metric_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuotaLimit::set_allocated_metric(::std::string* metric) {
  if (metric != NULL) {
    
  } else {
    
  }
  metric_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metric);
  // @@protoc_insertion_point(field_set_allocated:google.api.QuotaLimit.metric)
}

// optional string unit = 9;
void QuotaLimit::clear_unit() {
  unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QuotaLimit::unit() const {
  // @@protoc_insertion_point(field_get:google.api.QuotaLimit.unit)
  return unit_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuotaLimit::set_unit(const ::std::string& value) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.QuotaLimit.unit)
}
void QuotaLimit::set_unit(const char* value) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.QuotaLimit.unit)
}
void QuotaLimit::set_unit(const char* value, size_t size) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.QuotaLimit.unit)
}
::std::string* QuotaLimit::mutable_unit() {
  
  // @@protoc_insertion_point(field_mutable:google.api.QuotaLimit.unit)
  return unit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QuotaLimit::release_unit() {
  // @@protoc_insertion_point(field_release:google.api.QuotaLimit.unit)
  
  return unit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuotaLimit::set_allocated_unit(::std::string* unit) {
  if (unit != NULL) {
    
  } else {
    
  }
  unit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unit);
  // @@protoc_insertion_point(field_set_allocated:google.api.QuotaLimit.unit)
}

// map<string, int64> values = 10;
int QuotaLimit::values_size() const {
  return values_.size();
}
void QuotaLimit::clear_values() {
  values_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >&
QuotaLimit::values() const {
  // @@protoc_insertion_point(field_map:google.api.QuotaLimit.values)
  return values_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >*
QuotaLimit::mutable_values() {
  // @@protoc_insertion_point(field_mutable_map:google.api.QuotaLimit.values)
  return values_.MutableMap();
}

// optional string display_name = 12;
void QuotaLimit::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QuotaLimit::display_name() const {
  // @@protoc_insertion_point(field_get:google.api.QuotaLimit.display_name)
  return display_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuotaLimit::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.QuotaLimit.display_name)
}
void QuotaLimit::set_display_name(const char* value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.QuotaLimit.display_name)
}
void QuotaLimit::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.QuotaLimit.display_name)
}
::std::string* QuotaLimit::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.api.QuotaLimit.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QuotaLimit::release_display_name() {
  // @@protoc_insertion_point(field_release:google.api.QuotaLimit.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuotaLimit::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.api.QuotaLimit.display_name)
}

inline const QuotaLimit* QuotaLimit::internal_default_instance() {
  return &QuotaLimit_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace google

// @@protoc_insertion_point(global_scope)
