// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/backend.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/api/backend.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace api {

namespace {

const ::google::protobuf::Descriptor* Backend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Backend_reflection_ = NULL;
const ::google::protobuf::Descriptor* BackendRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BackendRule_reflection_ = NULL;
struct BackendRuleOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr jwt_audience_;
  bool disable_auth_;
}* BackendRule_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* BackendRule_OverridesByRequestProtocolEntry_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BackendRule_PathTranslation_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_google_2fapi_2fbackend_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_google_2fapi_2fbackend_2eproto() {
  protobuf_AddDesc_google_2fapi_2fbackend_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "google/api/backend.proto");
  GOOGLE_CHECK(file != NULL);
  Backend_descriptor_ = file->message_type(0);
  static const int Backend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Backend, rules_),
  };
  Backend_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Backend_descriptor_,
      Backend::internal_default_instance(),
      Backend_offsets_,
      -1,
      -1,
      -1,
      sizeof(Backend),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Backend, _internal_metadata_));
  BackendRule_descriptor_ = file->message_type(1);
  static const int BackendRule_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackendRule, selector_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackendRule, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackendRule, deadline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackendRule, min_deadline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackendRule, operation_deadline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackendRule, path_translation_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(BackendRule_default_oneof_instance_, jwt_audience_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(BackendRule_default_oneof_instance_, disable_auth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackendRule, protocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackendRule, overrides_by_request_protocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackendRule, authentication_),
  };
  BackendRule_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BackendRule_descriptor_,
      BackendRule::internal_default_instance(),
      BackendRule_offsets_,
      -1,
      -1,
      -1,
      BackendRule_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackendRule, _oneof_case_[0]),
      sizeof(BackendRule),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackendRule, _internal_metadata_));
  BackendRule_OverridesByRequestProtocolEntry_descriptor_ = BackendRule_descriptor_->nested_type(0);
  BackendRule_PathTranslation_descriptor_ = BackendRule_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_google_2fapi_2fbackend_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Backend_descriptor_, Backend::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BackendRule_descriptor_, BackendRule::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        BackendRule_OverridesByRequestProtocolEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::google::api::BackendRule,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                BackendRule_OverridesByRequestProtocolEntry_descriptor_));
}

}  // namespace

void protobuf_ShutdownFile_google_2fapi_2fbackend_2eproto() {
  Backend_default_instance_.Shutdown();
  delete Backend_reflection_;
  BackendRule_default_instance_.Shutdown();
  delete BackendRule_default_oneof_instance_;
  delete BackendRule_reflection_;
}

void protobuf_InitDefaults_google_2fapi_2fbackend_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  Backend_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  BackendRule_default_instance_.DefaultConstruct();
  BackendRule_default_oneof_instance_ = new BackendRuleOneofInstance();
  ::google::protobuf::internal::GetEmptyString();
  Backend_default_instance_.get_mutable()->InitAsDefaultInstance();
  BackendRule_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_google_2fapi_2fbackend_2eproto_once_);
void protobuf_InitDefaults_google_2fapi_2fbackend_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_google_2fapi_2fbackend_2eproto_once_,
                 &protobuf_InitDefaults_google_2fapi_2fbackend_2eproto_impl);
}
void protobuf_AddDesc_google_2fapi_2fbackend_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_google_2fapi_2fbackend_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030google/api/backend.proto\022\ngoogle.api\"1"
    "\n\007Backend\022&\n\005rules\030\001 \003(\0132\027.google.api.Ba"
    "ckendRule\"\262\004\n\013BackendRule\022\020\n\010selector\030\001 "
    "\001(\t\022\017\n\007address\030\002 \001(\t\022\020\n\010deadline\030\003 \001(\001\022\030"
    "\n\014min_deadline\030\004 \001(\001B\002\030\001\022\032\n\022operation_de"
    "adline\030\005 \001(\001\022A\n\020path_translation\030\006 \001(\0162\'"
    ".google.api.BackendRule.PathTranslation\022"
    "\026\n\014jwt_audience\030\007 \001(\tH\000\022\026\n\014disable_auth\030"
    "\010 \001(\010H\000\022\020\n\010protocol\030\t \001(\t\022^\n\035overrides_b"
    "y_request_protocol\030\n \003(\01327.google.api.Ba"
    "ckendRule.OverridesByRequestProtocolEntr"
    "y\032Z\n\037OverridesByRequestProtocolEntry\022\013\n\003"
    "key\030\001 \001(\t\022&\n\005value\030\002 \001(\0132\027.google.api.Ba"
    "ckendRule:\0028\001\"e\n\017PathTranslation\022 \n\034PATH"
    "_TRANSLATION_UNSPECIFIED\020\000\022\024\n\020CONSTANT_A"
    "DDRESS\020\001\022\032\n\026APPEND_PATH_TO_ADDRESS\020\002B\020\n\016"
    "authenticationBn\n\016com.google.apiB\014Backen"
    "dProtoP\001ZEgoogle.golang.org/genproto/goo"
    "gleapis/api/serviceconfig;serviceconfig\242"
    "\002\004GAPIb\006proto3", 774);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/api/backend.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_google_2fapi_2fbackend_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_google_2fapi_2fbackend_2eproto_once_);
void protobuf_AddDesc_google_2fapi_2fbackend_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_google_2fapi_2fbackend_2eproto_once_,
                 &protobuf_AddDesc_google_2fapi_2fbackend_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_google_2fapi_2fbackend_2eproto {
  StaticDescriptorInitializer_google_2fapi_2fbackend_2eproto() {
    protobuf_AddDesc_google_2fapi_2fbackend_2eproto();
  }
} static_descriptor_initializer_google_2fapi_2fbackend_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Backend::kRulesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Backend::Backend()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fapi_2fbackend_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.Backend)
}

void Backend::InitAsDefaultInstance() {
}

Backend::Backend(const Backend& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.api.Backend)
}

void Backend::SharedCtor() {
  _cached_size_ = 0;
}

Backend::~Backend() {
  // @@protoc_insertion_point(destructor:google.api.Backend)
  SharedDtor();
}

void Backend::SharedDtor() {
}

void Backend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Backend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Backend_descriptor_;
}

const Backend& Backend::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fbackend_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Backend> Backend_default_instance_;

Backend* Backend::New(::google::protobuf::Arena* arena) const {
  Backend* n = new Backend;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Backend::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.Backend)
  rules_.Clear();
}

bool Backend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.Backend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.api.BackendRule rules = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_rules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_rules()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_rules;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.Backend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.Backend)
  return false;
#undef DO_
}

void Backend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.Backend)
  // repeated .google.api.BackendRule rules = 1;
  for (unsigned int i = 0, n = this->rules_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rules(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.Backend)
}

::google::protobuf::uint8* Backend::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.Backend)
  // repeated .google.api.BackendRule rules = 1;
  for (unsigned int i = 0, n = this->rules_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->rules(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.Backend)
  return target;
}

size_t Backend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.Backend)
  size_t total_size = 0;

  // repeated .google.api.BackendRule rules = 1;
  {
    unsigned int count = this->rules_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rules(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Backend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.Backend)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Backend* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Backend>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.Backend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.Backend)
    UnsafeMergeFrom(*source);
  }
}

void Backend::MergeFrom(const Backend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.Backend)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Backend::UnsafeMergeFrom(const Backend& from) {
  GOOGLE_DCHECK(&from != this);
  rules_.MergeFrom(from.rules_);
}

void Backend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.Backend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Backend::CopyFrom(const Backend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.Backend)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Backend::IsInitialized() const {

  return true;
}

void Backend::Swap(Backend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Backend::InternalSwap(Backend* other) {
  rules_.UnsafeArenaSwap(&other->rules_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Backend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Backend_descriptor_;
  metadata.reflection = Backend_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Backend

// repeated .google.api.BackendRule rules = 1;
int Backend::rules_size() const {
  return rules_.size();
}
void Backend::clear_rules() {
  rules_.Clear();
}
const ::google::api::BackendRule& Backend::rules(int index) const {
  // @@protoc_insertion_point(field_get:google.api.Backend.rules)
  return rules_.Get(index);
}
::google::api::BackendRule* Backend::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.Backend.rules)
  return rules_.Mutable(index);
}
::google::api::BackendRule* Backend::add_rules() {
  // @@protoc_insertion_point(field_add:google.api.Backend.rules)
  return rules_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::api::BackendRule >*
Backend::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:google.api.Backend.rules)
  return &rules_;
}
const ::google::protobuf::RepeatedPtrField< ::google::api::BackendRule >&
Backend::rules() const {
  // @@protoc_insertion_point(field_list:google.api.Backend.rules)
  return rules_;
}

inline const Backend* Backend::internal_default_instance() {
  return &Backend_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* BackendRule_PathTranslation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BackendRule_PathTranslation_descriptor_;
}
bool BackendRule_PathTranslation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BackendRule_PathTranslation BackendRule::PATH_TRANSLATION_UNSPECIFIED;
const BackendRule_PathTranslation BackendRule::CONSTANT_ADDRESS;
const BackendRule_PathTranslation BackendRule::APPEND_PATH_TO_ADDRESS;
const BackendRule_PathTranslation BackendRule::PathTranslation_MIN;
const BackendRule_PathTranslation BackendRule::PathTranslation_MAX;
const int BackendRule::PathTranslation_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BackendRule::kSelectorFieldNumber;
const int BackendRule::kAddressFieldNumber;
const int BackendRule::kDeadlineFieldNumber;
const int BackendRule::kMinDeadlineFieldNumber;
const int BackendRule::kOperationDeadlineFieldNumber;
const int BackendRule::kPathTranslationFieldNumber;
const int BackendRule::kJwtAudienceFieldNumber;
const int BackendRule::kDisableAuthFieldNumber;
const int BackendRule::kProtocolFieldNumber;
const int BackendRule::kOverridesByRequestProtocolFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BackendRule::BackendRule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fapi_2fbackend_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.BackendRule)
}

void BackendRule::InitAsDefaultInstance() {
  BackendRule_default_oneof_instance_->jwt_audience_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  BackendRule_default_oneof_instance_->disable_auth_ = false;
}

BackendRule::BackendRule(const BackendRule& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.api.BackendRule)
}

void BackendRule::SharedCtor() {
  overrides_by_request_protocol_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  overrides_by_request_protocol_.SetEntryDescriptor(
      &::google::api::BackendRule_OverridesByRequestProtocolEntry_descriptor_);
  selector_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&deadline_, 0, reinterpret_cast<char*>(&path_translation_) -
    reinterpret_cast<char*>(&deadline_) + sizeof(path_translation_));
  clear_has_authentication();
  _cached_size_ = 0;
}

BackendRule::~BackendRule() {
  // @@protoc_insertion_point(destructor:google.api.BackendRule)
  SharedDtor();
}

void BackendRule::SharedDtor() {
  selector_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_authentication()) {
    clear_authentication();
  }
}

void BackendRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackendRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BackendRule_descriptor_;
}

const BackendRule& BackendRule::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fbackend_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BackendRule> BackendRule_default_instance_;

BackendRule* BackendRule::New(::google::protobuf::Arena* arena) const {
  BackendRule* n = new BackendRule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BackendRule::clear_authentication() {
// @@protoc_insertion_point(one_of_clear_start:google.api.BackendRule)
  switch (authentication_case()) {
    case kJwtAudience: {
      authentication_.jwt_audience_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kDisableAuth: {
      // No need to clear
      break;
    }
    case AUTHENTICATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = AUTHENTICATION_NOT_SET;
}


void BackendRule::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.BackendRule)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BackendRule, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BackendRule*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(deadline_, path_translation_);
  selector_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  overrides_by_request_protocol_.Clear();
  clear_authentication();
}

bool BackendRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.BackendRule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string selector = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_selector()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->selector().data(), this->selector().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.BackendRule.selector"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_address;
        break;
      }

      // optional string address = 2;
      case 2: {
        if (tag == 18) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.BackendRule.address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_deadline;
        break;
      }

      // optional double deadline = 3;
      case 3: {
        if (tag == 25) {
         parse_deadline:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &deadline_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_min_deadline;
        break;
      }

      // optional double min_deadline = 4 [deprecated = true];
      case 4: {
        if (tag == 33) {
         parse_min_deadline:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_deadline_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_operation_deadline;
        break;
      }

      // optional double operation_deadline = 5;
      case 5: {
        if (tag == 41) {
         parse_operation_deadline:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &operation_deadline_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_path_translation;
        break;
      }

      // optional .google.api.BackendRule.PathTranslation path_translation = 6;
      case 6: {
        if (tag == 48) {
         parse_path_translation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_path_translation(static_cast< ::google::api::BackendRule_PathTranslation >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_jwt_audience;
        break;
      }

      // optional string jwt_audience = 7;
      case 7: {
        if (tag == 58) {
         parse_jwt_audience:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jwt_audience()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->jwt_audience().data(), this->jwt_audience().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.BackendRule.jwt_audience"));
        } else {
          goto handle_unusual;
        }
        goto after_disable_auth;
        break;
      }

      // optional bool disable_auth = 8;
      case 8: {
        if (tag == 64) {
          clear_authentication();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &authentication_.disable_auth_)));
          set_has_disable_auth();
        } else {
          goto handle_unusual;
        }
       after_disable_auth:
        if (input->ExpectTag(74)) goto parse_protocol;
        break;
      }

      // optional string protocol = 9;
      case 9: {
        if (tag == 74) {
         parse_protocol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->protocol().data(), this->protocol().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.BackendRule.protocol"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_overrides_by_request_protocol;
        break;
      }

      // map<string, .google.api.BackendRule> overrides_by_request_protocol = 10;
      case 10: {
        if (tag == 82) {
         parse_overrides_by_request_protocol:
          DO_(input->IncrementRecursionDepth());
         parse_loop_overrides_by_request_protocol:
          BackendRule_OverridesByRequestProtocolEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::google::api::BackendRule,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::api::BackendRule > > parser(&overrides_by_request_protocol_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.BackendRule.OverridesByRequestProtocolEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_overrides_by_request_protocol;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.BackendRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.BackendRule)
  return false;
#undef DO_
}

void BackendRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.BackendRule)
  // optional string selector = 1;
  if (this->selector().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->selector().data(), this->selector().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.BackendRule.selector");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->selector(), output);
  }

  // optional string address = 2;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.BackendRule.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->address(), output);
  }

  // optional double deadline = 3;
  if (this->deadline() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->deadline(), output);
  }

  // optional double min_deadline = 4 [deprecated = true];
  if (this->min_deadline() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->min_deadline(), output);
  }

  // optional double operation_deadline = 5;
  if (this->operation_deadline() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->operation_deadline(), output);
  }

  // optional .google.api.BackendRule.PathTranslation path_translation = 6;
  if (this->path_translation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->path_translation(), output);
  }

  // optional string jwt_audience = 7;
  if (has_jwt_audience()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->jwt_audience().data(), this->jwt_audience().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.BackendRule.jwt_audience");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->jwt_audience(), output);
  }

  // optional bool disable_auth = 8;
  if (has_disable_auth()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->disable_auth(), output);
  }

  // optional string protocol = 9;
  if (this->protocol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocol().data(), this->protocol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.BackendRule.protocol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->protocol(), output);
  }

  // map<string, .google.api.BackendRule> overrides_by_request_protocol = 10;
  if (!this->overrides_by_request_protocol().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::api::BackendRule >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.api.BackendRule.OverridesByRequestProtocolEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->overrides_by_request_protocol().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->overrides_by_request_protocol().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::api::BackendRule >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::api::BackendRule >::const_iterator
          it = this->overrides_by_request_protocol().begin();
          it != this->overrides_by_request_protocol().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<BackendRule_OverridesByRequestProtocolEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(overrides_by_request_protocol_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<BackendRule_OverridesByRequestProtocolEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::api::BackendRule >::const_iterator
          it = this->overrides_by_request_protocol().begin();
          it != this->overrides_by_request_protocol().end(); ++it) {
        entry.reset(overrides_by_request_protocol_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:google.api.BackendRule)
}

::google::protobuf::uint8* BackendRule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.BackendRule)
  // optional string selector = 1;
  if (this->selector().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->selector().data(), this->selector().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.BackendRule.selector");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->selector(), target);
  }

  // optional string address = 2;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.BackendRule.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->address(), target);
  }

  // optional double deadline = 3;
  if (this->deadline() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->deadline(), target);
  }

  // optional double min_deadline = 4 [deprecated = true];
  if (this->min_deadline() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->min_deadline(), target);
  }

  // optional double operation_deadline = 5;
  if (this->operation_deadline() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->operation_deadline(), target);
  }

  // optional .google.api.BackendRule.PathTranslation path_translation = 6;
  if (this->path_translation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->path_translation(), target);
  }

  // optional string jwt_audience = 7;
  if (has_jwt_audience()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->jwt_audience().data(), this->jwt_audience().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.BackendRule.jwt_audience");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->jwt_audience(), target);
  }

  // optional bool disable_auth = 8;
  if (has_disable_auth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->disable_auth(), target);
  }

  // optional string protocol = 9;
  if (this->protocol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocol().data(), this->protocol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.BackendRule.protocol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->protocol(), target);
  }

  // map<string, .google.api.BackendRule> overrides_by_request_protocol = 10;
  if (!this->overrides_by_request_protocol().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::api::BackendRule >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.api.BackendRule.OverridesByRequestProtocolEntry.key");
      }
    };

    if (deterministic &&
        this->overrides_by_request_protocol().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->overrides_by_request_protocol().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::api::BackendRule >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::api::BackendRule >::const_iterator
          it = this->overrides_by_request_protocol().begin();
          it != this->overrides_by_request_protocol().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<BackendRule_OverridesByRequestProtocolEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(overrides_by_request_protocol_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<BackendRule_OverridesByRequestProtocolEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::api::BackendRule >::const_iterator
          it = this->overrides_by_request_protocol().begin();
          it != this->overrides_by_request_protocol().end(); ++it) {
        entry.reset(overrides_by_request_protocol_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.BackendRule)
  return target;
}

size_t BackendRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.BackendRule)
  size_t total_size = 0;

  // optional string selector = 1;
  if (this->selector().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->selector());
  }

  // optional string address = 2;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // optional double deadline = 3;
  if (this->deadline() != 0) {
    total_size += 1 + 8;
  }

  // optional double min_deadline = 4 [deprecated = true];
  if (this->min_deadline() != 0) {
    total_size += 1 + 8;
  }

  // optional double operation_deadline = 5;
  if (this->operation_deadline() != 0) {
    total_size += 1 + 8;
  }

  // optional .google.api.BackendRule.PathTranslation path_translation = 6;
  if (this->path_translation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->path_translation());
  }

  // optional string protocol = 9;
  if (this->protocol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->protocol());
  }

  // map<string, .google.api.BackendRule> overrides_by_request_protocol = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->overrides_by_request_protocol_size());
  {
    ::google::protobuf::scoped_ptr<BackendRule_OverridesByRequestProtocolEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::api::BackendRule >::const_iterator
        it = this->overrides_by_request_protocol().begin();
        it != this->overrides_by_request_protocol().end(); ++it) {
      entry.reset(overrides_by_request_protocol_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  switch (authentication_case()) {
    // optional string jwt_audience = 7;
    case kJwtAudience: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jwt_audience());
      break;
    }
    // optional bool disable_auth = 8;
    case kDisableAuth: {
      total_size += 1 + 1;
      break;
    }
    case AUTHENTICATION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackendRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.BackendRule)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BackendRule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BackendRule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.BackendRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.BackendRule)
    UnsafeMergeFrom(*source);
  }
}

void BackendRule::MergeFrom(const BackendRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.BackendRule)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BackendRule::UnsafeMergeFrom(const BackendRule& from) {
  GOOGLE_DCHECK(&from != this);
  overrides_by_request_protocol_.MergeFrom(from.overrides_by_request_protocol_);
  switch (from.authentication_case()) {
    case kJwtAudience: {
      set_jwt_audience(from.jwt_audience());
      break;
    }
    case kDisableAuth: {
      set_disable_auth(from.disable_auth());
      break;
    }
    case AUTHENTICATION_NOT_SET: {
      break;
    }
  }
  if (from.selector().size() > 0) {

    selector_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.selector_);
  }
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.deadline() != 0) {
    set_deadline(from.deadline());
  }
  if (from.min_deadline() != 0) {
    set_min_deadline(from.min_deadline());
  }
  if (from.operation_deadline() != 0) {
    set_operation_deadline(from.operation_deadline());
  }
  if (from.path_translation() != 0) {
    set_path_translation(from.path_translation());
  }
  if (from.protocol().size() > 0) {

    protocol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_);
  }
}

void BackendRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.BackendRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackendRule::CopyFrom(const BackendRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.BackendRule)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BackendRule::IsInitialized() const {

  return true;
}

void BackendRule::Swap(BackendRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BackendRule::InternalSwap(BackendRule* other) {
  selector_.Swap(&other->selector_);
  address_.Swap(&other->address_);
  std::swap(deadline_, other->deadline_);
  std::swap(min_deadline_, other->min_deadline_);
  std::swap(operation_deadline_, other->operation_deadline_);
  std::swap(path_translation_, other->path_translation_);
  protocol_.Swap(&other->protocol_);
  overrides_by_request_protocol_.Swap(&other->overrides_by_request_protocol_);
  std::swap(authentication_, other->authentication_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BackendRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BackendRule_descriptor_;
  metadata.reflection = BackendRule_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BackendRule

// optional string selector = 1;
void BackendRule::clear_selector() {
  selector_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BackendRule::selector() const {
  // @@protoc_insertion_point(field_get:google.api.BackendRule.selector)
  return selector_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BackendRule::set_selector(const ::std::string& value) {
  
  selector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.BackendRule.selector)
}
void BackendRule::set_selector(const char* value) {
  
  selector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.BackendRule.selector)
}
void BackendRule::set_selector(const char* value, size_t size) {
  
  selector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.BackendRule.selector)
}
::std::string* BackendRule::mutable_selector() {
  
  // @@protoc_insertion_point(field_mutable:google.api.BackendRule.selector)
  return selector_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BackendRule::release_selector() {
  // @@protoc_insertion_point(field_release:google.api.BackendRule.selector)
  
  return selector_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BackendRule::set_allocated_selector(::std::string* selector) {
  if (selector != NULL) {
    
  } else {
    
  }
  selector_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), selector);
  // @@protoc_insertion_point(field_set_allocated:google.api.BackendRule.selector)
}

// optional string address = 2;
void BackendRule::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BackendRule::address() const {
  // @@protoc_insertion_point(field_get:google.api.BackendRule.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BackendRule::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.BackendRule.address)
}
void BackendRule::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.BackendRule.address)
}
void BackendRule::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.BackendRule.address)
}
::std::string* BackendRule::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:google.api.BackendRule.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BackendRule::release_address() {
  // @@protoc_insertion_point(field_release:google.api.BackendRule.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BackendRule::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:google.api.BackendRule.address)
}

// optional double deadline = 3;
void BackendRule::clear_deadline() {
  deadline_ = 0;
}
double BackendRule::deadline() const {
  // @@protoc_insertion_point(field_get:google.api.BackendRule.deadline)
  return deadline_;
}
void BackendRule::set_deadline(double value) {
  
  deadline_ = value;
  // @@protoc_insertion_point(field_set:google.api.BackendRule.deadline)
}

// optional double min_deadline = 4 [deprecated = true];
void BackendRule::clear_min_deadline() {
  min_deadline_ = 0;
}
double BackendRule::min_deadline() const {
  // @@protoc_insertion_point(field_get:google.api.BackendRule.min_deadline)
  return min_deadline_;
}
void BackendRule::set_min_deadline(double value) {
  
  min_deadline_ = value;
  // @@protoc_insertion_point(field_set:google.api.BackendRule.min_deadline)
}

// optional double operation_deadline = 5;
void BackendRule::clear_operation_deadline() {
  operation_deadline_ = 0;
}
double BackendRule::operation_deadline() const {
  // @@protoc_insertion_point(field_get:google.api.BackendRule.operation_deadline)
  return operation_deadline_;
}
void BackendRule::set_operation_deadline(double value) {
  
  operation_deadline_ = value;
  // @@protoc_insertion_point(field_set:google.api.BackendRule.operation_deadline)
}

// optional .google.api.BackendRule.PathTranslation path_translation = 6;
void BackendRule::clear_path_translation() {
  path_translation_ = 0;
}
::google::api::BackendRule_PathTranslation BackendRule::path_translation() const {
  // @@protoc_insertion_point(field_get:google.api.BackendRule.path_translation)
  return static_cast< ::google::api::BackendRule_PathTranslation >(path_translation_);
}
void BackendRule::set_path_translation(::google::api::BackendRule_PathTranslation value) {
  
  path_translation_ = value;
  // @@protoc_insertion_point(field_set:google.api.BackendRule.path_translation)
}

// optional string jwt_audience = 7;
bool BackendRule::has_jwt_audience() const {
  return authentication_case() == kJwtAudience;
}
void BackendRule::set_has_jwt_audience() {
  _oneof_case_[0] = kJwtAudience;
}
void BackendRule::clear_jwt_audience() {
  if (has_jwt_audience()) {
    authentication_.jwt_audience_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_authentication();
  }
}
const ::std::string& BackendRule::jwt_audience() const {
  // @@protoc_insertion_point(field_get:google.api.BackendRule.jwt_audience)
  if (has_jwt_audience()) {
    return authentication_.jwt_audience_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void BackendRule::set_jwt_audience(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.api.BackendRule.jwt_audience)
  if (!has_jwt_audience()) {
    clear_authentication();
    set_has_jwt_audience();
    authentication_.jwt_audience_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  authentication_.jwt_audience_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.BackendRule.jwt_audience)
}
void BackendRule::set_jwt_audience(const char* value) {
  if (!has_jwt_audience()) {
    clear_authentication();
    set_has_jwt_audience();
    authentication_.jwt_audience_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  authentication_.jwt_audience_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.BackendRule.jwt_audience)
}
void BackendRule::set_jwt_audience(const char* value, size_t size) {
  if (!has_jwt_audience()) {
    clear_authentication();
    set_has_jwt_audience();
    authentication_.jwt_audience_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  authentication_.jwt_audience_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.BackendRule.jwt_audience)
}
::std::string* BackendRule::mutable_jwt_audience() {
  if (!has_jwt_audience()) {
    clear_authentication();
    set_has_jwt_audience();
    authentication_.jwt_audience_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.api.BackendRule.jwt_audience)
  return authentication_.jwt_audience_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BackendRule::release_jwt_audience() {
  // @@protoc_insertion_point(field_release:google.api.BackendRule.jwt_audience)
  if (has_jwt_audience()) {
    clear_has_authentication();
    return authentication_.jwt_audience_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void BackendRule::set_allocated_jwt_audience(::std::string* jwt_audience) {
  if (!has_jwt_audience()) {
    authentication_.jwt_audience_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_authentication();
  if (jwt_audience != NULL) {
    set_has_jwt_audience();
    authentication_.jwt_audience_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        jwt_audience);
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.BackendRule.jwt_audience)
}

// optional bool disable_auth = 8;
bool BackendRule::has_disable_auth() const {
  return authentication_case() == kDisableAuth;
}
void BackendRule::set_has_disable_auth() {
  _oneof_case_[0] = kDisableAuth;
}
void BackendRule::clear_disable_auth() {
  if (has_disable_auth()) {
    authentication_.disable_auth_ = false;
    clear_has_authentication();
  }
}
bool BackendRule::disable_auth() const {
  // @@protoc_insertion_point(field_get:google.api.BackendRule.disable_auth)
  if (has_disable_auth()) {
    return authentication_.disable_auth_;
  }
  return false;
}
void BackendRule::set_disable_auth(bool value) {
  if (!has_disable_auth()) {
    clear_authentication();
    set_has_disable_auth();
  }
  authentication_.disable_auth_ = value;
  // @@protoc_insertion_point(field_set:google.api.BackendRule.disable_auth)
}

// optional string protocol = 9;
void BackendRule::clear_protocol() {
  protocol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BackendRule::protocol() const {
  // @@protoc_insertion_point(field_get:google.api.BackendRule.protocol)
  return protocol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BackendRule::set_protocol(const ::std::string& value) {
  
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.BackendRule.protocol)
}
void BackendRule::set_protocol(const char* value) {
  
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.BackendRule.protocol)
}
void BackendRule::set_protocol(const char* value, size_t size) {
  
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.BackendRule.protocol)
}
::std::string* BackendRule::mutable_protocol() {
  
  // @@protoc_insertion_point(field_mutable:google.api.BackendRule.protocol)
  return protocol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BackendRule::release_protocol() {
  // @@protoc_insertion_point(field_release:google.api.BackendRule.protocol)
  
  return protocol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BackendRule::set_allocated_protocol(::std::string* protocol) {
  if (protocol != NULL) {
    
  } else {
    
  }
  protocol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protocol);
  // @@protoc_insertion_point(field_set_allocated:google.api.BackendRule.protocol)
}

// map<string, .google.api.BackendRule> overrides_by_request_protocol = 10;
int BackendRule::overrides_by_request_protocol_size() const {
  return overrides_by_request_protocol_.size();
}
void BackendRule::clear_overrides_by_request_protocol() {
  overrides_by_request_protocol_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::google::api::BackendRule >&
BackendRule::overrides_by_request_protocol() const {
  // @@protoc_insertion_point(field_map:google.api.BackendRule.overrides_by_request_protocol)
  return overrides_by_request_protocol_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::google::api::BackendRule >*
BackendRule::mutable_overrides_by_request_protocol() {
  // @@protoc_insertion_point(field_mutable_map:google.api.BackendRule.overrides_by_request_protocol)
  return overrides_by_request_protocol_.MutableMap();
}

bool BackendRule::has_authentication() const {
  return authentication_case() != AUTHENTICATION_NOT_SET;
}
void BackendRule::clear_has_authentication() {
  _oneof_case_[0] = AUTHENTICATION_NOT_SET;
}
BackendRule::AuthenticationCase BackendRule::authentication_case() const {
  return BackendRule::AuthenticationCase(_oneof_case_[0]);
}
inline const BackendRule* BackendRule::internal_default_instance() {
  return &BackendRule_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace google

// @@protoc_insertion_point(global_scope)
