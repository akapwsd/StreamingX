// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/httpbody.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/api/httpbody.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace api {

namespace {

const ::google::protobuf::Descriptor* HttpBody_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HttpBody_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_google_2fapi_2fhttpbody_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_google_2fapi_2fhttpbody_2eproto() {
  protobuf_AddDesc_google_2fapi_2fhttpbody_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "google/api/httpbody.proto");
  GOOGLE_CHECK(file != NULL);
  HttpBody_descriptor_ = file->message_type(0);
  static const int HttpBody_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpBody, content_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpBody, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpBody, extensions_),
  };
  HttpBody_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HttpBody_descriptor_,
      HttpBody::internal_default_instance(),
      HttpBody_offsets_,
      -1,
      -1,
      -1,
      sizeof(HttpBody),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpBody, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_google_2fapi_2fhttpbody_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HttpBody_descriptor_, HttpBody::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_google_2fapi_2fhttpbody_2eproto() {
  HttpBody_default_instance_.Shutdown();
  delete HttpBody_reflection_;
}

void protobuf_InitDefaults_google_2fapi_2fhttpbody_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2fany_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  HttpBody_default_instance_.DefaultConstruct();
  HttpBody_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_google_2fapi_2fhttpbody_2eproto_once_);
void protobuf_InitDefaults_google_2fapi_2fhttpbody_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_google_2fapi_2fhttpbody_2eproto_once_,
                 &protobuf_InitDefaults_google_2fapi_2fhttpbody_2eproto_impl);
}
void protobuf_AddDesc_google_2fapi_2fhttpbody_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_google_2fapi_2fhttpbody_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031google/api/httpbody.proto\022\ngoogle.api\032"
    "\031google/protobuf/any.proto\"X\n\010HttpBody\022\024"
    "\n\014content_type\030\001 \001(\t\022\014\n\004data\030\002 \001(\014\022(\n\nex"
    "tensions\030\003 \003(\0132\024.google.protobuf.AnyBh\n\016"
    "com.google.apiB\rHttpBodyProtoP\001Z;google."
    "golang.org/genproto/googleapis/api/httpb"
    "ody;httpbody\370\001\001\242\002\004GAPIb\006proto3", 270);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/api/httpbody.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fany_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_google_2fapi_2fhttpbody_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_google_2fapi_2fhttpbody_2eproto_once_);
void protobuf_AddDesc_google_2fapi_2fhttpbody_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_google_2fapi_2fhttpbody_2eproto_once_,
                 &protobuf_AddDesc_google_2fapi_2fhttpbody_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_google_2fapi_2fhttpbody_2eproto {
  StaticDescriptorInitializer_google_2fapi_2fhttpbody_2eproto() {
    protobuf_AddDesc_google_2fapi_2fhttpbody_2eproto();
  }
} static_descriptor_initializer_google_2fapi_2fhttpbody_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HttpBody::kContentTypeFieldNumber;
const int HttpBody::kDataFieldNumber;
const int HttpBody::kExtensionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HttpBody::HttpBody()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_google_2fapi_2fhttpbody_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.HttpBody)
}
HttpBody::HttpBody(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  extensions_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_google_2fapi_2fhttpbody_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.api.HttpBody)
}

void HttpBody::InitAsDefaultInstance() {
}

HttpBody::HttpBody(const HttpBody& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.api.HttpBody)
}

void HttpBody::SharedCtor() {
  content_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

HttpBody::~HttpBody() {
  // @@protoc_insertion_point(destructor:google.api.HttpBody)
  SharedDtor();
}

void HttpBody::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  content_type_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  data_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void HttpBody::ArenaDtor(void* object) {
  HttpBody* _this = reinterpret_cast< HttpBody* >(object);
  (void)_this;
}
void HttpBody::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void HttpBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HttpBody::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HttpBody_descriptor_;
}

const HttpBody& HttpBody::default_instance() {
  protobuf_InitDefaults_google_2fapi_2fhttpbody_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<HttpBody> HttpBody_default_instance_;

HttpBody* HttpBody::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<HttpBody>(arena);
}

void HttpBody::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.HttpBody)
  content_type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  extensions_.Clear();
}

bool HttpBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.HttpBody)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string content_type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content_type().data(), this->content_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.HttpBody.content_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_extensions;
        break;
      }

      // repeated .google.protobuf.Any extensions = 3;
      case 3: {
        if (tag == 26) {
         parse_extensions:
          DO_(input->IncrementRecursionDepth());
         parse_loop_extensions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_extensions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_extensions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.HttpBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.HttpBody)
  return false;
#undef DO_
}

void HttpBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.HttpBody)
  // optional string content_type = 1;
  if (this->content_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content_type().data(), this->content_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.HttpBody.content_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->content_type(), output);
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // repeated .google.protobuf.Any extensions = 3;
  for (unsigned int i = 0, n = this->extensions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->extensions(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.HttpBody)
}

::google::protobuf::uint8* HttpBody::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.HttpBody)
  // optional string content_type = 1;
  if (this->content_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content_type().data(), this->content_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.HttpBody.content_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content_type(), target);
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // repeated .google.protobuf.Any extensions = 3;
  for (unsigned int i = 0, n = this->extensions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->extensions(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.HttpBody)
  return target;
}

size_t HttpBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.HttpBody)
  size_t total_size = 0;

  // optional string content_type = 1;
  if (this->content_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content_type());
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // repeated .google.protobuf.Any extensions = 3;
  {
    unsigned int count = this->extensions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extensions(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HttpBody::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.HttpBody)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HttpBody* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HttpBody>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.HttpBody)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.HttpBody)
    UnsafeMergeFrom(*source);
  }
}

void HttpBody::MergeFrom(const HttpBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.HttpBody)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void HttpBody::UnsafeMergeFrom(const HttpBody& from) {
  GOOGLE_DCHECK(&from != this);
  extensions_.MergeFrom(from.extensions_);
  if (from.content_type().size() > 0) {
    set_content_type(from.content_type());
  }
  if (from.data().size() > 0) {
    set_data(from.data());
  }
}

void HttpBody::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.HttpBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpBody::CopyFrom(const HttpBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.HttpBody)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool HttpBody::IsInitialized() const {

  return true;
}

void HttpBody::Swap(HttpBody* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    HttpBody temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void HttpBody::UnsafeArenaSwap(HttpBody* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void HttpBody::InternalSwap(HttpBody* other) {
  content_type_.Swap(&other->content_type_);
  data_.Swap(&other->data_);
  extensions_.UnsafeArenaSwap(&other->extensions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HttpBody::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HttpBody_descriptor_;
  metadata.reflection = HttpBody_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HttpBody

// optional string content_type = 1;
void HttpBody::clear_content_type() {
  content_type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& HttpBody::content_type() const {
  // @@protoc_insertion_point(field_get:google.api.HttpBody.content_type)
  return content_type_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HttpBody::set_content_type(const ::std::string& value) {
  
  content_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.api.HttpBody.content_type)
}
void HttpBody::set_content_type(const char* value) {
  
  content_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.HttpBody.content_type)
}
void HttpBody::set_content_type(const char* value,
    size_t size) {
  
  content_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.HttpBody.content_type)
}
::std::string* HttpBody::mutable_content_type() {
  
  // @@protoc_insertion_point(field_mutable:google.api.HttpBody.content_type)
  return content_type_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* HttpBody::release_content_type() {
  // @@protoc_insertion_point(field_release:google.api.HttpBody.content_type)
  
  return content_type_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* HttpBody::unsafe_arena_release_content_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.HttpBody.content_type)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return content_type_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void HttpBody::set_allocated_content_type(::std::string* content_type) {
  if (content_type != NULL) {
    
  } else {
    
  }
  content_type_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content_type,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.HttpBody.content_type)
}
void HttpBody::unsafe_arena_set_allocated_content_type(
    ::std::string* content_type) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (content_type != NULL) {
    
  } else {
    
  }
  content_type_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      content_type, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.HttpBody.content_type)
}

// optional bytes data = 2;
void HttpBody::clear_data() {
  data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& HttpBody::data() const {
  // @@protoc_insertion_point(field_get:google.api.HttpBody.data)
  return data_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HttpBody::set_data(const ::std::string& value) {
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.api.HttpBody.data)
}
void HttpBody::set_data(const char* value) {
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.HttpBody.data)
}
void HttpBody::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.HttpBody.data)
}
::std::string* HttpBody::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:google.api.HttpBody.data)
  return data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* HttpBody::release_data() {
  // @@protoc_insertion_point(field_release:google.api.HttpBody.data)
  
  return data_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* HttpBody::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.HttpBody.data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void HttpBody::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.HttpBody.data)
}
void HttpBody::unsafe_arena_set_allocated_data(
    ::std::string* data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (data != NULL) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.HttpBody.data)
}

// repeated .google.protobuf.Any extensions = 3;
int HttpBody::extensions_size() const {
  return extensions_.size();
}
void HttpBody::clear_extensions() {
  extensions_.Clear();
}
const ::google::protobuf::Any& HttpBody::extensions(int index) const {
  // @@protoc_insertion_point(field_get:google.api.HttpBody.extensions)
  return extensions_.Get(index);
}
::google::protobuf::Any* HttpBody::mutable_extensions(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.HttpBody.extensions)
  return extensions_.Mutable(index);
}
::google::protobuf::Any* HttpBody::add_extensions() {
  // @@protoc_insertion_point(field_add:google.api.HttpBody.extensions)
  return extensions_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
HttpBody::mutable_extensions() {
  // @@protoc_insertion_point(field_mutable_list:google.api.HttpBody.extensions)
  return &extensions_;
}
const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
HttpBody::extensions() const {
  // @@protoc_insertion_point(field_list:google.api.HttpBody.extensions)
  return extensions_;
}

inline const HttpBody* HttpBody::internal_default_instance() {
  return &HttpBody_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace google

// @@protoc_insertion_point(global_scope)
