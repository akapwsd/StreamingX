// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: streamingBase.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "streamingBase.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace batprotobuf {

namespace {

const ::google::protobuf::Descriptor* channel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  channel_reflection_ = NULL;
const ::google::protobuf::Descriptor* channelUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  channelUser_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_streamingBase_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_streamingBase_2eproto() {
  protobuf_AddDesc_streamingBase_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "streamingBase.proto");
  GOOGLE_CHECK(file != NULL);
  channel_descriptor_ = file->message_type(0);
  static const int channel_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel, expiration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel, startts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel, endts_),
  };
  channel_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      channel_descriptor_,
      channel::internal_default_instance(),
      channel_offsets_,
      -1,
      -1,
      -1,
      sizeof(channel),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel, _internal_metadata_));
  channelUser_descriptor_ = file->message_type(1);
  static const int channelUser_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channelUser, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channelUser, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channelUser, state_),
  };
  channelUser_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      channelUser_descriptor_,
      channelUser::internal_default_instance(),
      channelUser_offsets_,
      -1,
      -1,
      -1,
      sizeof(channelUser),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channelUser, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_streamingBase_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      channel_descriptor_, channel::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      channelUser_descriptor_, channelUser::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_streamingBase_2eproto() {
  channel_default_instance_.Shutdown();
  delete channel_reflection_;
  channelUser_default_instance_.Shutdown();
  delete channelUser_reflection_;
}

void protobuf_InitDefaults_streamingBase_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  channel_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  channelUser_default_instance_.DefaultConstruct();
  channel_default_instance_.get_mutable()->InitAsDefaultInstance();
  channelUser_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_streamingBase_2eproto_once_);
void protobuf_InitDefaults_streamingBase_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_streamingBase_2eproto_once_,
                 &protobuf_InitDefaults_streamingBase_2eproto_impl);
}
void protobuf_AddDesc_streamingBase_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_streamingBase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023streamingBase.proto\022\013batprotobuf\"u\n\007ch"
    "annel\022\n\n\002id\030\001 \001(\t\022\r\n\005token\030\002 \001(\t\022\014\n\004type"
    "\030\003 \001(\r\022\022\n\nexpiration\030\004 \001(\003\022\r\n\005state\030\005 \001("
    "\r\022\017\n\007startTs\030\006 \001(\003\022\r\n\005endTs\030\007 \001(\003\"<\n\013cha"
    "nnelUser\022\021\n\tchannelId\030\001 \001(\t\022\013\n\003uid\030\002 \001(\t"
    "\022\r\n\005state\030\003 \001(\rB\rZ\013.;uyujoyapib\006proto3", 238);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "streamingBase.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_streamingBase_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_streamingBase_2eproto_once_);
void protobuf_AddDesc_streamingBase_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_streamingBase_2eproto_once_,
                 &protobuf_AddDesc_streamingBase_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_streamingBase_2eproto {
  StaticDescriptorInitializer_streamingBase_2eproto() {
    protobuf_AddDesc_streamingBase_2eproto();
  }
} static_descriptor_initializer_streamingBase_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int channel::kIdFieldNumber;
const int channel::kTokenFieldNumber;
const int channel::kTypeFieldNumber;
const int channel::kExpirationFieldNumber;
const int channel::kStateFieldNumber;
const int channel::kStartTsFieldNumber;
const int channel::kEndTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

channel::channel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_streamingBase_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:batprotobuf.channel)
}

void channel::InitAsDefaultInstance() {
}

channel::channel(const channel& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:batprotobuf.channel)
}

void channel::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&expiration_, 0, reinterpret_cast<char*>(&endts_) -
    reinterpret_cast<char*>(&expiration_) + sizeof(endts_));
  _cached_size_ = 0;
}

channel::~channel() {
  // @@protoc_insertion_point(destructor:batprotobuf.channel)
  SharedDtor();
}

void channel::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void channel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* channel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return channel_descriptor_;
}

const channel& channel::default_instance() {
  protobuf_InitDefaults_streamingBase_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<channel> channel_default_instance_;

channel* channel::New(::google::protobuf::Arena* arena) const {
  channel* n = new channel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void channel::Clear() {
// @@protoc_insertion_point(message_clear_start:batprotobuf.channel)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(channel, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<channel*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(expiration_, endts_);
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool channel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:batprotobuf.channel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "batprotobuf.channel.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "batprotobuf.channel.token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_expiration;
        break;
      }

      // optional int64 expiration = 4;
      case 4: {
        if (tag == 32) {
         parse_expiration:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expiration_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }

      // optional uint32 state = 5;
      case 5: {
        if (tag == 40) {
         parse_state:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_startTs;
        break;
      }

      // optional int64 startTs = 6;
      case 6: {
        if (tag == 48) {
         parse_startTs:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &startts_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_endTs;
        break;
      }

      // optional int64 endTs = 7;
      case 7: {
        if (tag == 56) {
         parse_endTs:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endts_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:batprotobuf.channel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:batprotobuf.channel)
  return false;
#undef DO_
}

void channel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:batprotobuf.channel)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "batprotobuf.channel.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "batprotobuf.channel.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // optional uint32 type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // optional int64 expiration = 4;
  if (this->expiration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->expiration(), output);
  }

  // optional uint32 state = 5;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->state(), output);
  }

  // optional int64 startTs = 6;
  if (this->startts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->startts(), output);
  }

  // optional int64 endTs = 7;
  if (this->endts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->endts(), output);
  }

  // @@protoc_insertion_point(serialize_end:batprotobuf.channel)
}

::google::protobuf::uint8* channel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:batprotobuf.channel)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "batprotobuf.channel.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "batprotobuf.channel.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // optional uint32 type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // optional int64 expiration = 4;
  if (this->expiration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->expiration(), target);
  }

  // optional uint32 state = 5;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->state(), target);
  }

  // optional int64 startTs = 6;
  if (this->startts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->startts(), target);
  }

  // optional int64 endTs = 7;
  if (this->endts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->endts(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:batprotobuf.channel)
  return target;
}

size_t channel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:batprotobuf.channel)
  size_t total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional string token = 2;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // optional uint32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  // optional int64 expiration = 4;
  if (this->expiration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->expiration());
  }

  // optional uint32 state = 5;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->state());
  }

  // optional int64 startTs = 6;
  if (this->startts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->startts());
  }

  // optional int64 endTs = 7;
  if (this->endts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->endts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void channel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:batprotobuf.channel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const channel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const channel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:batprotobuf.channel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:batprotobuf.channel)
    UnsafeMergeFrom(*source);
  }
}

void channel::MergeFrom(const channel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:batprotobuf.channel)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void channel::UnsafeMergeFrom(const channel& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.expiration() != 0) {
    set_expiration(from.expiration());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.startts() != 0) {
    set_startts(from.startts());
  }
  if (from.endts() != 0) {
    set_endts(from.endts());
  }
}

void channel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:batprotobuf.channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void channel::CopyFrom(const channel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:batprotobuf.channel)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool channel::IsInitialized() const {

  return true;
}

void channel::Swap(channel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void channel::InternalSwap(channel* other) {
  id_.Swap(&other->id_);
  token_.Swap(&other->token_);
  std::swap(type_, other->type_);
  std::swap(expiration_, other->expiration_);
  std::swap(state_, other->state_);
  std::swap(startts_, other->startts_);
  std::swap(endts_, other->endts_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata channel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = channel_descriptor_;
  metadata.reflection = channel_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// channel

// optional string id = 1;
void channel::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& channel::id() const {
  // @@protoc_insertion_point(field_get:batprotobuf.channel.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void channel::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:batprotobuf.channel.id)
}
void channel::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:batprotobuf.channel.id)
}
void channel::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:batprotobuf.channel.id)
}
::std::string* channel::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:batprotobuf.channel.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* channel::release_id() {
  // @@protoc_insertion_point(field_release:batprotobuf.channel.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void channel::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:batprotobuf.channel.id)
}

// optional string token = 2;
void channel::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& channel::token() const {
  // @@protoc_insertion_point(field_get:batprotobuf.channel.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void channel::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:batprotobuf.channel.token)
}
void channel::set_token(const char* value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:batprotobuf.channel.token)
}
void channel::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:batprotobuf.channel.token)
}
::std::string* channel::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:batprotobuf.channel.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* channel::release_token() {
  // @@protoc_insertion_point(field_release:batprotobuf.channel.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void channel::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:batprotobuf.channel.token)
}

// optional uint32 type = 3;
void channel::clear_type() {
  type_ = 0u;
}
::google::protobuf::uint32 channel::type() const {
  // @@protoc_insertion_point(field_get:batprotobuf.channel.type)
  return type_;
}
void channel::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:batprotobuf.channel.type)
}

// optional int64 expiration = 4;
void channel::clear_expiration() {
  expiration_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 channel::expiration() const {
  // @@protoc_insertion_point(field_get:batprotobuf.channel.expiration)
  return expiration_;
}
void channel::set_expiration(::google::protobuf::int64 value) {
  
  expiration_ = value;
  // @@protoc_insertion_point(field_set:batprotobuf.channel.expiration)
}

// optional uint32 state = 5;
void channel::clear_state() {
  state_ = 0u;
}
::google::protobuf::uint32 channel::state() const {
  // @@protoc_insertion_point(field_get:batprotobuf.channel.state)
  return state_;
}
void channel::set_state(::google::protobuf::uint32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:batprotobuf.channel.state)
}

// optional int64 startTs = 6;
void channel::clear_startts() {
  startts_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 channel::startts() const {
  // @@protoc_insertion_point(field_get:batprotobuf.channel.startTs)
  return startts_;
}
void channel::set_startts(::google::protobuf::int64 value) {
  
  startts_ = value;
  // @@protoc_insertion_point(field_set:batprotobuf.channel.startTs)
}

// optional int64 endTs = 7;
void channel::clear_endts() {
  endts_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 channel::endts() const {
  // @@protoc_insertion_point(field_get:batprotobuf.channel.endTs)
  return endts_;
}
void channel::set_endts(::google::protobuf::int64 value) {
  
  endts_ = value;
  // @@protoc_insertion_point(field_set:batprotobuf.channel.endTs)
}

inline const channel* channel::internal_default_instance() {
  return &channel_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int channelUser::kChannelIdFieldNumber;
const int channelUser::kUidFieldNumber;
const int channelUser::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

channelUser::channelUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_streamingBase_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:batprotobuf.channelUser)
}

void channelUser::InitAsDefaultInstance() {
}

channelUser::channelUser(const channelUser& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:batprotobuf.channelUser)
}

void channelUser::SharedCtor() {
  channelid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0u;
  _cached_size_ = 0;
}

channelUser::~channelUser() {
  // @@protoc_insertion_point(destructor:batprotobuf.channelUser)
  SharedDtor();
}

void channelUser::SharedDtor() {
  channelid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void channelUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* channelUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return channelUser_descriptor_;
}

const channelUser& channelUser::default_instance() {
  protobuf_InitDefaults_streamingBase_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<channelUser> channelUser_default_instance_;

channelUser* channelUser::New(::google::protobuf::Arena* arena) const {
  channelUser* n = new channelUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void channelUser::Clear() {
// @@protoc_insertion_point(message_clear_start:batprotobuf.channelUser)
  channelid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0u;
}

bool channelUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:batprotobuf.channelUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string channelId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channelid().data(), this->channelid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "batprotobuf.channelUser.channelId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }

      // optional string uid = 2;
      case 2: {
        if (tag == 18) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "batprotobuf.channelUser.uid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional uint32 state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:batprotobuf.channelUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:batprotobuf.channelUser)
  return false;
#undef DO_
}

void channelUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:batprotobuf.channelUser)
  // optional string channelId = 1;
  if (this->channelid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "batprotobuf.channelUser.channelId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channelid(), output);
  }

  // optional string uid = 2;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "batprotobuf.channelUser.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uid(), output);
  }

  // optional uint32 state = 3;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->state(), output);
  }

  // @@protoc_insertion_point(serialize_end:batprotobuf.channelUser)
}

::google::protobuf::uint8* channelUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:batprotobuf.channelUser)
  // optional string channelId = 1;
  if (this->channelid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "batprotobuf.channelUser.channelId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channelid(), target);
  }

  // optional string uid = 2;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "batprotobuf.channelUser.uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uid(), target);
  }

  // optional uint32 state = 3;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->state(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:batprotobuf.channelUser)
  return target;
}

size_t channelUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:batprotobuf.channelUser)
  size_t total_size = 0;

  // optional string channelId = 1;
  if (this->channelid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channelid());
  }

  // optional string uid = 2;
  if (this->uid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());
  }

  // optional uint32 state = 3;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void channelUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:batprotobuf.channelUser)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const channelUser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const channelUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:batprotobuf.channelUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:batprotobuf.channelUser)
    UnsafeMergeFrom(*source);
  }
}

void channelUser::MergeFrom(const channelUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:batprotobuf.channelUser)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void channelUser::UnsafeMergeFrom(const channelUser& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.channelid().size() > 0) {

    channelid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channelid_);
  }
  if (from.uid().size() > 0) {

    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void channelUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:batprotobuf.channelUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void channelUser::CopyFrom(const channelUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:batprotobuf.channelUser)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool channelUser::IsInitialized() const {

  return true;
}

void channelUser::Swap(channelUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void channelUser::InternalSwap(channelUser* other) {
  channelid_.Swap(&other->channelid_);
  uid_.Swap(&other->uid_);
  std::swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata channelUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = channelUser_descriptor_;
  metadata.reflection = channelUser_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// channelUser

// optional string channelId = 1;
void channelUser::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& channelUser::channelid() const {
  // @@protoc_insertion_point(field_get:batprotobuf.channelUser.channelId)
  return channelid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void channelUser::set_channelid(const ::std::string& value) {
  
  channelid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:batprotobuf.channelUser.channelId)
}
void channelUser::set_channelid(const char* value) {
  
  channelid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:batprotobuf.channelUser.channelId)
}
void channelUser::set_channelid(const char* value, size_t size) {
  
  channelid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:batprotobuf.channelUser.channelId)
}
::std::string* channelUser::mutable_channelid() {
  
  // @@protoc_insertion_point(field_mutable:batprotobuf.channelUser.channelId)
  return channelid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* channelUser::release_channelid() {
  // @@protoc_insertion_point(field_release:batprotobuf.channelUser.channelId)
  
  return channelid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void channelUser::set_allocated_channelid(::std::string* channelid) {
  if (channelid != NULL) {
    
  } else {
    
  }
  channelid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:batprotobuf.channelUser.channelId)
}

// optional string uid = 2;
void channelUser::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& channelUser::uid() const {
  // @@protoc_insertion_point(field_get:batprotobuf.channelUser.uid)
  return uid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void channelUser::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:batprotobuf.channelUser.uid)
}
void channelUser::set_uid(const char* value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:batprotobuf.channelUser.uid)
}
void channelUser::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:batprotobuf.channelUser.uid)
}
::std::string* channelUser::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:batprotobuf.channelUser.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* channelUser::release_uid() {
  // @@protoc_insertion_point(field_release:batprotobuf.channelUser.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void channelUser::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:batprotobuf.channelUser.uid)
}

// optional uint32 state = 3;
void channelUser::clear_state() {
  state_ = 0u;
}
::google::protobuf::uint32 channelUser::state() const {
  // @@protoc_insertion_point(field_get:batprotobuf.channelUser.state)
  return state_;
}
void channelUser::set_state(::google::protobuf::uint32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:batprotobuf.channelUser.state)
}

inline const channelUser* channelUser::internal_default_instance() {
  return &channelUser_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace batprotobuf

// @@protoc_insertion_point(global_scope)
