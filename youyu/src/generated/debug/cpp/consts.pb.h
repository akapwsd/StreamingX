// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: consts.proto

#ifndef PROTOBUF_consts_2eproto__INCLUDED
#define PROTOBUF_consts_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace batprotobuf {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_consts_2eproto();
void protobuf_InitDefaults_consts_2eproto();
void protobuf_AssignDesc_consts_2eproto();
void protobuf_ShutdownFile_consts_2eproto();


enum channelState {
  ChannelStateClosed = 0,
  ChannelStateFree = 1,
  ChannelStateBusy = 2,
  ChannelStateRefreshing = 3,
  channelState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  channelState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool channelState_IsValid(int value);
const channelState channelState_MIN = ChannelStateClosed;
const channelState channelState_MAX = ChannelStateRefreshing;
const int channelState_ARRAYSIZE = channelState_MAX + 1;

const ::google::protobuf::EnumDescriptor* channelState_descriptor();
inline const ::std::string& channelState_Name(channelState value) {
  return ::google::protobuf::internal::NameOfEnum(
    channelState_descriptor(), value);
}
inline bool channelState_Parse(
    const ::std::string& name, channelState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<channelState>(
    channelState_descriptor(), name, value);
}
enum channelUserState {
  ChannelUserStateJoin = 0,
  ChannelUserStateQuit = 1,
  channelUserState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  channelUserState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool channelUserState_IsValid(int value);
const channelUserState channelUserState_MIN = ChannelUserStateJoin;
const channelUserState channelUserState_MAX = ChannelUserStateQuit;
const int channelUserState_ARRAYSIZE = channelUserState_MAX + 1;

const ::google::protobuf::EnumDescriptor* channelUserState_descriptor();
inline const ::std::string& channelUserState_Name(channelUserState value) {
  return ::google::protobuf::internal::NameOfEnum(
    channelUserState_descriptor(), value);
}
inline bool channelUserState_Parse(
    const ::std::string& name, channelUserState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<channelUserState>(
    channelUserState_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace batprotobuf

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::batprotobuf::channelState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::batprotobuf::channelState>() {
  return ::batprotobuf::channelState_descriptor();
}
template <> struct is_proto_enum< ::batprotobuf::channelUserState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::batprotobuf::channelUserState>() {
  return ::batprotobuf::channelUserState_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_consts_2eproto__INCLUDED
