// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: channelsdk.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "channelsdk.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace batprotobuf {

namespace {

const ::google::protobuf::Descriptor* sdkSessionReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sdkSessionReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* sdkSessionRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sdkSessionRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* sdkChannelInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sdkChannelInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* sdkChannelInfoRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sdkChannelInfoRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* sdkDialToBroadcaster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sdkDialToBroadcaster_reflection_ = NULL;
const ::google::protobuf::Descriptor* sdkDialToBroadcasterAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sdkDialToBroadcasterAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* channel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  channel_reflection_ = NULL;
const ::google::protobuf::Descriptor* sdkChannelHistoryReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sdkChannelHistoryReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* sdkChannelHistoryRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sdkChannelHistoryRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* channelHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  channelHistory_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_channelsdk_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_channelsdk_2eproto() {
  protobuf_AddDesc_channelsdk_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "channelsdk.proto");
  GOOGLE_CHECK(file != NULL);
  sdkSessionReq_descriptor_ = file->message_type(0);
  static const int sdkSessionReq_offsets_[1] = {
  };
  sdkSessionReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      sdkSessionReq_descriptor_,
      sdkSessionReq::internal_default_instance(),
      sdkSessionReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(sdkSessionReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sdkSessionReq, _internal_metadata_));
  sdkSessionRes_descriptor_ = file->message_type(1);
  static const int sdkSessionRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sdkSessionRes, token_),
  };
  sdkSessionRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      sdkSessionRes_descriptor_,
      sdkSessionRes::internal_default_instance(),
      sdkSessionRes_offsets_,
      -1,
      -1,
      -1,
      sizeof(sdkSessionRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sdkSessionRes, _internal_metadata_));
  sdkChannelInfoReq_descriptor_ = file->message_type(2);
  static const int sdkChannelInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sdkChannelInfoReq, channelid_),
  };
  sdkChannelInfoReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      sdkChannelInfoReq_descriptor_,
      sdkChannelInfoReq::internal_default_instance(),
      sdkChannelInfoReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(sdkChannelInfoReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sdkChannelInfoReq, _internal_metadata_));
  sdkChannelInfoRes_descriptor_ = file->message_type(3);
  static const int sdkChannelInfoRes_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sdkChannelInfoRes, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sdkChannelInfoRes, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sdkChannelInfoRes, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sdkChannelInfoRes, duration_),
  };
  sdkChannelInfoRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      sdkChannelInfoRes_descriptor_,
      sdkChannelInfoRes::internal_default_instance(),
      sdkChannelInfoRes_offsets_,
      -1,
      -1,
      -1,
      sizeof(sdkChannelInfoRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sdkChannelInfoRes, _internal_metadata_));
  sdkDialToBroadcaster_descriptor_ = file->message_type(4);
  static const int sdkDialToBroadcaster_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sdkDialToBroadcaster, broadcaster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sdkDialToBroadcaster, channelid_),
  };
  sdkDialToBroadcaster_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      sdkDialToBroadcaster_descriptor_,
      sdkDialToBroadcaster::internal_default_instance(),
      sdkDialToBroadcaster_offsets_,
      -1,
      -1,
      -1,
      sizeof(sdkDialToBroadcaster),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sdkDialToBroadcaster, _internal_metadata_));
  sdkDialToBroadcasterAck_descriptor_ = file->message_type(5);
  static const int sdkDialToBroadcasterAck_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sdkDialToBroadcasterAck, ch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sdkDialToBroadcasterAck, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sdkDialToBroadcasterAck, uniqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sdkDialToBroadcasterAck, broadcasterstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sdkDialToBroadcasterAck, insufficientbalance_),
  };
  sdkDialToBroadcasterAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      sdkDialToBroadcasterAck_descriptor_,
      sdkDialToBroadcasterAck::internal_default_instance(),
      sdkDialToBroadcasterAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(sdkDialToBroadcasterAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sdkDialToBroadcasterAck, _internal_metadata_));
  channel_descriptor_ = file->message_type(6);
  static const int channel_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel, startts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel, endts_),
  };
  channel_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      channel_descriptor_,
      channel::internal_default_instance(),
      channel_offsets_,
      -1,
      -1,
      -1,
      sizeof(channel),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel, _internal_metadata_));
  sdkChannelHistoryReq_descriptor_ = file->message_type(7);
  static const int sdkChannelHistoryReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sdkChannelHistoryReq, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sdkChannelHistoryReq, limit_),
  };
  sdkChannelHistoryReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      sdkChannelHistoryReq_descriptor_,
      sdkChannelHistoryReq::internal_default_instance(),
      sdkChannelHistoryReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(sdkChannelHistoryReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sdkChannelHistoryReq, _internal_metadata_));
  sdkChannelHistoryRes_descriptor_ = file->message_type(8);
  static const int sdkChannelHistoryRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sdkChannelHistoryRes, list_),
  };
  sdkChannelHistoryRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      sdkChannelHistoryRes_descriptor_,
      sdkChannelHistoryRes::internal_default_instance(),
      sdkChannelHistoryRes_offsets_,
      -1,
      -1,
      -1,
      sizeof(sdkChannelHistoryRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sdkChannelHistoryRes, _internal_metadata_));
  channelHistory_descriptor_ = file->message_type(9);
  static const int channelHistory_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channelHistory, historyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channelHistory, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channelHistory, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channelHistory, otherid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channelHistory, othername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channelHistory, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channelHistory, duration_),
  };
  channelHistory_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      channelHistory_descriptor_,
      channelHistory::internal_default_instance(),
      channelHistory_offsets_,
      -1,
      -1,
      -1,
      sizeof(channelHistory),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channelHistory, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_channelsdk_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      sdkSessionReq_descriptor_, sdkSessionReq::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      sdkSessionRes_descriptor_, sdkSessionRes::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      sdkChannelInfoReq_descriptor_, sdkChannelInfoReq::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      sdkChannelInfoRes_descriptor_, sdkChannelInfoRes::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      sdkDialToBroadcaster_descriptor_, sdkDialToBroadcaster::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      sdkDialToBroadcasterAck_descriptor_, sdkDialToBroadcasterAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      channel_descriptor_, channel::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      sdkChannelHistoryReq_descriptor_, sdkChannelHistoryReq::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      sdkChannelHistoryRes_descriptor_, sdkChannelHistoryRes::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      channelHistory_descriptor_, channelHistory::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_channelsdk_2eproto() {
  sdkSessionReq_default_instance_.Shutdown();
  delete sdkSessionReq_reflection_;
  sdkSessionRes_default_instance_.Shutdown();
  delete sdkSessionRes_reflection_;
  sdkChannelInfoReq_default_instance_.Shutdown();
  delete sdkChannelInfoReq_reflection_;
  sdkChannelInfoRes_default_instance_.Shutdown();
  delete sdkChannelInfoRes_reflection_;
  sdkDialToBroadcaster_default_instance_.Shutdown();
  delete sdkDialToBroadcaster_reflection_;
  sdkDialToBroadcasterAck_default_instance_.Shutdown();
  delete sdkDialToBroadcasterAck_reflection_;
  channel_default_instance_.Shutdown();
  delete channel_reflection_;
  sdkChannelHistoryReq_default_instance_.Shutdown();
  delete sdkChannelHistoryReq_reflection_;
  sdkChannelHistoryRes_default_instance_.Shutdown();
  delete sdkChannelHistoryRes_reflection_;
  channelHistory_default_instance_.Shutdown();
  delete channelHistory_reflection_;
}

void protobuf_InitDefaults_channelsdk_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  sdkSessionReq_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  sdkSessionRes_default_instance_.DefaultConstruct();
  sdkChannelInfoReq_default_instance_.DefaultConstruct();
  sdkChannelInfoRes_default_instance_.DefaultConstruct();
  sdkDialToBroadcaster_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  sdkDialToBroadcasterAck_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  channel_default_instance_.DefaultConstruct();
  sdkChannelHistoryReq_default_instance_.DefaultConstruct();
  sdkChannelHistoryRes_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  channelHistory_default_instance_.DefaultConstruct();
  sdkSessionReq_default_instance_.get_mutable()->InitAsDefaultInstance();
  sdkSessionRes_default_instance_.get_mutable()->InitAsDefaultInstance();
  sdkChannelInfoReq_default_instance_.get_mutable()->InitAsDefaultInstance();
  sdkChannelInfoRes_default_instance_.get_mutable()->InitAsDefaultInstance();
  sdkDialToBroadcaster_default_instance_.get_mutable()->InitAsDefaultInstance();
  sdkDialToBroadcasterAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  channel_default_instance_.get_mutable()->InitAsDefaultInstance();
  sdkChannelHistoryReq_default_instance_.get_mutable()->InitAsDefaultInstance();
  sdkChannelHistoryRes_default_instance_.get_mutable()->InitAsDefaultInstance();
  channelHistory_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_channelsdk_2eproto_once_);
void protobuf_InitDefaults_channelsdk_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_channelsdk_2eproto_once_,
                 &protobuf_InitDefaults_channelsdk_2eproto_impl);
}
void protobuf_AddDesc_channelsdk_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_channelsdk_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020channelsdk.proto\022\013batprotobuf\"\017\n\rsdkSe"
    "ssionReq\"\036\n\rsdkSessionRes\022\r\n\005token\030\001 \001(\t"
    "\"&\n\021sdkChannelInfoReq\022\021\n\tchannelId\030\001 \001(\003"
    "\"R\n\021sdkChannelInfoRes\022\n\n\002Id\030\001 \001(\003\022\020\n\010Cat"
    "egory\030\002 \001(\r\022\r\n\005State\030\003 \001(\r\022\020\n\010Duration\030\004"
    " \001(\r\">\n\024sdkDialToBroadcaster\022\023\n\013broadcas"
    "ter\030\001 \001(\r\022\021\n\tchannelId\030\002 \001(\003\"\221\001\n\027sdkDial"
    "ToBroadcasterAck\022 \n\002ch\030\001 \001(\0132\024.batprotob"
    "uf.channel\022\r\n\005token\030\002 \001(\t\022\016\n\006uniqId\030\003 \001("
    "\t\022\030\n\020broadcasterState\030\004 \001(\r\022\033\n\023insuffici"
    "entBalance\030\005 \001(\010\"G\n\007channel\022\n\n\002id\030\001 \001(\t\022"
    "\020\n\010category\030\002 \001(\r\022\017\n\007startTs\030\003 \001(\003\022\r\n\005en"
    "dTs\030\004 \001(\003\"3\n\024sdkChannelHistoryReq\022\014\n\004pag"
    "e\030\001 \001(\r\022\r\n\005limit\030\002 \001(\r\"A\n\024sdkChannelHist"
    "oryRes\022)\n\004list\030\001 \003(\0132\033.batprotobuf.chann"
    "elHistory\"\220\001\n\016channelHistory\022\021\n\thistoryI"
    "d\030\001 \001(\r\022\021\n\tchannelId\030\002 \001(\003\022\016\n\006selfId\030\003 \001"
    "(\r\022\017\n\007otherId\030\004 \001(\r\022\021\n\totherName\030\005 \001(\t\022\022"
    "\n\ncreateTime\030\006 \001(\003\022\020\n\010duration\030\007 \001(\rB#Z!"
    "bat_common/protobuffs/batprotobufb\006proto"
    "3", 801);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "channelsdk.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_channelsdk_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_channelsdk_2eproto_once_);
void protobuf_AddDesc_channelsdk_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_channelsdk_2eproto_once_,
                 &protobuf_AddDesc_channelsdk_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_channelsdk_2eproto {
  StaticDescriptorInitializer_channelsdk_2eproto() {
    protobuf_AddDesc_channelsdk_2eproto();
  }
} static_descriptor_initializer_channelsdk_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sdkSessionReq::sdkSessionReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_channelsdk_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:batprotobuf.sdkSessionReq)
}

void sdkSessionReq::InitAsDefaultInstance() {
}

sdkSessionReq::sdkSessionReq(const sdkSessionReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:batprotobuf.sdkSessionReq)
}

void sdkSessionReq::SharedCtor() {
  _cached_size_ = 0;
}

sdkSessionReq::~sdkSessionReq() {
  // @@protoc_insertion_point(destructor:batprotobuf.sdkSessionReq)
  SharedDtor();
}

void sdkSessionReq::SharedDtor() {
}

void sdkSessionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sdkSessionReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sdkSessionReq_descriptor_;
}

const sdkSessionReq& sdkSessionReq::default_instance() {
  protobuf_InitDefaults_channelsdk_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<sdkSessionReq> sdkSessionReq_default_instance_;

sdkSessionReq* sdkSessionReq::New(::google::protobuf::Arena* arena) const {
  sdkSessionReq* n = new sdkSessionReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void sdkSessionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:batprotobuf.sdkSessionReq)
}

bool sdkSessionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:batprotobuf.sdkSessionReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:batprotobuf.sdkSessionReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:batprotobuf.sdkSessionReq)
  return false;
#undef DO_
}

void sdkSessionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:batprotobuf.sdkSessionReq)
  // @@protoc_insertion_point(serialize_end:batprotobuf.sdkSessionReq)
}

::google::protobuf::uint8* sdkSessionReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:batprotobuf.sdkSessionReq)
  // @@protoc_insertion_point(serialize_to_array_end:batprotobuf.sdkSessionReq)
  return target;
}

size_t sdkSessionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:batprotobuf.sdkSessionReq)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sdkSessionReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:batprotobuf.sdkSessionReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const sdkSessionReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const sdkSessionReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:batprotobuf.sdkSessionReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:batprotobuf.sdkSessionReq)
    UnsafeMergeFrom(*source);
  }
}

void sdkSessionReq::MergeFrom(const sdkSessionReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:batprotobuf.sdkSessionReq)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void sdkSessionReq::UnsafeMergeFrom(const sdkSessionReq& from) {
  GOOGLE_DCHECK(&from != this);
}

void sdkSessionReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:batprotobuf.sdkSessionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sdkSessionReq::CopyFrom(const sdkSessionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:batprotobuf.sdkSessionReq)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool sdkSessionReq::IsInitialized() const {

  return true;
}

void sdkSessionReq::Swap(sdkSessionReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sdkSessionReq::InternalSwap(sdkSessionReq* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata sdkSessionReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sdkSessionReq_descriptor_;
  metadata.reflection = sdkSessionReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// sdkSessionReq

inline const sdkSessionReq* sdkSessionReq::internal_default_instance() {
  return &sdkSessionReq_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int sdkSessionRes::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sdkSessionRes::sdkSessionRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_channelsdk_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:batprotobuf.sdkSessionRes)
}

void sdkSessionRes::InitAsDefaultInstance() {
}

sdkSessionRes::sdkSessionRes(const sdkSessionRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:batprotobuf.sdkSessionRes)
}

void sdkSessionRes::SharedCtor() {
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

sdkSessionRes::~sdkSessionRes() {
  // @@protoc_insertion_point(destructor:batprotobuf.sdkSessionRes)
  SharedDtor();
}

void sdkSessionRes::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void sdkSessionRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sdkSessionRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sdkSessionRes_descriptor_;
}

const sdkSessionRes& sdkSessionRes::default_instance() {
  protobuf_InitDefaults_channelsdk_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<sdkSessionRes> sdkSessionRes_default_instance_;

sdkSessionRes* sdkSessionRes::New(::google::protobuf::Arena* arena) const {
  sdkSessionRes* n = new sdkSessionRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void sdkSessionRes::Clear() {
// @@protoc_insertion_point(message_clear_start:batprotobuf.sdkSessionRes)
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool sdkSessionRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:batprotobuf.sdkSessionRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "batprotobuf.sdkSessionRes.token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:batprotobuf.sdkSessionRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:batprotobuf.sdkSessionRes)
  return false;
#undef DO_
}

void sdkSessionRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:batprotobuf.sdkSessionRes)
  // optional string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "batprotobuf.sdkSessionRes.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // @@protoc_insertion_point(serialize_end:batprotobuf.sdkSessionRes)
}

::google::protobuf::uint8* sdkSessionRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:batprotobuf.sdkSessionRes)
  // optional string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "batprotobuf.sdkSessionRes.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:batprotobuf.sdkSessionRes)
  return target;
}

size_t sdkSessionRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:batprotobuf.sdkSessionRes)
  size_t total_size = 0;

  // optional string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sdkSessionRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:batprotobuf.sdkSessionRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const sdkSessionRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const sdkSessionRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:batprotobuf.sdkSessionRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:batprotobuf.sdkSessionRes)
    UnsafeMergeFrom(*source);
  }
}

void sdkSessionRes::MergeFrom(const sdkSessionRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:batprotobuf.sdkSessionRes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void sdkSessionRes::UnsafeMergeFrom(const sdkSessionRes& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
}

void sdkSessionRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:batprotobuf.sdkSessionRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sdkSessionRes::CopyFrom(const sdkSessionRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:batprotobuf.sdkSessionRes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool sdkSessionRes::IsInitialized() const {

  return true;
}

void sdkSessionRes::Swap(sdkSessionRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sdkSessionRes::InternalSwap(sdkSessionRes* other) {
  token_.Swap(&other->token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata sdkSessionRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sdkSessionRes_descriptor_;
  metadata.reflection = sdkSessionRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// sdkSessionRes

// optional string token = 1;
void sdkSessionRes::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& sdkSessionRes::token() const {
  // @@protoc_insertion_point(field_get:batprotobuf.sdkSessionRes.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void sdkSessionRes::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:batprotobuf.sdkSessionRes.token)
}
void sdkSessionRes::set_token(const char* value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:batprotobuf.sdkSessionRes.token)
}
void sdkSessionRes::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:batprotobuf.sdkSessionRes.token)
}
::std::string* sdkSessionRes::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:batprotobuf.sdkSessionRes.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* sdkSessionRes::release_token() {
  // @@protoc_insertion_point(field_release:batprotobuf.sdkSessionRes.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void sdkSessionRes::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:batprotobuf.sdkSessionRes.token)
}

inline const sdkSessionRes* sdkSessionRes::internal_default_instance() {
  return &sdkSessionRes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int sdkChannelInfoReq::kChannelIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sdkChannelInfoReq::sdkChannelInfoReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_channelsdk_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:batprotobuf.sdkChannelInfoReq)
}

void sdkChannelInfoReq::InitAsDefaultInstance() {
}

sdkChannelInfoReq::sdkChannelInfoReq(const sdkChannelInfoReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:batprotobuf.sdkChannelInfoReq)
}

void sdkChannelInfoReq::SharedCtor() {
  channelid_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

sdkChannelInfoReq::~sdkChannelInfoReq() {
  // @@protoc_insertion_point(destructor:batprotobuf.sdkChannelInfoReq)
  SharedDtor();
}

void sdkChannelInfoReq::SharedDtor() {
}

void sdkChannelInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sdkChannelInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sdkChannelInfoReq_descriptor_;
}

const sdkChannelInfoReq& sdkChannelInfoReq::default_instance() {
  protobuf_InitDefaults_channelsdk_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<sdkChannelInfoReq> sdkChannelInfoReq_default_instance_;

sdkChannelInfoReq* sdkChannelInfoReq::New(::google::protobuf::Arena* arena) const {
  sdkChannelInfoReq* n = new sdkChannelInfoReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void sdkChannelInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:batprotobuf.sdkChannelInfoReq)
  channelid_ = GOOGLE_LONGLONG(0);
}

bool sdkChannelInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:batprotobuf.sdkChannelInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 channelId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &channelid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:batprotobuf.sdkChannelInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:batprotobuf.sdkChannelInfoReq)
  return false;
#undef DO_
}

void sdkChannelInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:batprotobuf.sdkChannelInfoReq)
  // optional int64 channelId = 1;
  if (this->channelid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->channelid(), output);
  }

  // @@protoc_insertion_point(serialize_end:batprotobuf.sdkChannelInfoReq)
}

::google::protobuf::uint8* sdkChannelInfoReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:batprotobuf.sdkChannelInfoReq)
  // optional int64 channelId = 1;
  if (this->channelid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->channelid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:batprotobuf.sdkChannelInfoReq)
  return target;
}

size_t sdkChannelInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:batprotobuf.sdkChannelInfoReq)
  size_t total_size = 0;

  // optional int64 channelId = 1;
  if (this->channelid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->channelid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sdkChannelInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:batprotobuf.sdkChannelInfoReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const sdkChannelInfoReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const sdkChannelInfoReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:batprotobuf.sdkChannelInfoReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:batprotobuf.sdkChannelInfoReq)
    UnsafeMergeFrom(*source);
  }
}

void sdkChannelInfoReq::MergeFrom(const sdkChannelInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:batprotobuf.sdkChannelInfoReq)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void sdkChannelInfoReq::UnsafeMergeFrom(const sdkChannelInfoReq& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.channelid() != 0) {
    set_channelid(from.channelid());
  }
}

void sdkChannelInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:batprotobuf.sdkChannelInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sdkChannelInfoReq::CopyFrom(const sdkChannelInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:batprotobuf.sdkChannelInfoReq)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool sdkChannelInfoReq::IsInitialized() const {

  return true;
}

void sdkChannelInfoReq::Swap(sdkChannelInfoReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sdkChannelInfoReq::InternalSwap(sdkChannelInfoReq* other) {
  std::swap(channelid_, other->channelid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata sdkChannelInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sdkChannelInfoReq_descriptor_;
  metadata.reflection = sdkChannelInfoReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// sdkChannelInfoReq

// optional int64 channelId = 1;
void sdkChannelInfoReq::clear_channelid() {
  channelid_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 sdkChannelInfoReq::channelid() const {
  // @@protoc_insertion_point(field_get:batprotobuf.sdkChannelInfoReq.channelId)
  return channelid_;
}
void sdkChannelInfoReq::set_channelid(::google::protobuf::int64 value) {
  
  channelid_ = value;
  // @@protoc_insertion_point(field_set:batprotobuf.sdkChannelInfoReq.channelId)
}

inline const sdkChannelInfoReq* sdkChannelInfoReq::internal_default_instance() {
  return &sdkChannelInfoReq_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int sdkChannelInfoRes::kIdFieldNumber;
const int sdkChannelInfoRes::kCategoryFieldNumber;
const int sdkChannelInfoRes::kStateFieldNumber;
const int sdkChannelInfoRes::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sdkChannelInfoRes::sdkChannelInfoRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_channelsdk_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:batprotobuf.sdkChannelInfoRes)
}

void sdkChannelInfoRes::InitAsDefaultInstance() {
}

sdkChannelInfoRes::sdkChannelInfoRes(const sdkChannelInfoRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:batprotobuf.sdkChannelInfoRes)
}

void sdkChannelInfoRes::SharedCtor() {
  ::memset(&id_, 0, reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&id_) + sizeof(duration_));
  _cached_size_ = 0;
}

sdkChannelInfoRes::~sdkChannelInfoRes() {
  // @@protoc_insertion_point(destructor:batprotobuf.sdkChannelInfoRes)
  SharedDtor();
}

void sdkChannelInfoRes::SharedDtor() {
}

void sdkChannelInfoRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sdkChannelInfoRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sdkChannelInfoRes_descriptor_;
}

const sdkChannelInfoRes& sdkChannelInfoRes::default_instance() {
  protobuf_InitDefaults_channelsdk_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<sdkChannelInfoRes> sdkChannelInfoRes_default_instance_;

sdkChannelInfoRes* sdkChannelInfoRes::New(::google::protobuf::Arena* arena) const {
  sdkChannelInfoRes* n = new sdkChannelInfoRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void sdkChannelInfoRes::Clear() {
// @@protoc_insertion_point(message_clear_start:batprotobuf.sdkChannelInfoRes)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(sdkChannelInfoRes, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<sdkChannelInfoRes*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, duration_);

#undef ZR_HELPER_
#undef ZR_

}

bool sdkChannelInfoRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:batprotobuf.sdkChannelInfoRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 Id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Category;
        break;
      }

      // optional uint32 Category = 2;
      case 2: {
        if (tag == 16) {
         parse_Category:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &category_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_State;
        break;
      }

      // optional uint32 State = 3;
      case 3: {
        if (tag == 24) {
         parse_State:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Duration;
        break;
      }

      // optional uint32 Duration = 4;
      case 4: {
        if (tag == 32) {
         parse_Duration:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:batprotobuf.sdkChannelInfoRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:batprotobuf.sdkChannelInfoRes)
  return false;
#undef DO_
}

void sdkChannelInfoRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:batprotobuf.sdkChannelInfoRes)
  // optional int64 Id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional uint32 Category = 2;
  if (this->category() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->category(), output);
  }

  // optional uint32 State = 3;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->state(), output);
  }

  // optional uint32 Duration = 4;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->duration(), output);
  }

  // @@protoc_insertion_point(serialize_end:batprotobuf.sdkChannelInfoRes)
}

::google::protobuf::uint8* sdkChannelInfoRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:batprotobuf.sdkChannelInfoRes)
  // optional int64 Id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional uint32 Category = 2;
  if (this->category() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->category(), target);
  }

  // optional uint32 State = 3;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->state(), target);
  }

  // optional uint32 Duration = 4;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->duration(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:batprotobuf.sdkChannelInfoRes)
  return target;
}

size_t sdkChannelInfoRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:batprotobuf.sdkChannelInfoRes)
  size_t total_size = 0;

  // optional int64 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional uint32 Category = 2;
  if (this->category() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->category());
  }

  // optional uint32 State = 3;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->state());
  }

  // optional uint32 Duration = 4;
  if (this->duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->duration());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sdkChannelInfoRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:batprotobuf.sdkChannelInfoRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const sdkChannelInfoRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const sdkChannelInfoRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:batprotobuf.sdkChannelInfoRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:batprotobuf.sdkChannelInfoRes)
    UnsafeMergeFrom(*source);
  }
}

void sdkChannelInfoRes::MergeFrom(const sdkChannelInfoRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:batprotobuf.sdkChannelInfoRes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void sdkChannelInfoRes::UnsafeMergeFrom(const sdkChannelInfoRes& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.category() != 0) {
    set_category(from.category());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
}

void sdkChannelInfoRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:batprotobuf.sdkChannelInfoRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sdkChannelInfoRes::CopyFrom(const sdkChannelInfoRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:batprotobuf.sdkChannelInfoRes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool sdkChannelInfoRes::IsInitialized() const {

  return true;
}

void sdkChannelInfoRes::Swap(sdkChannelInfoRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sdkChannelInfoRes::InternalSwap(sdkChannelInfoRes* other) {
  std::swap(id_, other->id_);
  std::swap(category_, other->category_);
  std::swap(state_, other->state_);
  std::swap(duration_, other->duration_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata sdkChannelInfoRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sdkChannelInfoRes_descriptor_;
  metadata.reflection = sdkChannelInfoRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// sdkChannelInfoRes

// optional int64 Id = 1;
void sdkChannelInfoRes::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 sdkChannelInfoRes::id() const {
  // @@protoc_insertion_point(field_get:batprotobuf.sdkChannelInfoRes.Id)
  return id_;
}
void sdkChannelInfoRes::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:batprotobuf.sdkChannelInfoRes.Id)
}

// optional uint32 Category = 2;
void sdkChannelInfoRes::clear_category() {
  category_ = 0u;
}
::google::protobuf::uint32 sdkChannelInfoRes::category() const {
  // @@protoc_insertion_point(field_get:batprotobuf.sdkChannelInfoRes.Category)
  return category_;
}
void sdkChannelInfoRes::set_category(::google::protobuf::uint32 value) {
  
  category_ = value;
  // @@protoc_insertion_point(field_set:batprotobuf.sdkChannelInfoRes.Category)
}

// optional uint32 State = 3;
void sdkChannelInfoRes::clear_state() {
  state_ = 0u;
}
::google::protobuf::uint32 sdkChannelInfoRes::state() const {
  // @@protoc_insertion_point(field_get:batprotobuf.sdkChannelInfoRes.State)
  return state_;
}
void sdkChannelInfoRes::set_state(::google::protobuf::uint32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:batprotobuf.sdkChannelInfoRes.State)
}

// optional uint32 Duration = 4;
void sdkChannelInfoRes::clear_duration() {
  duration_ = 0u;
}
::google::protobuf::uint32 sdkChannelInfoRes::duration() const {
  // @@protoc_insertion_point(field_get:batprotobuf.sdkChannelInfoRes.Duration)
  return duration_;
}
void sdkChannelInfoRes::set_duration(::google::protobuf::uint32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:batprotobuf.sdkChannelInfoRes.Duration)
}

inline const sdkChannelInfoRes* sdkChannelInfoRes::internal_default_instance() {
  return &sdkChannelInfoRes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int sdkDialToBroadcaster::kBroadcasterFieldNumber;
const int sdkDialToBroadcaster::kChannelIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sdkDialToBroadcaster::sdkDialToBroadcaster()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_channelsdk_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:batprotobuf.sdkDialToBroadcaster)
}

void sdkDialToBroadcaster::InitAsDefaultInstance() {
}

sdkDialToBroadcaster::sdkDialToBroadcaster(const sdkDialToBroadcaster& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:batprotobuf.sdkDialToBroadcaster)
}

void sdkDialToBroadcaster::SharedCtor() {
  ::memset(&channelid_, 0, reinterpret_cast<char*>(&broadcaster_) -
    reinterpret_cast<char*>(&channelid_) + sizeof(broadcaster_));
  _cached_size_ = 0;
}

sdkDialToBroadcaster::~sdkDialToBroadcaster() {
  // @@protoc_insertion_point(destructor:batprotobuf.sdkDialToBroadcaster)
  SharedDtor();
}

void sdkDialToBroadcaster::SharedDtor() {
}

void sdkDialToBroadcaster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sdkDialToBroadcaster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sdkDialToBroadcaster_descriptor_;
}

const sdkDialToBroadcaster& sdkDialToBroadcaster::default_instance() {
  protobuf_InitDefaults_channelsdk_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<sdkDialToBroadcaster> sdkDialToBroadcaster_default_instance_;

sdkDialToBroadcaster* sdkDialToBroadcaster::New(::google::protobuf::Arena* arena) const {
  sdkDialToBroadcaster* n = new sdkDialToBroadcaster;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void sdkDialToBroadcaster::Clear() {
// @@protoc_insertion_point(message_clear_start:batprotobuf.sdkDialToBroadcaster)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(sdkDialToBroadcaster, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<sdkDialToBroadcaster*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(channelid_, broadcaster_);

#undef ZR_HELPER_
#undef ZR_

}

bool sdkDialToBroadcaster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:batprotobuf.sdkDialToBroadcaster)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 broadcaster = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &broadcaster_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_channelId;
        break;
      }

      // optional int64 channelId = 2;
      case 2: {
        if (tag == 16) {
         parse_channelId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &channelid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:batprotobuf.sdkDialToBroadcaster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:batprotobuf.sdkDialToBroadcaster)
  return false;
#undef DO_
}

void sdkDialToBroadcaster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:batprotobuf.sdkDialToBroadcaster)
  // optional uint32 broadcaster = 1;
  if (this->broadcaster() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->broadcaster(), output);
  }

  // optional int64 channelId = 2;
  if (this->channelid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->channelid(), output);
  }

  // @@protoc_insertion_point(serialize_end:batprotobuf.sdkDialToBroadcaster)
}

::google::protobuf::uint8* sdkDialToBroadcaster::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:batprotobuf.sdkDialToBroadcaster)
  // optional uint32 broadcaster = 1;
  if (this->broadcaster() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->broadcaster(), target);
  }

  // optional int64 channelId = 2;
  if (this->channelid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->channelid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:batprotobuf.sdkDialToBroadcaster)
  return target;
}

size_t sdkDialToBroadcaster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:batprotobuf.sdkDialToBroadcaster)
  size_t total_size = 0;

  // optional uint32 broadcaster = 1;
  if (this->broadcaster() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->broadcaster());
  }

  // optional int64 channelId = 2;
  if (this->channelid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->channelid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sdkDialToBroadcaster::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:batprotobuf.sdkDialToBroadcaster)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const sdkDialToBroadcaster* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const sdkDialToBroadcaster>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:batprotobuf.sdkDialToBroadcaster)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:batprotobuf.sdkDialToBroadcaster)
    UnsafeMergeFrom(*source);
  }
}

void sdkDialToBroadcaster::MergeFrom(const sdkDialToBroadcaster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:batprotobuf.sdkDialToBroadcaster)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void sdkDialToBroadcaster::UnsafeMergeFrom(const sdkDialToBroadcaster& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.broadcaster() != 0) {
    set_broadcaster(from.broadcaster());
  }
  if (from.channelid() != 0) {
    set_channelid(from.channelid());
  }
}

void sdkDialToBroadcaster::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:batprotobuf.sdkDialToBroadcaster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sdkDialToBroadcaster::CopyFrom(const sdkDialToBroadcaster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:batprotobuf.sdkDialToBroadcaster)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool sdkDialToBroadcaster::IsInitialized() const {

  return true;
}

void sdkDialToBroadcaster::Swap(sdkDialToBroadcaster* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sdkDialToBroadcaster::InternalSwap(sdkDialToBroadcaster* other) {
  std::swap(broadcaster_, other->broadcaster_);
  std::swap(channelid_, other->channelid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata sdkDialToBroadcaster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sdkDialToBroadcaster_descriptor_;
  metadata.reflection = sdkDialToBroadcaster_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// sdkDialToBroadcaster

// optional uint32 broadcaster = 1;
void sdkDialToBroadcaster::clear_broadcaster() {
  broadcaster_ = 0u;
}
::google::protobuf::uint32 sdkDialToBroadcaster::broadcaster() const {
  // @@protoc_insertion_point(field_get:batprotobuf.sdkDialToBroadcaster.broadcaster)
  return broadcaster_;
}
void sdkDialToBroadcaster::set_broadcaster(::google::protobuf::uint32 value) {
  
  broadcaster_ = value;
  // @@protoc_insertion_point(field_set:batprotobuf.sdkDialToBroadcaster.broadcaster)
}

// optional int64 channelId = 2;
void sdkDialToBroadcaster::clear_channelid() {
  channelid_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 sdkDialToBroadcaster::channelid() const {
  // @@protoc_insertion_point(field_get:batprotobuf.sdkDialToBroadcaster.channelId)
  return channelid_;
}
void sdkDialToBroadcaster::set_channelid(::google::protobuf::int64 value) {
  
  channelid_ = value;
  // @@protoc_insertion_point(field_set:batprotobuf.sdkDialToBroadcaster.channelId)
}

inline const sdkDialToBroadcaster* sdkDialToBroadcaster::internal_default_instance() {
  return &sdkDialToBroadcaster_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int sdkDialToBroadcasterAck::kChFieldNumber;
const int sdkDialToBroadcasterAck::kTokenFieldNumber;
const int sdkDialToBroadcasterAck::kUniqIdFieldNumber;
const int sdkDialToBroadcasterAck::kBroadcasterStateFieldNumber;
const int sdkDialToBroadcasterAck::kInsufficientBalanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sdkDialToBroadcasterAck::sdkDialToBroadcasterAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_channelsdk_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:batprotobuf.sdkDialToBroadcasterAck)
}

void sdkDialToBroadcasterAck::InitAsDefaultInstance() {
  ch_ = const_cast< ::batprotobuf::channel*>(
      ::batprotobuf::channel::internal_default_instance());
}

sdkDialToBroadcasterAck::sdkDialToBroadcasterAck(const sdkDialToBroadcasterAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:batprotobuf.sdkDialToBroadcasterAck)
}

void sdkDialToBroadcasterAck::SharedCtor() {
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uniqid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ch_ = NULL;
  ::memset(&broadcasterstate_, 0, reinterpret_cast<char*>(&insufficientbalance_) -
    reinterpret_cast<char*>(&broadcasterstate_) + sizeof(insufficientbalance_));
  _cached_size_ = 0;
}

sdkDialToBroadcasterAck::~sdkDialToBroadcasterAck() {
  // @@protoc_insertion_point(destructor:batprotobuf.sdkDialToBroadcasterAck)
  SharedDtor();
}

void sdkDialToBroadcasterAck::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uniqid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &sdkDialToBroadcasterAck_default_instance_.get()) {
    delete ch_;
  }
}

void sdkDialToBroadcasterAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sdkDialToBroadcasterAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sdkDialToBroadcasterAck_descriptor_;
}

const sdkDialToBroadcasterAck& sdkDialToBroadcasterAck::default_instance() {
  protobuf_InitDefaults_channelsdk_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<sdkDialToBroadcasterAck> sdkDialToBroadcasterAck_default_instance_;

sdkDialToBroadcasterAck* sdkDialToBroadcasterAck::New(::google::protobuf::Arena* arena) const {
  sdkDialToBroadcasterAck* n = new sdkDialToBroadcasterAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void sdkDialToBroadcasterAck::Clear() {
// @@protoc_insertion_point(message_clear_start:batprotobuf.sdkDialToBroadcasterAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(sdkDialToBroadcasterAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<sdkDialToBroadcasterAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(broadcasterstate_, insufficientbalance_);
  if (GetArenaNoVirtual() == NULL && ch_ != NULL) delete ch_;
  ch_ = NULL;
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uniqid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool sdkDialToBroadcasterAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:batprotobuf.sdkDialToBroadcasterAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .batprotobuf.channel ch = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "batprotobuf.sdkDialToBroadcasterAck.token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_uniqId;
        break;
      }

      // optional string uniqId = 3;
      case 3: {
        if (tag == 26) {
         parse_uniqId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uniqid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uniqid().data(), this->uniqid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "batprotobuf.sdkDialToBroadcasterAck.uniqId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_broadcasterState;
        break;
      }

      // optional uint32 broadcasterState = 4;
      case 4: {
        if (tag == 32) {
         parse_broadcasterState:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &broadcasterstate_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_insufficientBalance;
        break;
      }

      // optional bool insufficientBalance = 5;
      case 5: {
        if (tag == 40) {
         parse_insufficientBalance:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &insufficientbalance_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:batprotobuf.sdkDialToBroadcasterAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:batprotobuf.sdkDialToBroadcasterAck)
  return false;
#undef DO_
}

void sdkDialToBroadcasterAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:batprotobuf.sdkDialToBroadcasterAck)
  // optional .batprotobuf.channel ch = 1;
  if (this->has_ch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->ch_, output);
  }

  // optional string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "batprotobuf.sdkDialToBroadcasterAck.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // optional string uniqId = 3;
  if (this->uniqid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uniqid().data(), this->uniqid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "batprotobuf.sdkDialToBroadcasterAck.uniqId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->uniqid(), output);
  }

  // optional uint32 broadcasterState = 4;
  if (this->broadcasterstate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->broadcasterstate(), output);
  }

  // optional bool insufficientBalance = 5;
  if (this->insufficientbalance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->insufficientbalance(), output);
  }

  // @@protoc_insertion_point(serialize_end:batprotobuf.sdkDialToBroadcasterAck)
}

::google::protobuf::uint8* sdkDialToBroadcasterAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:batprotobuf.sdkDialToBroadcasterAck)
  // optional .batprotobuf.channel ch = 1;
  if (this->has_ch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->ch_, false, target);
  }

  // optional string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "batprotobuf.sdkDialToBroadcasterAck.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // optional string uniqId = 3;
  if (this->uniqid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uniqid().data(), this->uniqid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "batprotobuf.sdkDialToBroadcasterAck.uniqId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uniqid(), target);
  }

  // optional uint32 broadcasterState = 4;
  if (this->broadcasterstate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->broadcasterstate(), target);
  }

  // optional bool insufficientBalance = 5;
  if (this->insufficientbalance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->insufficientbalance(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:batprotobuf.sdkDialToBroadcasterAck)
  return target;
}

size_t sdkDialToBroadcasterAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:batprotobuf.sdkDialToBroadcasterAck)
  size_t total_size = 0;

  // optional .batprotobuf.channel ch = 1;
  if (this->has_ch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ch_);
  }

  // optional string token = 2;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // optional string uniqId = 3;
  if (this->uniqid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uniqid());
  }

  // optional uint32 broadcasterState = 4;
  if (this->broadcasterstate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->broadcasterstate());
  }

  // optional bool insufficientBalance = 5;
  if (this->insufficientbalance() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sdkDialToBroadcasterAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:batprotobuf.sdkDialToBroadcasterAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const sdkDialToBroadcasterAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const sdkDialToBroadcasterAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:batprotobuf.sdkDialToBroadcasterAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:batprotobuf.sdkDialToBroadcasterAck)
    UnsafeMergeFrom(*source);
  }
}

void sdkDialToBroadcasterAck::MergeFrom(const sdkDialToBroadcasterAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:batprotobuf.sdkDialToBroadcasterAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void sdkDialToBroadcasterAck::UnsafeMergeFrom(const sdkDialToBroadcasterAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_ch()) {
    mutable_ch()->::batprotobuf::channel::MergeFrom(from.ch());
  }
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.uniqid().size() > 0) {

    uniqid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uniqid_);
  }
  if (from.broadcasterstate() != 0) {
    set_broadcasterstate(from.broadcasterstate());
  }
  if (from.insufficientbalance() != 0) {
    set_insufficientbalance(from.insufficientbalance());
  }
}

void sdkDialToBroadcasterAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:batprotobuf.sdkDialToBroadcasterAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sdkDialToBroadcasterAck::CopyFrom(const sdkDialToBroadcasterAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:batprotobuf.sdkDialToBroadcasterAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool sdkDialToBroadcasterAck::IsInitialized() const {

  return true;
}

void sdkDialToBroadcasterAck::Swap(sdkDialToBroadcasterAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sdkDialToBroadcasterAck::InternalSwap(sdkDialToBroadcasterAck* other) {
  std::swap(ch_, other->ch_);
  token_.Swap(&other->token_);
  uniqid_.Swap(&other->uniqid_);
  std::swap(broadcasterstate_, other->broadcasterstate_);
  std::swap(insufficientbalance_, other->insufficientbalance_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata sdkDialToBroadcasterAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sdkDialToBroadcasterAck_descriptor_;
  metadata.reflection = sdkDialToBroadcasterAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// sdkDialToBroadcasterAck

// optional .batprotobuf.channel ch = 1;
bool sdkDialToBroadcasterAck::has_ch() const {
  return this != internal_default_instance() && ch_ != NULL;
}
void sdkDialToBroadcasterAck::clear_ch() {
  if (GetArenaNoVirtual() == NULL && ch_ != NULL) delete ch_;
  ch_ = NULL;
}
const ::batprotobuf::channel& sdkDialToBroadcasterAck::ch() const {
  // @@protoc_insertion_point(field_get:batprotobuf.sdkDialToBroadcasterAck.ch)
  return ch_ != NULL ? *ch_
                         : *::batprotobuf::channel::internal_default_instance();
}
::batprotobuf::channel* sdkDialToBroadcasterAck::mutable_ch() {
  
  if (ch_ == NULL) {
    ch_ = new ::batprotobuf::channel;
  }
  // @@protoc_insertion_point(field_mutable:batprotobuf.sdkDialToBroadcasterAck.ch)
  return ch_;
}
::batprotobuf::channel* sdkDialToBroadcasterAck::release_ch() {
  // @@protoc_insertion_point(field_release:batprotobuf.sdkDialToBroadcasterAck.ch)
  
  ::batprotobuf::channel* temp = ch_;
  ch_ = NULL;
  return temp;
}
void sdkDialToBroadcasterAck::set_allocated_ch(::batprotobuf::channel* ch) {
  delete ch_;
  ch_ = ch;
  if (ch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:batprotobuf.sdkDialToBroadcasterAck.ch)
}

// optional string token = 2;
void sdkDialToBroadcasterAck::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& sdkDialToBroadcasterAck::token() const {
  // @@protoc_insertion_point(field_get:batprotobuf.sdkDialToBroadcasterAck.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void sdkDialToBroadcasterAck::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:batprotobuf.sdkDialToBroadcasterAck.token)
}
void sdkDialToBroadcasterAck::set_token(const char* value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:batprotobuf.sdkDialToBroadcasterAck.token)
}
void sdkDialToBroadcasterAck::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:batprotobuf.sdkDialToBroadcasterAck.token)
}
::std::string* sdkDialToBroadcasterAck::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:batprotobuf.sdkDialToBroadcasterAck.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* sdkDialToBroadcasterAck::release_token() {
  // @@protoc_insertion_point(field_release:batprotobuf.sdkDialToBroadcasterAck.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void sdkDialToBroadcasterAck::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:batprotobuf.sdkDialToBroadcasterAck.token)
}

// optional string uniqId = 3;
void sdkDialToBroadcasterAck::clear_uniqid() {
  uniqid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& sdkDialToBroadcasterAck::uniqid() const {
  // @@protoc_insertion_point(field_get:batprotobuf.sdkDialToBroadcasterAck.uniqId)
  return uniqid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void sdkDialToBroadcasterAck::set_uniqid(const ::std::string& value) {
  
  uniqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:batprotobuf.sdkDialToBroadcasterAck.uniqId)
}
void sdkDialToBroadcasterAck::set_uniqid(const char* value) {
  
  uniqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:batprotobuf.sdkDialToBroadcasterAck.uniqId)
}
void sdkDialToBroadcasterAck::set_uniqid(const char* value, size_t size) {
  
  uniqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:batprotobuf.sdkDialToBroadcasterAck.uniqId)
}
::std::string* sdkDialToBroadcasterAck::mutable_uniqid() {
  
  // @@protoc_insertion_point(field_mutable:batprotobuf.sdkDialToBroadcasterAck.uniqId)
  return uniqid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* sdkDialToBroadcasterAck::release_uniqid() {
  // @@protoc_insertion_point(field_release:batprotobuf.sdkDialToBroadcasterAck.uniqId)
  
  return uniqid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void sdkDialToBroadcasterAck::set_allocated_uniqid(::std::string* uniqid) {
  if (uniqid != NULL) {
    
  } else {
    
  }
  uniqid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uniqid);
  // @@protoc_insertion_point(field_set_allocated:batprotobuf.sdkDialToBroadcasterAck.uniqId)
}

// optional uint32 broadcasterState = 4;
void sdkDialToBroadcasterAck::clear_broadcasterstate() {
  broadcasterstate_ = 0u;
}
::google::protobuf::uint32 sdkDialToBroadcasterAck::broadcasterstate() const {
  // @@protoc_insertion_point(field_get:batprotobuf.sdkDialToBroadcasterAck.broadcasterState)
  return broadcasterstate_;
}
void sdkDialToBroadcasterAck::set_broadcasterstate(::google::protobuf::uint32 value) {
  
  broadcasterstate_ = value;
  // @@protoc_insertion_point(field_set:batprotobuf.sdkDialToBroadcasterAck.broadcasterState)
}

// optional bool insufficientBalance = 5;
void sdkDialToBroadcasterAck::clear_insufficientbalance() {
  insufficientbalance_ = false;
}
bool sdkDialToBroadcasterAck::insufficientbalance() const {
  // @@protoc_insertion_point(field_get:batprotobuf.sdkDialToBroadcasterAck.insufficientBalance)
  return insufficientbalance_;
}
void sdkDialToBroadcasterAck::set_insufficientbalance(bool value) {
  
  insufficientbalance_ = value;
  // @@protoc_insertion_point(field_set:batprotobuf.sdkDialToBroadcasterAck.insufficientBalance)
}

inline const sdkDialToBroadcasterAck* sdkDialToBroadcasterAck::internal_default_instance() {
  return &sdkDialToBroadcasterAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int channel::kIdFieldNumber;
const int channel::kCategoryFieldNumber;
const int channel::kStartTsFieldNumber;
const int channel::kEndTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

channel::channel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_channelsdk_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:batprotobuf.channel)
}

void channel::InitAsDefaultInstance() {
}

channel::channel(const channel& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:batprotobuf.channel)
}

void channel::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&startts_, 0, reinterpret_cast<char*>(&category_) -
    reinterpret_cast<char*>(&startts_) + sizeof(category_));
  _cached_size_ = 0;
}

channel::~channel() {
  // @@protoc_insertion_point(destructor:batprotobuf.channel)
  SharedDtor();
}

void channel::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void channel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* channel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return channel_descriptor_;
}

const channel& channel::default_instance() {
  protobuf_InitDefaults_channelsdk_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<channel> channel_default_instance_;

channel* channel::New(::google::protobuf::Arena* arena) const {
  channel* n = new channel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void channel::Clear() {
// @@protoc_insertion_point(message_clear_start:batprotobuf.channel)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(channel, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<channel*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(startts_, category_);
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool channel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:batprotobuf.channel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "batprotobuf.channel.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_category;
        break;
      }

      // optional uint32 category = 2;
      case 2: {
        if (tag == 16) {
         parse_category:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &category_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_startTs;
        break;
      }

      // optional int64 startTs = 3;
      case 3: {
        if (tag == 24) {
         parse_startTs:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &startts_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_endTs;
        break;
      }

      // optional int64 endTs = 4;
      case 4: {
        if (tag == 32) {
         parse_endTs:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endts_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:batprotobuf.channel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:batprotobuf.channel)
  return false;
#undef DO_
}

void channel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:batprotobuf.channel)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "batprotobuf.channel.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional uint32 category = 2;
  if (this->category() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->category(), output);
  }

  // optional int64 startTs = 3;
  if (this->startts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->startts(), output);
  }

  // optional int64 endTs = 4;
  if (this->endts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->endts(), output);
  }

  // @@protoc_insertion_point(serialize_end:batprotobuf.channel)
}

::google::protobuf::uint8* channel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:batprotobuf.channel)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "batprotobuf.channel.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional uint32 category = 2;
  if (this->category() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->category(), target);
  }

  // optional int64 startTs = 3;
  if (this->startts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->startts(), target);
  }

  // optional int64 endTs = 4;
  if (this->endts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->endts(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:batprotobuf.channel)
  return target;
}

size_t channel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:batprotobuf.channel)
  size_t total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional uint32 category = 2;
  if (this->category() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->category());
  }

  // optional int64 startTs = 3;
  if (this->startts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->startts());
  }

  // optional int64 endTs = 4;
  if (this->endts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->endts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void channel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:batprotobuf.channel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const channel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const channel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:batprotobuf.channel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:batprotobuf.channel)
    UnsafeMergeFrom(*source);
  }
}

void channel::MergeFrom(const channel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:batprotobuf.channel)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void channel::UnsafeMergeFrom(const channel& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.category() != 0) {
    set_category(from.category());
  }
  if (from.startts() != 0) {
    set_startts(from.startts());
  }
  if (from.endts() != 0) {
    set_endts(from.endts());
  }
}

void channel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:batprotobuf.channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void channel::CopyFrom(const channel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:batprotobuf.channel)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool channel::IsInitialized() const {

  return true;
}

void channel::Swap(channel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void channel::InternalSwap(channel* other) {
  id_.Swap(&other->id_);
  std::swap(category_, other->category_);
  std::swap(startts_, other->startts_);
  std::swap(endts_, other->endts_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata channel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = channel_descriptor_;
  metadata.reflection = channel_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// channel

// optional string id = 1;
void channel::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& channel::id() const {
  // @@protoc_insertion_point(field_get:batprotobuf.channel.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void channel::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:batprotobuf.channel.id)
}
void channel::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:batprotobuf.channel.id)
}
void channel::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:batprotobuf.channel.id)
}
::std::string* channel::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:batprotobuf.channel.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* channel::release_id() {
  // @@protoc_insertion_point(field_release:batprotobuf.channel.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void channel::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:batprotobuf.channel.id)
}

// optional uint32 category = 2;
void channel::clear_category() {
  category_ = 0u;
}
::google::protobuf::uint32 channel::category() const {
  // @@protoc_insertion_point(field_get:batprotobuf.channel.category)
  return category_;
}
void channel::set_category(::google::protobuf::uint32 value) {
  
  category_ = value;
  // @@protoc_insertion_point(field_set:batprotobuf.channel.category)
}

// optional int64 startTs = 3;
void channel::clear_startts() {
  startts_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 channel::startts() const {
  // @@protoc_insertion_point(field_get:batprotobuf.channel.startTs)
  return startts_;
}
void channel::set_startts(::google::protobuf::int64 value) {
  
  startts_ = value;
  // @@protoc_insertion_point(field_set:batprotobuf.channel.startTs)
}

// optional int64 endTs = 4;
void channel::clear_endts() {
  endts_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 channel::endts() const {
  // @@protoc_insertion_point(field_get:batprotobuf.channel.endTs)
  return endts_;
}
void channel::set_endts(::google::protobuf::int64 value) {
  
  endts_ = value;
  // @@protoc_insertion_point(field_set:batprotobuf.channel.endTs)
}

inline const channel* channel::internal_default_instance() {
  return &channel_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int sdkChannelHistoryReq::kPageFieldNumber;
const int sdkChannelHistoryReq::kLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sdkChannelHistoryReq::sdkChannelHistoryReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_channelsdk_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:batprotobuf.sdkChannelHistoryReq)
}

void sdkChannelHistoryReq::InitAsDefaultInstance() {
}

sdkChannelHistoryReq::sdkChannelHistoryReq(const sdkChannelHistoryReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:batprotobuf.sdkChannelHistoryReq)
}

void sdkChannelHistoryReq::SharedCtor() {
  ::memset(&page_, 0, reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&page_) + sizeof(limit_));
  _cached_size_ = 0;
}

sdkChannelHistoryReq::~sdkChannelHistoryReq() {
  // @@protoc_insertion_point(destructor:batprotobuf.sdkChannelHistoryReq)
  SharedDtor();
}

void sdkChannelHistoryReq::SharedDtor() {
}

void sdkChannelHistoryReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sdkChannelHistoryReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sdkChannelHistoryReq_descriptor_;
}

const sdkChannelHistoryReq& sdkChannelHistoryReq::default_instance() {
  protobuf_InitDefaults_channelsdk_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<sdkChannelHistoryReq> sdkChannelHistoryReq_default_instance_;

sdkChannelHistoryReq* sdkChannelHistoryReq::New(::google::protobuf::Arena* arena) const {
  sdkChannelHistoryReq* n = new sdkChannelHistoryReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void sdkChannelHistoryReq::Clear() {
// @@protoc_insertion_point(message_clear_start:batprotobuf.sdkChannelHistoryReq)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(sdkChannelHistoryReq, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<sdkChannelHistoryReq*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(page_, limit_);

#undef ZR_HELPER_
#undef ZR_

}

bool sdkChannelHistoryReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:batprotobuf.sdkChannelHistoryReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 page = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_limit;
        break;
      }

      // optional uint32 limit = 2;
      case 2: {
        if (tag == 16) {
         parse_limit:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:batprotobuf.sdkChannelHistoryReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:batprotobuf.sdkChannelHistoryReq)
  return false;
#undef DO_
}

void sdkChannelHistoryReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:batprotobuf.sdkChannelHistoryReq)
  // optional uint32 page = 1;
  if (this->page() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->page(), output);
  }

  // optional uint32 limit = 2;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  // @@protoc_insertion_point(serialize_end:batprotobuf.sdkChannelHistoryReq)
}

::google::protobuf::uint8* sdkChannelHistoryReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:batprotobuf.sdkChannelHistoryReq)
  // optional uint32 page = 1;
  if (this->page() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->page(), target);
  }

  // optional uint32 limit = 2;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:batprotobuf.sdkChannelHistoryReq)
  return target;
}

size_t sdkChannelHistoryReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:batprotobuf.sdkChannelHistoryReq)
  size_t total_size = 0;

  // optional uint32 page = 1;
  if (this->page() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->page());
  }

  // optional uint32 limit = 2;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sdkChannelHistoryReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:batprotobuf.sdkChannelHistoryReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const sdkChannelHistoryReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const sdkChannelHistoryReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:batprotobuf.sdkChannelHistoryReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:batprotobuf.sdkChannelHistoryReq)
    UnsafeMergeFrom(*source);
  }
}

void sdkChannelHistoryReq::MergeFrom(const sdkChannelHistoryReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:batprotobuf.sdkChannelHistoryReq)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void sdkChannelHistoryReq::UnsafeMergeFrom(const sdkChannelHistoryReq& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.page() != 0) {
    set_page(from.page());
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void sdkChannelHistoryReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:batprotobuf.sdkChannelHistoryReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sdkChannelHistoryReq::CopyFrom(const sdkChannelHistoryReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:batprotobuf.sdkChannelHistoryReq)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool sdkChannelHistoryReq::IsInitialized() const {

  return true;
}

void sdkChannelHistoryReq::Swap(sdkChannelHistoryReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sdkChannelHistoryReq::InternalSwap(sdkChannelHistoryReq* other) {
  std::swap(page_, other->page_);
  std::swap(limit_, other->limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata sdkChannelHistoryReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sdkChannelHistoryReq_descriptor_;
  metadata.reflection = sdkChannelHistoryReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// sdkChannelHistoryReq

// optional uint32 page = 1;
void sdkChannelHistoryReq::clear_page() {
  page_ = 0u;
}
::google::protobuf::uint32 sdkChannelHistoryReq::page() const {
  // @@protoc_insertion_point(field_get:batprotobuf.sdkChannelHistoryReq.page)
  return page_;
}
void sdkChannelHistoryReq::set_page(::google::protobuf::uint32 value) {
  
  page_ = value;
  // @@protoc_insertion_point(field_set:batprotobuf.sdkChannelHistoryReq.page)
}

// optional uint32 limit = 2;
void sdkChannelHistoryReq::clear_limit() {
  limit_ = 0u;
}
::google::protobuf::uint32 sdkChannelHistoryReq::limit() const {
  // @@protoc_insertion_point(field_get:batprotobuf.sdkChannelHistoryReq.limit)
  return limit_;
}
void sdkChannelHistoryReq::set_limit(::google::protobuf::uint32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:batprotobuf.sdkChannelHistoryReq.limit)
}

inline const sdkChannelHistoryReq* sdkChannelHistoryReq::internal_default_instance() {
  return &sdkChannelHistoryReq_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int sdkChannelHistoryRes::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sdkChannelHistoryRes::sdkChannelHistoryRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_channelsdk_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:batprotobuf.sdkChannelHistoryRes)
}

void sdkChannelHistoryRes::InitAsDefaultInstance() {
}

sdkChannelHistoryRes::sdkChannelHistoryRes(const sdkChannelHistoryRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:batprotobuf.sdkChannelHistoryRes)
}

void sdkChannelHistoryRes::SharedCtor() {
  _cached_size_ = 0;
}

sdkChannelHistoryRes::~sdkChannelHistoryRes() {
  // @@protoc_insertion_point(destructor:batprotobuf.sdkChannelHistoryRes)
  SharedDtor();
}

void sdkChannelHistoryRes::SharedDtor() {
}

void sdkChannelHistoryRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sdkChannelHistoryRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sdkChannelHistoryRes_descriptor_;
}

const sdkChannelHistoryRes& sdkChannelHistoryRes::default_instance() {
  protobuf_InitDefaults_channelsdk_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<sdkChannelHistoryRes> sdkChannelHistoryRes_default_instance_;

sdkChannelHistoryRes* sdkChannelHistoryRes::New(::google::protobuf::Arena* arena) const {
  sdkChannelHistoryRes* n = new sdkChannelHistoryRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void sdkChannelHistoryRes::Clear() {
// @@protoc_insertion_point(message_clear_start:batprotobuf.sdkChannelHistoryRes)
  list_.Clear();
}

bool sdkChannelHistoryRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:batprotobuf.sdkChannelHistoryRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .batprotobuf.channelHistory list = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:batprotobuf.sdkChannelHistoryRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:batprotobuf.sdkChannelHistoryRes)
  return false;
#undef DO_
}

void sdkChannelHistoryRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:batprotobuf.sdkChannelHistoryRes)
  // repeated .batprotobuf.channelHistory list = 1;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // @@protoc_insertion_point(serialize_end:batprotobuf.sdkChannelHistoryRes)
}

::google::protobuf::uint8* sdkChannelHistoryRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:batprotobuf.sdkChannelHistoryRes)
  // repeated .batprotobuf.channelHistory list = 1;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->list(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:batprotobuf.sdkChannelHistoryRes)
  return target;
}

size_t sdkChannelHistoryRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:batprotobuf.sdkChannelHistoryRes)
  size_t total_size = 0;

  // repeated .batprotobuf.channelHistory list = 1;
  {
    unsigned int count = this->list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sdkChannelHistoryRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:batprotobuf.sdkChannelHistoryRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const sdkChannelHistoryRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const sdkChannelHistoryRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:batprotobuf.sdkChannelHistoryRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:batprotobuf.sdkChannelHistoryRes)
    UnsafeMergeFrom(*source);
  }
}

void sdkChannelHistoryRes::MergeFrom(const sdkChannelHistoryRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:batprotobuf.sdkChannelHistoryRes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void sdkChannelHistoryRes::UnsafeMergeFrom(const sdkChannelHistoryRes& from) {
  GOOGLE_DCHECK(&from != this);
  list_.MergeFrom(from.list_);
}

void sdkChannelHistoryRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:batprotobuf.sdkChannelHistoryRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sdkChannelHistoryRes::CopyFrom(const sdkChannelHistoryRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:batprotobuf.sdkChannelHistoryRes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool sdkChannelHistoryRes::IsInitialized() const {

  return true;
}

void sdkChannelHistoryRes::Swap(sdkChannelHistoryRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sdkChannelHistoryRes::InternalSwap(sdkChannelHistoryRes* other) {
  list_.UnsafeArenaSwap(&other->list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata sdkChannelHistoryRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sdkChannelHistoryRes_descriptor_;
  metadata.reflection = sdkChannelHistoryRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// sdkChannelHistoryRes

// repeated .batprotobuf.channelHistory list = 1;
int sdkChannelHistoryRes::list_size() const {
  return list_.size();
}
void sdkChannelHistoryRes::clear_list() {
  list_.Clear();
}
const ::batprotobuf::channelHistory& sdkChannelHistoryRes::list(int index) const {
  // @@protoc_insertion_point(field_get:batprotobuf.sdkChannelHistoryRes.list)
  return list_.Get(index);
}
::batprotobuf::channelHistory* sdkChannelHistoryRes::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:batprotobuf.sdkChannelHistoryRes.list)
  return list_.Mutable(index);
}
::batprotobuf::channelHistory* sdkChannelHistoryRes::add_list() {
  // @@protoc_insertion_point(field_add:batprotobuf.sdkChannelHistoryRes.list)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::batprotobuf::channelHistory >*
sdkChannelHistoryRes::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:batprotobuf.sdkChannelHistoryRes.list)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::batprotobuf::channelHistory >&
sdkChannelHistoryRes::list() const {
  // @@protoc_insertion_point(field_list:batprotobuf.sdkChannelHistoryRes.list)
  return list_;
}

inline const sdkChannelHistoryRes* sdkChannelHistoryRes::internal_default_instance() {
  return &sdkChannelHistoryRes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int channelHistory::kHistoryIdFieldNumber;
const int channelHistory::kChannelIdFieldNumber;
const int channelHistory::kSelfIdFieldNumber;
const int channelHistory::kOtherIdFieldNumber;
const int channelHistory::kOtherNameFieldNumber;
const int channelHistory::kCreateTimeFieldNumber;
const int channelHistory::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

channelHistory::channelHistory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_channelsdk_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:batprotobuf.channelHistory)
}

void channelHistory::InitAsDefaultInstance() {
}

channelHistory::channelHistory(const channelHistory& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:batprotobuf.channelHistory)
}

void channelHistory::SharedCtor() {
  othername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&channelid_, 0, reinterpret_cast<char*>(&createtime_) -
    reinterpret_cast<char*>(&channelid_) + sizeof(createtime_));
  _cached_size_ = 0;
}

channelHistory::~channelHistory() {
  // @@protoc_insertion_point(destructor:batprotobuf.channelHistory)
  SharedDtor();
}

void channelHistory::SharedDtor() {
  othername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void channelHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* channelHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return channelHistory_descriptor_;
}

const channelHistory& channelHistory::default_instance() {
  protobuf_InitDefaults_channelsdk_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<channelHistory> channelHistory_default_instance_;

channelHistory* channelHistory::New(::google::protobuf::Arena* arena) const {
  channelHistory* n = new channelHistory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void channelHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:batprotobuf.channelHistory)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(channelHistory, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<channelHistory*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(channelid_, createtime_);
  othername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool channelHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:batprotobuf.channelHistory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 historyId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &historyid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_channelId;
        break;
      }

      // optional int64 channelId = 2;
      case 2: {
        if (tag == 16) {
         parse_channelId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &channelid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_selfId;
        break;
      }

      // optional uint32 selfId = 3;
      case 3: {
        if (tag == 24) {
         parse_selfId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selfid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_otherId;
        break;
      }

      // optional uint32 otherId = 4;
      case 4: {
        if (tag == 32) {
         parse_otherId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &otherid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_otherName;
        break;
      }

      // optional string otherName = 5;
      case 5: {
        if (tag == 42) {
         parse_otherName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_othername()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->othername().data(), this->othername().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "batprotobuf.channelHistory.otherName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_createTime;
        break;
      }

      // optional int64 createTime = 6;
      case 6: {
        if (tag == 48) {
         parse_createTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_duration;
        break;
      }

      // optional uint32 duration = 7;
      case 7: {
        if (tag == 56) {
         parse_duration:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:batprotobuf.channelHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:batprotobuf.channelHistory)
  return false;
#undef DO_
}

void channelHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:batprotobuf.channelHistory)
  // optional uint32 historyId = 1;
  if (this->historyid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->historyid(), output);
  }

  // optional int64 channelId = 2;
  if (this->channelid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->channelid(), output);
  }

  // optional uint32 selfId = 3;
  if (this->selfid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->selfid(), output);
  }

  // optional uint32 otherId = 4;
  if (this->otherid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->otherid(), output);
  }

  // optional string otherName = 5;
  if (this->othername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->othername().data(), this->othername().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "batprotobuf.channelHistory.otherName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->othername(), output);
  }

  // optional int64 createTime = 6;
  if (this->createtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->createtime(), output);
  }

  // optional uint32 duration = 7;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->duration(), output);
  }

  // @@protoc_insertion_point(serialize_end:batprotobuf.channelHistory)
}

::google::protobuf::uint8* channelHistory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:batprotobuf.channelHistory)
  // optional uint32 historyId = 1;
  if (this->historyid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->historyid(), target);
  }

  // optional int64 channelId = 2;
  if (this->channelid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->channelid(), target);
  }

  // optional uint32 selfId = 3;
  if (this->selfid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->selfid(), target);
  }

  // optional uint32 otherId = 4;
  if (this->otherid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->otherid(), target);
  }

  // optional string otherName = 5;
  if (this->othername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->othername().data(), this->othername().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "batprotobuf.channelHistory.otherName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->othername(), target);
  }

  // optional int64 createTime = 6;
  if (this->createtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->createtime(), target);
  }

  // optional uint32 duration = 7;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->duration(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:batprotobuf.channelHistory)
  return target;
}

size_t channelHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:batprotobuf.channelHistory)
  size_t total_size = 0;

  // optional uint32 historyId = 1;
  if (this->historyid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->historyid());
  }

  // optional int64 channelId = 2;
  if (this->channelid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->channelid());
  }

  // optional uint32 selfId = 3;
  if (this->selfid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->selfid());
  }

  // optional uint32 otherId = 4;
  if (this->otherid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->otherid());
  }

  // optional string otherName = 5;
  if (this->othername().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->othername());
  }

  // optional int64 createTime = 6;
  if (this->createtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->createtime());
  }

  // optional uint32 duration = 7;
  if (this->duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->duration());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void channelHistory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:batprotobuf.channelHistory)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const channelHistory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const channelHistory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:batprotobuf.channelHistory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:batprotobuf.channelHistory)
    UnsafeMergeFrom(*source);
  }
}

void channelHistory::MergeFrom(const channelHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:batprotobuf.channelHistory)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void channelHistory::UnsafeMergeFrom(const channelHistory& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.historyid() != 0) {
    set_historyid(from.historyid());
  }
  if (from.channelid() != 0) {
    set_channelid(from.channelid());
  }
  if (from.selfid() != 0) {
    set_selfid(from.selfid());
  }
  if (from.otherid() != 0) {
    set_otherid(from.otherid());
  }
  if (from.othername().size() > 0) {

    othername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.othername_);
  }
  if (from.createtime() != 0) {
    set_createtime(from.createtime());
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
}

void channelHistory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:batprotobuf.channelHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void channelHistory::CopyFrom(const channelHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:batprotobuf.channelHistory)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool channelHistory::IsInitialized() const {

  return true;
}

void channelHistory::Swap(channelHistory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void channelHistory::InternalSwap(channelHistory* other) {
  std::swap(historyid_, other->historyid_);
  std::swap(channelid_, other->channelid_);
  std::swap(selfid_, other->selfid_);
  std::swap(otherid_, other->otherid_);
  othername_.Swap(&other->othername_);
  std::swap(createtime_, other->createtime_);
  std::swap(duration_, other->duration_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata channelHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = channelHistory_descriptor_;
  metadata.reflection = channelHistory_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// channelHistory

// optional uint32 historyId = 1;
void channelHistory::clear_historyid() {
  historyid_ = 0u;
}
::google::protobuf::uint32 channelHistory::historyid() const {
  // @@protoc_insertion_point(field_get:batprotobuf.channelHistory.historyId)
  return historyid_;
}
void channelHistory::set_historyid(::google::protobuf::uint32 value) {
  
  historyid_ = value;
  // @@protoc_insertion_point(field_set:batprotobuf.channelHistory.historyId)
}

// optional int64 channelId = 2;
void channelHistory::clear_channelid() {
  channelid_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 channelHistory::channelid() const {
  // @@protoc_insertion_point(field_get:batprotobuf.channelHistory.channelId)
  return channelid_;
}
void channelHistory::set_channelid(::google::protobuf::int64 value) {
  
  channelid_ = value;
  // @@protoc_insertion_point(field_set:batprotobuf.channelHistory.channelId)
}

// optional uint32 selfId = 3;
void channelHistory::clear_selfid() {
  selfid_ = 0u;
}
::google::protobuf::uint32 channelHistory::selfid() const {
  // @@protoc_insertion_point(field_get:batprotobuf.channelHistory.selfId)
  return selfid_;
}
void channelHistory::set_selfid(::google::protobuf::uint32 value) {
  
  selfid_ = value;
  // @@protoc_insertion_point(field_set:batprotobuf.channelHistory.selfId)
}

// optional uint32 otherId = 4;
void channelHistory::clear_otherid() {
  otherid_ = 0u;
}
::google::protobuf::uint32 channelHistory::otherid() const {
  // @@protoc_insertion_point(field_get:batprotobuf.channelHistory.otherId)
  return otherid_;
}
void channelHistory::set_otherid(::google::protobuf::uint32 value) {
  
  otherid_ = value;
  // @@protoc_insertion_point(field_set:batprotobuf.channelHistory.otherId)
}

// optional string otherName = 5;
void channelHistory::clear_othername() {
  othername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& channelHistory::othername() const {
  // @@protoc_insertion_point(field_get:batprotobuf.channelHistory.otherName)
  return othername_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void channelHistory::set_othername(const ::std::string& value) {
  
  othername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:batprotobuf.channelHistory.otherName)
}
void channelHistory::set_othername(const char* value) {
  
  othername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:batprotobuf.channelHistory.otherName)
}
void channelHistory::set_othername(const char* value, size_t size) {
  
  othername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:batprotobuf.channelHistory.otherName)
}
::std::string* channelHistory::mutable_othername() {
  
  // @@protoc_insertion_point(field_mutable:batprotobuf.channelHistory.otherName)
  return othername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* channelHistory::release_othername() {
  // @@protoc_insertion_point(field_release:batprotobuf.channelHistory.otherName)
  
  return othername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void channelHistory::set_allocated_othername(::std::string* othername) {
  if (othername != NULL) {
    
  } else {
    
  }
  othername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), othername);
  // @@protoc_insertion_point(field_set_allocated:batprotobuf.channelHistory.otherName)
}

// optional int64 createTime = 6;
void channelHistory::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 channelHistory::createtime() const {
  // @@protoc_insertion_point(field_get:batprotobuf.channelHistory.createTime)
  return createtime_;
}
void channelHistory::set_createtime(::google::protobuf::int64 value) {
  
  createtime_ = value;
  // @@protoc_insertion_point(field_set:batprotobuf.channelHistory.createTime)
}

// optional uint32 duration = 7;
void channelHistory::clear_duration() {
  duration_ = 0u;
}
::google::protobuf::uint32 channelHistory::duration() const {
  // @@protoc_insertion_point(field_get:batprotobuf.channelHistory.duration)
  return duration_;
}
void channelHistory::set_duration(::google::protobuf::uint32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:batprotobuf.channelHistory.duration)
}

inline const channelHistory* channelHistory::internal_default_instance() {
  return &channelHistory_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace batprotobuf

// @@protoc_insertion_point(global_scope)
