// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: streaming.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "streaming.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace batprotobuf {

namespace {

const ::google::protobuf::Descriptor* channelStateChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  channelStateChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* channelUserStateChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  channelUserStateChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* ping_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ping_reflection_ = NULL;
const ::google::protobuf::Descriptor* pong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pong_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_streaming_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_streaming_2eproto() {
  protobuf_AddDesc_streaming_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "streaming.proto");
  GOOGLE_CHECK(file != NULL);
  channelStateChange_descriptor_ = file->message_type(0);
  static const int channelStateChange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channelStateChange, ch_),
  };
  channelStateChange_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      channelStateChange_descriptor_,
      channelStateChange::internal_default_instance(),
      channelStateChange_offsets_,
      -1,
      -1,
      -1,
      sizeof(channelStateChange),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channelStateChange, _internal_metadata_));
  channelUserStateChange_descriptor_ = file->message_type(1);
  static const int channelUserStateChange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channelUserStateChange, chu_),
  };
  channelUserStateChange_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      channelUserStateChange_descriptor_,
      channelUserStateChange::internal_default_instance(),
      channelUserStateChange_offsets_,
      -1,
      -1,
      -1,
      sizeof(channelUserStateChange),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channelUserStateChange, _internal_metadata_));
  ping_descriptor_ = file->message_type(2);
  static const int ping_offsets_[1] = {
  };
  ping_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ping_descriptor_,
      ping::internal_default_instance(),
      ping_offsets_,
      -1,
      -1,
      -1,
      sizeof(ping),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ping, _internal_metadata_));
  pong_descriptor_ = file->message_type(3);
  static const int pong_offsets_[1] = {
  };
  pong_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      pong_descriptor_,
      pong::internal_default_instance(),
      pong_offsets_,
      -1,
      -1,
      -1,
      sizeof(pong),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pong, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_streaming_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      channelStateChange_descriptor_, channelStateChange::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      channelUserStateChange_descriptor_, channelUserStateChange::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ping_descriptor_, ping::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      pong_descriptor_, pong::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_streaming_2eproto() {
  channelStateChange_default_instance_.Shutdown();
  delete channelStateChange_reflection_;
  channelUserStateChange_default_instance_.Shutdown();
  delete channelUserStateChange_reflection_;
  ping_default_instance_.Shutdown();
  delete ping_reflection_;
  pong_default_instance_.Shutdown();
  delete pong_reflection_;
}

void protobuf_InitDefaults_streaming_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::batprotobuf::protobuf_InitDefaults_streamingBase_2eproto();
  channelStateChange_default_instance_.DefaultConstruct();
  channelUserStateChange_default_instance_.DefaultConstruct();
  ping_default_instance_.DefaultConstruct();
  pong_default_instance_.DefaultConstruct();
  channelStateChange_default_instance_.get_mutable()->InitAsDefaultInstance();
  channelUserStateChange_default_instance_.get_mutable()->InitAsDefaultInstance();
  ping_default_instance_.get_mutable()->InitAsDefaultInstance();
  pong_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_streaming_2eproto_once_);
void protobuf_InitDefaults_streaming_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_streaming_2eproto_once_,
                 &protobuf_InitDefaults_streaming_2eproto_impl);
}
void protobuf_AddDesc_streaming_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_streaming_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017streaming.proto\022\013batprotobuf\032\023streamin"
    "gBase.proto\"6\n\022channelStateChange\022 \n\002ch\030"
    "\001 \001(\0132\024.batprotobuf.channel\"\?\n\026channelUs"
    "erStateChange\022%\n\003chu\030\001 \001(\0132\030.batprotobuf"
    ".channelUser\"\006\n\004ping\"\006\n\004pongB\rZ\013.;uyujoy"
    "apib\006proto3", 211);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "streaming.proto", &protobuf_RegisterTypes);
  ::batprotobuf::protobuf_AddDesc_streamingBase_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_streaming_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_streaming_2eproto_once_);
void protobuf_AddDesc_streaming_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_streaming_2eproto_once_,
                 &protobuf_AddDesc_streaming_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_streaming_2eproto {
  StaticDescriptorInitializer_streaming_2eproto() {
    protobuf_AddDesc_streaming_2eproto();
  }
} static_descriptor_initializer_streaming_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int channelStateChange::kChFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

channelStateChange::channelStateChange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_streaming_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:batprotobuf.channelStateChange)
}

void channelStateChange::InitAsDefaultInstance() {
  ch_ = const_cast< ::batprotobuf::channel*>(
      ::batprotobuf::channel::internal_default_instance());
}

channelStateChange::channelStateChange(const channelStateChange& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:batprotobuf.channelStateChange)
}

void channelStateChange::SharedCtor() {
  ch_ = NULL;
  _cached_size_ = 0;
}

channelStateChange::~channelStateChange() {
  // @@protoc_insertion_point(destructor:batprotobuf.channelStateChange)
  SharedDtor();
}

void channelStateChange::SharedDtor() {
  if (this != &channelStateChange_default_instance_.get()) {
    delete ch_;
  }
}

void channelStateChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* channelStateChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return channelStateChange_descriptor_;
}

const channelStateChange& channelStateChange::default_instance() {
  protobuf_InitDefaults_streaming_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<channelStateChange> channelStateChange_default_instance_;

channelStateChange* channelStateChange::New(::google::protobuf::Arena* arena) const {
  channelStateChange* n = new channelStateChange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void channelStateChange::Clear() {
// @@protoc_insertion_point(message_clear_start:batprotobuf.channelStateChange)
  if (GetArenaNoVirtual() == NULL && ch_ != NULL) delete ch_;
  ch_ = NULL;
}

bool channelStateChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:batprotobuf.channelStateChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .batprotobuf.channel ch = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:batprotobuf.channelStateChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:batprotobuf.channelStateChange)
  return false;
#undef DO_
}

void channelStateChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:batprotobuf.channelStateChange)
  // optional .batprotobuf.channel ch = 1;
  if (this->has_ch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->ch_, output);
  }

  // @@protoc_insertion_point(serialize_end:batprotobuf.channelStateChange)
}

::google::protobuf::uint8* channelStateChange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:batprotobuf.channelStateChange)
  // optional .batprotobuf.channel ch = 1;
  if (this->has_ch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->ch_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:batprotobuf.channelStateChange)
  return target;
}

size_t channelStateChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:batprotobuf.channelStateChange)
  size_t total_size = 0;

  // optional .batprotobuf.channel ch = 1;
  if (this->has_ch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ch_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void channelStateChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:batprotobuf.channelStateChange)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const channelStateChange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const channelStateChange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:batprotobuf.channelStateChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:batprotobuf.channelStateChange)
    UnsafeMergeFrom(*source);
  }
}

void channelStateChange::MergeFrom(const channelStateChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:batprotobuf.channelStateChange)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void channelStateChange::UnsafeMergeFrom(const channelStateChange& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_ch()) {
    mutable_ch()->::batprotobuf::channel::MergeFrom(from.ch());
  }
}

void channelStateChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:batprotobuf.channelStateChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void channelStateChange::CopyFrom(const channelStateChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:batprotobuf.channelStateChange)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool channelStateChange::IsInitialized() const {

  return true;
}

void channelStateChange::Swap(channelStateChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void channelStateChange::InternalSwap(channelStateChange* other) {
  std::swap(ch_, other->ch_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata channelStateChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = channelStateChange_descriptor_;
  metadata.reflection = channelStateChange_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// channelStateChange

// optional .batprotobuf.channel ch = 1;
bool channelStateChange::has_ch() const {
  return this != internal_default_instance() && ch_ != NULL;
}
void channelStateChange::clear_ch() {
  if (GetArenaNoVirtual() == NULL && ch_ != NULL) delete ch_;
  ch_ = NULL;
}
const ::batprotobuf::channel& channelStateChange::ch() const {
  // @@protoc_insertion_point(field_get:batprotobuf.channelStateChange.ch)
  return ch_ != NULL ? *ch_
                         : *::batprotobuf::channel::internal_default_instance();
}
::batprotobuf::channel* channelStateChange::mutable_ch() {
  
  if (ch_ == NULL) {
    ch_ = new ::batprotobuf::channel;
  }
  // @@protoc_insertion_point(field_mutable:batprotobuf.channelStateChange.ch)
  return ch_;
}
::batprotobuf::channel* channelStateChange::release_ch() {
  // @@protoc_insertion_point(field_release:batprotobuf.channelStateChange.ch)
  
  ::batprotobuf::channel* temp = ch_;
  ch_ = NULL;
  return temp;
}
void channelStateChange::set_allocated_ch(::batprotobuf::channel* ch) {
  delete ch_;
  ch_ = ch;
  if (ch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:batprotobuf.channelStateChange.ch)
}

inline const channelStateChange* channelStateChange::internal_default_instance() {
  return &channelStateChange_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int channelUserStateChange::kChuFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

channelUserStateChange::channelUserStateChange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_streaming_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:batprotobuf.channelUserStateChange)
}

void channelUserStateChange::InitAsDefaultInstance() {
  chu_ = const_cast< ::batprotobuf::channelUser*>(
      ::batprotobuf::channelUser::internal_default_instance());
}

channelUserStateChange::channelUserStateChange(const channelUserStateChange& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:batprotobuf.channelUserStateChange)
}

void channelUserStateChange::SharedCtor() {
  chu_ = NULL;
  _cached_size_ = 0;
}

channelUserStateChange::~channelUserStateChange() {
  // @@protoc_insertion_point(destructor:batprotobuf.channelUserStateChange)
  SharedDtor();
}

void channelUserStateChange::SharedDtor() {
  if (this != &channelUserStateChange_default_instance_.get()) {
    delete chu_;
  }
}

void channelUserStateChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* channelUserStateChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return channelUserStateChange_descriptor_;
}

const channelUserStateChange& channelUserStateChange::default_instance() {
  protobuf_InitDefaults_streaming_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<channelUserStateChange> channelUserStateChange_default_instance_;

channelUserStateChange* channelUserStateChange::New(::google::protobuf::Arena* arena) const {
  channelUserStateChange* n = new channelUserStateChange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void channelUserStateChange::Clear() {
// @@protoc_insertion_point(message_clear_start:batprotobuf.channelUserStateChange)
  if (GetArenaNoVirtual() == NULL && chu_ != NULL) delete chu_;
  chu_ = NULL;
}

bool channelUserStateChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:batprotobuf.channelUserStateChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .batprotobuf.channelUser chu = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chu()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:batprotobuf.channelUserStateChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:batprotobuf.channelUserStateChange)
  return false;
#undef DO_
}

void channelUserStateChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:batprotobuf.channelUserStateChange)
  // optional .batprotobuf.channelUser chu = 1;
  if (this->has_chu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->chu_, output);
  }

  // @@protoc_insertion_point(serialize_end:batprotobuf.channelUserStateChange)
}

::google::protobuf::uint8* channelUserStateChange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:batprotobuf.channelUserStateChange)
  // optional .batprotobuf.channelUser chu = 1;
  if (this->has_chu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->chu_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:batprotobuf.channelUserStateChange)
  return target;
}

size_t channelUserStateChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:batprotobuf.channelUserStateChange)
  size_t total_size = 0;

  // optional .batprotobuf.channelUser chu = 1;
  if (this->has_chu()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->chu_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void channelUserStateChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:batprotobuf.channelUserStateChange)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const channelUserStateChange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const channelUserStateChange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:batprotobuf.channelUserStateChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:batprotobuf.channelUserStateChange)
    UnsafeMergeFrom(*source);
  }
}

void channelUserStateChange::MergeFrom(const channelUserStateChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:batprotobuf.channelUserStateChange)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void channelUserStateChange::UnsafeMergeFrom(const channelUserStateChange& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_chu()) {
    mutable_chu()->::batprotobuf::channelUser::MergeFrom(from.chu());
  }
}

void channelUserStateChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:batprotobuf.channelUserStateChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void channelUserStateChange::CopyFrom(const channelUserStateChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:batprotobuf.channelUserStateChange)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool channelUserStateChange::IsInitialized() const {

  return true;
}

void channelUserStateChange::Swap(channelUserStateChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void channelUserStateChange::InternalSwap(channelUserStateChange* other) {
  std::swap(chu_, other->chu_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata channelUserStateChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = channelUserStateChange_descriptor_;
  metadata.reflection = channelUserStateChange_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// channelUserStateChange

// optional .batprotobuf.channelUser chu = 1;
bool channelUserStateChange::has_chu() const {
  return this != internal_default_instance() && chu_ != NULL;
}
void channelUserStateChange::clear_chu() {
  if (GetArenaNoVirtual() == NULL && chu_ != NULL) delete chu_;
  chu_ = NULL;
}
const ::batprotobuf::channelUser& channelUserStateChange::chu() const {
  // @@protoc_insertion_point(field_get:batprotobuf.channelUserStateChange.chu)
  return chu_ != NULL ? *chu_
                         : *::batprotobuf::channelUser::internal_default_instance();
}
::batprotobuf::channelUser* channelUserStateChange::mutable_chu() {
  
  if (chu_ == NULL) {
    chu_ = new ::batprotobuf::channelUser;
  }
  // @@protoc_insertion_point(field_mutable:batprotobuf.channelUserStateChange.chu)
  return chu_;
}
::batprotobuf::channelUser* channelUserStateChange::release_chu() {
  // @@protoc_insertion_point(field_release:batprotobuf.channelUserStateChange.chu)
  
  ::batprotobuf::channelUser* temp = chu_;
  chu_ = NULL;
  return temp;
}
void channelUserStateChange::set_allocated_chu(::batprotobuf::channelUser* chu) {
  delete chu_;
  chu_ = chu;
  if (chu) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:batprotobuf.channelUserStateChange.chu)
}

inline const channelUserStateChange* channelUserStateChange::internal_default_instance() {
  return &channelUserStateChange_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ping::ping()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_streaming_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:batprotobuf.ping)
}

void ping::InitAsDefaultInstance() {
}

ping::ping(const ping& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:batprotobuf.ping)
}

void ping::SharedCtor() {
  _cached_size_ = 0;
}

ping::~ping() {
  // @@protoc_insertion_point(destructor:batprotobuf.ping)
  SharedDtor();
}

void ping::SharedDtor() {
}

void ping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ping::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ping_descriptor_;
}

const ping& ping::default_instance() {
  protobuf_InitDefaults_streaming_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ping> ping_default_instance_;

ping* ping::New(::google::protobuf::Arena* arena) const {
  ping* n = new ping;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ping::Clear() {
// @@protoc_insertion_point(message_clear_start:batprotobuf.ping)
}

bool ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:batprotobuf.ping)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:batprotobuf.ping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:batprotobuf.ping)
  return false;
#undef DO_
}

void ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:batprotobuf.ping)
  // @@protoc_insertion_point(serialize_end:batprotobuf.ping)
}

::google::protobuf::uint8* ping::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:batprotobuf.ping)
  // @@protoc_insertion_point(serialize_to_array_end:batprotobuf.ping)
  return target;
}

size_t ping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:batprotobuf.ping)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ping::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:batprotobuf.ping)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ping* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ping>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:batprotobuf.ping)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:batprotobuf.ping)
    UnsafeMergeFrom(*source);
  }
}

void ping::MergeFrom(const ping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:batprotobuf.ping)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ping::UnsafeMergeFrom(const ping& from) {
  GOOGLE_DCHECK(&from != this);
}

void ping::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:batprotobuf.ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ping::CopyFrom(const ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:batprotobuf.ping)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ping::IsInitialized() const {

  return true;
}

void ping::Swap(ping* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ping::InternalSwap(ping* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ping::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ping_descriptor_;
  metadata.reflection = ping_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ping

inline const ping* ping::internal_default_instance() {
  return &ping_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

pong::pong()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_streaming_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:batprotobuf.pong)
}

void pong::InitAsDefaultInstance() {
}

pong::pong(const pong& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:batprotobuf.pong)
}

void pong::SharedCtor() {
  _cached_size_ = 0;
}

pong::~pong() {
  // @@protoc_insertion_point(destructor:batprotobuf.pong)
  SharedDtor();
}

void pong::SharedDtor() {
}

void pong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pong_descriptor_;
}

const pong& pong::default_instance() {
  protobuf_InitDefaults_streaming_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<pong> pong_default_instance_;

pong* pong::New(::google::protobuf::Arena* arena) const {
  pong* n = new pong;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void pong::Clear() {
// @@protoc_insertion_point(message_clear_start:batprotobuf.pong)
}

bool pong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:batprotobuf.pong)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:batprotobuf.pong)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:batprotobuf.pong)
  return false;
#undef DO_
}

void pong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:batprotobuf.pong)
  // @@protoc_insertion_point(serialize_end:batprotobuf.pong)
}

::google::protobuf::uint8* pong::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:batprotobuf.pong)
  // @@protoc_insertion_point(serialize_to_array_end:batprotobuf.pong)
  return target;
}

size_t pong::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:batprotobuf.pong)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pong::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:batprotobuf.pong)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const pong* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const pong>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:batprotobuf.pong)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:batprotobuf.pong)
    UnsafeMergeFrom(*source);
  }
}

void pong::MergeFrom(const pong& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:batprotobuf.pong)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void pong::UnsafeMergeFrom(const pong& from) {
  GOOGLE_DCHECK(&from != this);
}

void pong::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:batprotobuf.pong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pong::CopyFrom(const pong& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:batprotobuf.pong)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool pong::IsInitialized() const {

  return true;
}

void pong::Swap(pong* other) {
  if (other == this) return;
  InternalSwap(other);
}
void pong::InternalSwap(pong* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata pong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pong_descriptor_;
  metadata.reflection = pong_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// pong

inline const pong* pong::internal_default_instance() {
  return &pong_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace batprotobuf

// @@protoc_insertion_point(global_scope)
