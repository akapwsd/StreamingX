// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: channelIm.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "channelIm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace uyujoy {
namespace api {
namespace channelim {
namespace frontend {

namespace {

const ::google::protobuf::Descriptor* channelMsgRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  channelMsgRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* channelMsgRecordAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  channelMsgRecordAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* rcvChannelMsgRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rcvChannelMsgRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* getDiffChannelMsgRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  getDiffChannelMsgRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* getDiffChannelMsgRecordAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  getDiffChannelMsgRecordAck_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_channelIm_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_channelIm_2eproto() {
  protobuf_AddDesc_channelIm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "channelIm.proto");
  GOOGLE_CHECK(file != NULL);
  channelMsgRecord_descriptor_ = file->message_type(0);
  static const int channelMsgRecord_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channelMsgRecord, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channelMsgRecord, msgfp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channelMsgRecord, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channelMsgRecord, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channelMsgRecord, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channelMsgRecord, sendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channelMsgRecord, lang_),
  };
  channelMsgRecord_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      channelMsgRecord_descriptor_,
      channelMsgRecord::internal_default_instance(),
      channelMsgRecord_offsets_,
      -1,
      -1,
      -1,
      sizeof(channelMsgRecord),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channelMsgRecord, _internal_metadata_));
  channelMsgRecordAck_descriptor_ = file->message_type(1);
  static const int channelMsgRecordAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channelMsgRecordAck, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channelMsgRecordAck, fp_),
  };
  channelMsgRecordAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      channelMsgRecordAck_descriptor_,
      channelMsgRecordAck::internal_default_instance(),
      channelMsgRecordAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(channelMsgRecordAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channelMsgRecordAck, _internal_metadata_));
  rcvChannelMsgRecord_descriptor_ = file->message_type(2);
  static const int rcvChannelMsgRecord_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rcvChannelMsgRecord, msg_),
  };
  rcvChannelMsgRecord_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rcvChannelMsgRecord_descriptor_,
      rcvChannelMsgRecord::internal_default_instance(),
      rcvChannelMsgRecord_offsets_,
      -1,
      -1,
      -1,
      sizeof(rcvChannelMsgRecord),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rcvChannelMsgRecord, _internal_metadata_));
  getDiffChannelMsgRecord_descriptor_ = file->message_type(3);
  static const int getDiffChannelMsgRecord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getDiffChannelMsgRecord, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getDiffChannelMsgRecord, channelid_),
  };
  getDiffChannelMsgRecord_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      getDiffChannelMsgRecord_descriptor_,
      getDiffChannelMsgRecord::internal_default_instance(),
      getDiffChannelMsgRecord_offsets_,
      -1,
      -1,
      -1,
      sizeof(getDiffChannelMsgRecord),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getDiffChannelMsgRecord, _internal_metadata_));
  getDiffChannelMsgRecordAck_descriptor_ = file->message_type(4);
  static const int getDiffChannelMsgRecordAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getDiffChannelMsgRecordAck, list_),
  };
  getDiffChannelMsgRecordAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      getDiffChannelMsgRecordAck_descriptor_,
      getDiffChannelMsgRecordAck::internal_default_instance(),
      getDiffChannelMsgRecordAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(getDiffChannelMsgRecordAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getDiffChannelMsgRecordAck, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_channelIm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      channelMsgRecord_descriptor_, channelMsgRecord::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      channelMsgRecordAck_descriptor_, channelMsgRecordAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rcvChannelMsgRecord_descriptor_, rcvChannelMsgRecord::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      getDiffChannelMsgRecord_descriptor_, getDiffChannelMsgRecord::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      getDiffChannelMsgRecordAck_descriptor_, getDiffChannelMsgRecordAck::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_channelIm_2eproto() {
  channelMsgRecord_default_instance_.Shutdown();
  delete channelMsgRecord_reflection_;
  channelMsgRecordAck_default_instance_.Shutdown();
  delete channelMsgRecordAck_reflection_;
  rcvChannelMsgRecord_default_instance_.Shutdown();
  delete rcvChannelMsgRecord_reflection_;
  getDiffChannelMsgRecord_default_instance_.Shutdown();
  delete getDiffChannelMsgRecord_reflection_;
  getDiffChannelMsgRecordAck_default_instance_.Shutdown();
  delete getDiffChannelMsgRecordAck_reflection_;
}

void protobuf_InitDefaults_channelIm_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  channelMsgRecord_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  channelMsgRecordAck_default_instance_.DefaultConstruct();
  rcvChannelMsgRecord_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  getDiffChannelMsgRecord_default_instance_.DefaultConstruct();
  getDiffChannelMsgRecordAck_default_instance_.DefaultConstruct();
  channelMsgRecord_default_instance_.get_mutable()->InitAsDefaultInstance();
  channelMsgRecordAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  rcvChannelMsgRecord_default_instance_.get_mutable()->InitAsDefaultInstance();
  getDiffChannelMsgRecord_default_instance_.get_mutable()->InitAsDefaultInstance();
  getDiffChannelMsgRecordAck_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_channelIm_2eproto_once_);
void protobuf_InitDefaults_channelIm_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_channelIm_2eproto_once_,
                 &protobuf_InitDefaults_channelIm_2eproto_impl);
}
void protobuf_AddDesc_channelIm_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_channelIm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017channelIm.proto\022\035uyujoy.api.channelim."
    "frontend\"~\n\020channelMsgRecord\022\r\n\005msgId\030\001 "
    "\001(\r\022\r\n\005msgFp\030\002 \001(\t\022\014\n\004from\030\003 \001(\t\022\021\n\tchan"
    "nelId\030\004 \001(\t\022\013\n\003msg\030\005 \001(\t\022\020\n\010sendTime\030\006 \001"
    "(\003\022\014\n\004lang\030\007 \001(\t\"0\n\023channelMsgRecordAck\022"
    "\r\n\005msgId\030\001 \001(\r\022\n\n\002fp\030\002 \001(\t\"S\n\023rcvChannel"
    "MsgRecord\022<\n\003msg\030\001 \001(\0132/.uyujoy.api.chan"
    "nelim.frontend.channelMsgRecord\";\n\027getDi"
    "ffChannelMsgRecord\022\r\n\005msgId\030\001 \001(\r\022\021\n\tcha"
    "nnelId\030\002 \001(\t\"[\n\032getDiffChannelMsgRecordA"
    "ck\022=\n\004list\030\001 \003(\0132/.uyujoy.api.channelim."
    "frontend.channelMsgRecordB;Z9uyujoy.com/"
    "pass/protogen/api/channelim/frontend;cha"
    "nnelimb\006proto3", 534);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "channelIm.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_channelIm_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_channelIm_2eproto_once_);
void protobuf_AddDesc_channelIm_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_channelIm_2eproto_once_,
                 &protobuf_AddDesc_channelIm_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_channelIm_2eproto {
  StaticDescriptorInitializer_channelIm_2eproto() {
    protobuf_AddDesc_channelIm_2eproto();
  }
} static_descriptor_initializer_channelIm_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int channelMsgRecord::kMsgIdFieldNumber;
const int channelMsgRecord::kMsgFpFieldNumber;
const int channelMsgRecord::kFromFieldNumber;
const int channelMsgRecord::kChannelIdFieldNumber;
const int channelMsgRecord::kMsgFieldNumber;
const int channelMsgRecord::kSendTimeFieldNumber;
const int channelMsgRecord::kLangFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

channelMsgRecord::channelMsgRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_channelIm_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:uyujoy.api.channelim.frontend.channelMsgRecord)
}

void channelMsgRecord::InitAsDefaultInstance() {
}

channelMsgRecord::channelMsgRecord(const channelMsgRecord& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uyujoy.api.channelim.frontend.channelMsgRecord)
}

void channelMsgRecord::SharedCtor() {
  msgfp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channelid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sendtime_, 0, reinterpret_cast<char*>(&msgid_) -
    reinterpret_cast<char*>(&sendtime_) + sizeof(msgid_));
  _cached_size_ = 0;
}

channelMsgRecord::~channelMsgRecord() {
  // @@protoc_insertion_point(destructor:uyujoy.api.channelim.frontend.channelMsgRecord)
  SharedDtor();
}

void channelMsgRecord::SharedDtor() {
  msgfp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channelid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void channelMsgRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* channelMsgRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return channelMsgRecord_descriptor_;
}

const channelMsgRecord& channelMsgRecord::default_instance() {
  protobuf_InitDefaults_channelIm_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<channelMsgRecord> channelMsgRecord_default_instance_;

channelMsgRecord* channelMsgRecord::New(::google::protobuf::Arena* arena) const {
  channelMsgRecord* n = new channelMsgRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void channelMsgRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:uyujoy.api.channelim.frontend.channelMsgRecord)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(channelMsgRecord, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<channelMsgRecord*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(sendtime_, msgid_);
  msgfp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channelid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool channelMsgRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uyujoy.api.channelim.frontend.channelMsgRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 msgId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msgFp;
        break;
      }

      // optional string msgFp = 2;
      case 2: {
        if (tag == 18) {
         parse_msgFp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgfp()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msgfp().data(), this->msgfp().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "uyujoy.api.channelim.frontend.channelMsgRecord.msgFp"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_from;
        break;
      }

      // optional string from = 3;
      case 3: {
        if (tag == 26) {
         parse_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from().data(), this->from().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "uyujoy.api.channelim.frontend.channelMsgRecord.from"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_channelId;
        break;
      }

      // optional string channelId = 4;
      case 4: {
        if (tag == 34) {
         parse_channelId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channelid().data(), this->channelid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "uyujoy.api.channelim.frontend.channelMsgRecord.channelId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_msg;
        break;
      }

      // optional string msg = 5;
      case 5: {
        if (tag == 42) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "uyujoy.api.channelim.frontend.channelMsgRecord.msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sendTime;
        break;
      }

      // optional int64 sendTime = 6;
      case 6: {
        if (tag == 48) {
         parse_sendTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sendtime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_lang;
        break;
      }

      // optional string lang = 7;
      case 7: {
        if (tag == 58) {
         parse_lang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lang()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lang().data(), this->lang().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "uyujoy.api.channelim.frontend.channelMsgRecord.lang"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uyujoy.api.channelim.frontend.channelMsgRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uyujoy.api.channelim.frontend.channelMsgRecord)
  return false;
#undef DO_
}

void channelMsgRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uyujoy.api.channelim.frontend.channelMsgRecord)
  // optional uint32 msgId = 1;
  if (this->msgid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msgid(), output);
  }

  // optional string msgFp = 2;
  if (this->msgfp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msgfp().data(), this->msgfp().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "uyujoy.api.channelim.frontend.channelMsgRecord.msgFp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msgfp(), output);
  }

  // optional string from = 3;
  if (this->from().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "uyujoy.api.channelim.frontend.channelMsgRecord.from");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->from(), output);
  }

  // optional string channelId = 4;
  if (this->channelid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "uyujoy.api.channelim.frontend.channelMsgRecord.channelId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->channelid(), output);
  }

  // optional string msg = 5;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "uyujoy.api.channelim.frontend.channelMsgRecord.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->msg(), output);
  }

  // optional int64 sendTime = 6;
  if (this->sendtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->sendtime(), output);
  }

  // optional string lang = 7;
  if (this->lang().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "uyujoy.api.channelim.frontend.channelMsgRecord.lang");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->lang(), output);
  }

  // @@protoc_insertion_point(serialize_end:uyujoy.api.channelim.frontend.channelMsgRecord)
}

::google::protobuf::uint8* channelMsgRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:uyujoy.api.channelim.frontend.channelMsgRecord)
  // optional uint32 msgId = 1;
  if (this->msgid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msgid(), target);
  }

  // optional string msgFp = 2;
  if (this->msgfp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msgfp().data(), this->msgfp().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "uyujoy.api.channelim.frontend.channelMsgRecord.msgFp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msgfp(), target);
  }

  // optional string from = 3;
  if (this->from().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "uyujoy.api.channelim.frontend.channelMsgRecord.from");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->from(), target);
  }

  // optional string channelId = 4;
  if (this->channelid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "uyujoy.api.channelim.frontend.channelMsgRecord.channelId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->channelid(), target);
  }

  // optional string msg = 5;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "uyujoy.api.channelim.frontend.channelMsgRecord.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->msg(), target);
  }

  // optional int64 sendTime = 6;
  if (this->sendtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->sendtime(), target);
  }

  // optional string lang = 7;
  if (this->lang().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "uyujoy.api.channelim.frontend.channelMsgRecord.lang");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->lang(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uyujoy.api.channelim.frontend.channelMsgRecord)
  return target;
}

size_t channelMsgRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uyujoy.api.channelim.frontend.channelMsgRecord)
  size_t total_size = 0;

  // optional uint32 msgId = 1;
  if (this->msgid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgid());
  }

  // optional string msgFp = 2;
  if (this->msgfp().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msgfp());
  }

  // optional string from = 3;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from());
  }

  // optional string channelId = 4;
  if (this->channelid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channelid());
  }

  // optional string msg = 5;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // optional int64 sendTime = 6;
  if (this->sendtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sendtime());
  }

  // optional string lang = 7;
  if (this->lang().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lang());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void channelMsgRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uyujoy.api.channelim.frontend.channelMsgRecord)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const channelMsgRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const channelMsgRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uyujoy.api.channelim.frontend.channelMsgRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uyujoy.api.channelim.frontend.channelMsgRecord)
    UnsafeMergeFrom(*source);
  }
}

void channelMsgRecord::MergeFrom(const channelMsgRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uyujoy.api.channelim.frontend.channelMsgRecord)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void channelMsgRecord::UnsafeMergeFrom(const channelMsgRecord& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.msgid() != 0) {
    set_msgid(from.msgid());
  }
  if (from.msgfp().size() > 0) {

    msgfp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgfp_);
  }
  if (from.from().size() > 0) {

    from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  if (from.channelid().size() > 0) {

    channelid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channelid_);
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.sendtime() != 0) {
    set_sendtime(from.sendtime());
  }
  if (from.lang().size() > 0) {

    lang_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lang_);
  }
}

void channelMsgRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uyujoy.api.channelim.frontend.channelMsgRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void channelMsgRecord::CopyFrom(const channelMsgRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uyujoy.api.channelim.frontend.channelMsgRecord)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool channelMsgRecord::IsInitialized() const {

  return true;
}

void channelMsgRecord::Swap(channelMsgRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void channelMsgRecord::InternalSwap(channelMsgRecord* other) {
  std::swap(msgid_, other->msgid_);
  msgfp_.Swap(&other->msgfp_);
  from_.Swap(&other->from_);
  channelid_.Swap(&other->channelid_);
  msg_.Swap(&other->msg_);
  std::swap(sendtime_, other->sendtime_);
  lang_.Swap(&other->lang_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata channelMsgRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = channelMsgRecord_descriptor_;
  metadata.reflection = channelMsgRecord_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// channelMsgRecord

// optional uint32 msgId = 1;
void channelMsgRecord::clear_msgid() {
  msgid_ = 0u;
}
::google::protobuf::uint32 channelMsgRecord::msgid() const {
  // @@protoc_insertion_point(field_get:uyujoy.api.channelim.frontend.channelMsgRecord.msgId)
  return msgid_;
}
void channelMsgRecord::set_msgid(::google::protobuf::uint32 value) {
  
  msgid_ = value;
  // @@protoc_insertion_point(field_set:uyujoy.api.channelim.frontend.channelMsgRecord.msgId)
}

// optional string msgFp = 2;
void channelMsgRecord::clear_msgfp() {
  msgfp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& channelMsgRecord::msgfp() const {
  // @@protoc_insertion_point(field_get:uyujoy.api.channelim.frontend.channelMsgRecord.msgFp)
  return msgfp_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void channelMsgRecord::set_msgfp(const ::std::string& value) {
  
  msgfp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:uyujoy.api.channelim.frontend.channelMsgRecord.msgFp)
}
void channelMsgRecord::set_msgfp(const char* value) {
  
  msgfp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:uyujoy.api.channelim.frontend.channelMsgRecord.msgFp)
}
void channelMsgRecord::set_msgfp(const char* value, size_t size) {
  
  msgfp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:uyujoy.api.channelim.frontend.channelMsgRecord.msgFp)
}
::std::string* channelMsgRecord::mutable_msgfp() {
  
  // @@protoc_insertion_point(field_mutable:uyujoy.api.channelim.frontend.channelMsgRecord.msgFp)
  return msgfp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* channelMsgRecord::release_msgfp() {
  // @@protoc_insertion_point(field_release:uyujoy.api.channelim.frontend.channelMsgRecord.msgFp)
  
  return msgfp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void channelMsgRecord::set_allocated_msgfp(::std::string* msgfp) {
  if (msgfp != NULL) {
    
  } else {
    
  }
  msgfp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgfp);
  // @@protoc_insertion_point(field_set_allocated:uyujoy.api.channelim.frontend.channelMsgRecord.msgFp)
}

// optional string from = 3;
void channelMsgRecord::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& channelMsgRecord::from() const {
  // @@protoc_insertion_point(field_get:uyujoy.api.channelim.frontend.channelMsgRecord.from)
  return from_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void channelMsgRecord::set_from(const ::std::string& value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:uyujoy.api.channelim.frontend.channelMsgRecord.from)
}
void channelMsgRecord::set_from(const char* value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:uyujoy.api.channelim.frontend.channelMsgRecord.from)
}
void channelMsgRecord::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:uyujoy.api.channelim.frontend.channelMsgRecord.from)
}
::std::string* channelMsgRecord::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:uyujoy.api.channelim.frontend.channelMsgRecord.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* channelMsgRecord::release_from() {
  // @@protoc_insertion_point(field_release:uyujoy.api.channelim.frontend.channelMsgRecord.from)
  
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void channelMsgRecord::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:uyujoy.api.channelim.frontend.channelMsgRecord.from)
}

// optional string channelId = 4;
void channelMsgRecord::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& channelMsgRecord::channelid() const {
  // @@protoc_insertion_point(field_get:uyujoy.api.channelim.frontend.channelMsgRecord.channelId)
  return channelid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void channelMsgRecord::set_channelid(const ::std::string& value) {
  
  channelid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:uyujoy.api.channelim.frontend.channelMsgRecord.channelId)
}
void channelMsgRecord::set_channelid(const char* value) {
  
  channelid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:uyujoy.api.channelim.frontend.channelMsgRecord.channelId)
}
void channelMsgRecord::set_channelid(const char* value, size_t size) {
  
  channelid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:uyujoy.api.channelim.frontend.channelMsgRecord.channelId)
}
::std::string* channelMsgRecord::mutable_channelid() {
  
  // @@protoc_insertion_point(field_mutable:uyujoy.api.channelim.frontend.channelMsgRecord.channelId)
  return channelid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* channelMsgRecord::release_channelid() {
  // @@protoc_insertion_point(field_release:uyujoy.api.channelim.frontend.channelMsgRecord.channelId)
  
  return channelid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void channelMsgRecord::set_allocated_channelid(::std::string* channelid) {
  if (channelid != NULL) {
    
  } else {
    
  }
  channelid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:uyujoy.api.channelim.frontend.channelMsgRecord.channelId)
}

// optional string msg = 5;
void channelMsgRecord::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& channelMsgRecord::msg() const {
  // @@protoc_insertion_point(field_get:uyujoy.api.channelim.frontend.channelMsgRecord.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void channelMsgRecord::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:uyujoy.api.channelim.frontend.channelMsgRecord.msg)
}
void channelMsgRecord::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:uyujoy.api.channelim.frontend.channelMsgRecord.msg)
}
void channelMsgRecord::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:uyujoy.api.channelim.frontend.channelMsgRecord.msg)
}
::std::string* channelMsgRecord::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:uyujoy.api.channelim.frontend.channelMsgRecord.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* channelMsgRecord::release_msg() {
  // @@protoc_insertion_point(field_release:uyujoy.api.channelim.frontend.channelMsgRecord.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void channelMsgRecord::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:uyujoy.api.channelim.frontend.channelMsgRecord.msg)
}

// optional int64 sendTime = 6;
void channelMsgRecord::clear_sendtime() {
  sendtime_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 channelMsgRecord::sendtime() const {
  // @@protoc_insertion_point(field_get:uyujoy.api.channelim.frontend.channelMsgRecord.sendTime)
  return sendtime_;
}
void channelMsgRecord::set_sendtime(::google::protobuf::int64 value) {
  
  sendtime_ = value;
  // @@protoc_insertion_point(field_set:uyujoy.api.channelim.frontend.channelMsgRecord.sendTime)
}

// optional string lang = 7;
void channelMsgRecord::clear_lang() {
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& channelMsgRecord::lang() const {
  // @@protoc_insertion_point(field_get:uyujoy.api.channelim.frontend.channelMsgRecord.lang)
  return lang_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void channelMsgRecord::set_lang(const ::std::string& value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:uyujoy.api.channelim.frontend.channelMsgRecord.lang)
}
void channelMsgRecord::set_lang(const char* value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:uyujoy.api.channelim.frontend.channelMsgRecord.lang)
}
void channelMsgRecord::set_lang(const char* value, size_t size) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:uyujoy.api.channelim.frontend.channelMsgRecord.lang)
}
::std::string* channelMsgRecord::mutable_lang() {
  
  // @@protoc_insertion_point(field_mutable:uyujoy.api.channelim.frontend.channelMsgRecord.lang)
  return lang_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* channelMsgRecord::release_lang() {
  // @@protoc_insertion_point(field_release:uyujoy.api.channelim.frontend.channelMsgRecord.lang)
  
  return lang_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void channelMsgRecord::set_allocated_lang(::std::string* lang) {
  if (lang != NULL) {
    
  } else {
    
  }
  lang_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lang);
  // @@protoc_insertion_point(field_set_allocated:uyujoy.api.channelim.frontend.channelMsgRecord.lang)
}

inline const channelMsgRecord* channelMsgRecord::internal_default_instance() {
  return &channelMsgRecord_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int channelMsgRecordAck::kMsgIdFieldNumber;
const int channelMsgRecordAck::kFpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

channelMsgRecordAck::channelMsgRecordAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_channelIm_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:uyujoy.api.channelim.frontend.channelMsgRecordAck)
}

void channelMsgRecordAck::InitAsDefaultInstance() {
}

channelMsgRecordAck::channelMsgRecordAck(const channelMsgRecordAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uyujoy.api.channelim.frontend.channelMsgRecordAck)
}

void channelMsgRecordAck::SharedCtor() {
  fp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgid_ = 0u;
  _cached_size_ = 0;
}

channelMsgRecordAck::~channelMsgRecordAck() {
  // @@protoc_insertion_point(destructor:uyujoy.api.channelim.frontend.channelMsgRecordAck)
  SharedDtor();
}

void channelMsgRecordAck::SharedDtor() {
  fp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void channelMsgRecordAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* channelMsgRecordAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return channelMsgRecordAck_descriptor_;
}

const channelMsgRecordAck& channelMsgRecordAck::default_instance() {
  protobuf_InitDefaults_channelIm_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<channelMsgRecordAck> channelMsgRecordAck_default_instance_;

channelMsgRecordAck* channelMsgRecordAck::New(::google::protobuf::Arena* arena) const {
  channelMsgRecordAck* n = new channelMsgRecordAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void channelMsgRecordAck::Clear() {
// @@protoc_insertion_point(message_clear_start:uyujoy.api.channelim.frontend.channelMsgRecordAck)
  msgid_ = 0u;
  fp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool channelMsgRecordAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uyujoy.api.channelim.frontend.channelMsgRecordAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 msgId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fp;
        break;
      }

      // optional string fp = 2;
      case 2: {
        if (tag == 18) {
         parse_fp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fp()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fp().data(), this->fp().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "uyujoy.api.channelim.frontend.channelMsgRecordAck.fp"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uyujoy.api.channelim.frontend.channelMsgRecordAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uyujoy.api.channelim.frontend.channelMsgRecordAck)
  return false;
#undef DO_
}

void channelMsgRecordAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uyujoy.api.channelim.frontend.channelMsgRecordAck)
  // optional uint32 msgId = 1;
  if (this->msgid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msgid(), output);
  }

  // optional string fp = 2;
  if (this->fp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fp().data(), this->fp().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "uyujoy.api.channelim.frontend.channelMsgRecordAck.fp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fp(), output);
  }

  // @@protoc_insertion_point(serialize_end:uyujoy.api.channelim.frontend.channelMsgRecordAck)
}

::google::protobuf::uint8* channelMsgRecordAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:uyujoy.api.channelim.frontend.channelMsgRecordAck)
  // optional uint32 msgId = 1;
  if (this->msgid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msgid(), target);
  }

  // optional string fp = 2;
  if (this->fp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fp().data(), this->fp().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "uyujoy.api.channelim.frontend.channelMsgRecordAck.fp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uyujoy.api.channelim.frontend.channelMsgRecordAck)
  return target;
}

size_t channelMsgRecordAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uyujoy.api.channelim.frontend.channelMsgRecordAck)
  size_t total_size = 0;

  // optional uint32 msgId = 1;
  if (this->msgid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgid());
  }

  // optional string fp = 2;
  if (this->fp().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void channelMsgRecordAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uyujoy.api.channelim.frontend.channelMsgRecordAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const channelMsgRecordAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const channelMsgRecordAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uyujoy.api.channelim.frontend.channelMsgRecordAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uyujoy.api.channelim.frontend.channelMsgRecordAck)
    UnsafeMergeFrom(*source);
  }
}

void channelMsgRecordAck::MergeFrom(const channelMsgRecordAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uyujoy.api.channelim.frontend.channelMsgRecordAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void channelMsgRecordAck::UnsafeMergeFrom(const channelMsgRecordAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.msgid() != 0) {
    set_msgid(from.msgid());
  }
  if (from.fp().size() > 0) {

    fp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fp_);
  }
}

void channelMsgRecordAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uyujoy.api.channelim.frontend.channelMsgRecordAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void channelMsgRecordAck::CopyFrom(const channelMsgRecordAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uyujoy.api.channelim.frontend.channelMsgRecordAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool channelMsgRecordAck::IsInitialized() const {

  return true;
}

void channelMsgRecordAck::Swap(channelMsgRecordAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void channelMsgRecordAck::InternalSwap(channelMsgRecordAck* other) {
  std::swap(msgid_, other->msgid_);
  fp_.Swap(&other->fp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata channelMsgRecordAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = channelMsgRecordAck_descriptor_;
  metadata.reflection = channelMsgRecordAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// channelMsgRecordAck

// optional uint32 msgId = 1;
void channelMsgRecordAck::clear_msgid() {
  msgid_ = 0u;
}
::google::protobuf::uint32 channelMsgRecordAck::msgid() const {
  // @@protoc_insertion_point(field_get:uyujoy.api.channelim.frontend.channelMsgRecordAck.msgId)
  return msgid_;
}
void channelMsgRecordAck::set_msgid(::google::protobuf::uint32 value) {
  
  msgid_ = value;
  // @@protoc_insertion_point(field_set:uyujoy.api.channelim.frontend.channelMsgRecordAck.msgId)
}

// optional string fp = 2;
void channelMsgRecordAck::clear_fp() {
  fp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& channelMsgRecordAck::fp() const {
  // @@protoc_insertion_point(field_get:uyujoy.api.channelim.frontend.channelMsgRecordAck.fp)
  return fp_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void channelMsgRecordAck::set_fp(const ::std::string& value) {
  
  fp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:uyujoy.api.channelim.frontend.channelMsgRecordAck.fp)
}
void channelMsgRecordAck::set_fp(const char* value) {
  
  fp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:uyujoy.api.channelim.frontend.channelMsgRecordAck.fp)
}
void channelMsgRecordAck::set_fp(const char* value, size_t size) {
  
  fp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:uyujoy.api.channelim.frontend.channelMsgRecordAck.fp)
}
::std::string* channelMsgRecordAck::mutable_fp() {
  
  // @@protoc_insertion_point(field_mutable:uyujoy.api.channelim.frontend.channelMsgRecordAck.fp)
  return fp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* channelMsgRecordAck::release_fp() {
  // @@protoc_insertion_point(field_release:uyujoy.api.channelim.frontend.channelMsgRecordAck.fp)
  
  return fp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void channelMsgRecordAck::set_allocated_fp(::std::string* fp) {
  if (fp != NULL) {
    
  } else {
    
  }
  fp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fp);
  // @@protoc_insertion_point(field_set_allocated:uyujoy.api.channelim.frontend.channelMsgRecordAck.fp)
}

inline const channelMsgRecordAck* channelMsgRecordAck::internal_default_instance() {
  return &channelMsgRecordAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rcvChannelMsgRecord::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rcvChannelMsgRecord::rcvChannelMsgRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_channelIm_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:uyujoy.api.channelim.frontend.rcvChannelMsgRecord)
}

void rcvChannelMsgRecord::InitAsDefaultInstance() {
  msg_ = const_cast< ::uyujoy::api::channelim::frontend::channelMsgRecord*>(
      ::uyujoy::api::channelim::frontend::channelMsgRecord::internal_default_instance());
}

rcvChannelMsgRecord::rcvChannelMsgRecord(const rcvChannelMsgRecord& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uyujoy.api.channelim.frontend.rcvChannelMsgRecord)
}

void rcvChannelMsgRecord::SharedCtor() {
  msg_ = NULL;
  _cached_size_ = 0;
}

rcvChannelMsgRecord::~rcvChannelMsgRecord() {
  // @@protoc_insertion_point(destructor:uyujoy.api.channelim.frontend.rcvChannelMsgRecord)
  SharedDtor();
}

void rcvChannelMsgRecord::SharedDtor() {
  if (this != &rcvChannelMsgRecord_default_instance_.get()) {
    delete msg_;
  }
}

void rcvChannelMsgRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rcvChannelMsgRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rcvChannelMsgRecord_descriptor_;
}

const rcvChannelMsgRecord& rcvChannelMsgRecord::default_instance() {
  protobuf_InitDefaults_channelIm_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<rcvChannelMsgRecord> rcvChannelMsgRecord_default_instance_;

rcvChannelMsgRecord* rcvChannelMsgRecord::New(::google::protobuf::Arena* arena) const {
  rcvChannelMsgRecord* n = new rcvChannelMsgRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rcvChannelMsgRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:uyujoy.api.channelim.frontend.rcvChannelMsgRecord)
  if (GetArenaNoVirtual() == NULL && msg_ != NULL) delete msg_;
  msg_ = NULL;
}

bool rcvChannelMsgRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uyujoy.api.channelim.frontend.rcvChannelMsgRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uyujoy.api.channelim.frontend.channelMsgRecord msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uyujoy.api.channelim.frontend.rcvChannelMsgRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uyujoy.api.channelim.frontend.rcvChannelMsgRecord)
  return false;
#undef DO_
}

void rcvChannelMsgRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uyujoy.api.channelim.frontend.rcvChannelMsgRecord)
  // optional .uyujoy.api.channelim.frontend.channelMsgRecord msg = 1;
  if (this->has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->msg_, output);
  }

  // @@protoc_insertion_point(serialize_end:uyujoy.api.channelim.frontend.rcvChannelMsgRecord)
}

::google::protobuf::uint8* rcvChannelMsgRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:uyujoy.api.channelim.frontend.rcvChannelMsgRecord)
  // optional .uyujoy.api.channelim.frontend.channelMsgRecord msg = 1;
  if (this->has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->msg_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uyujoy.api.channelim.frontend.rcvChannelMsgRecord)
  return target;
}

size_t rcvChannelMsgRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uyujoy.api.channelim.frontend.rcvChannelMsgRecord)
  size_t total_size = 0;

  // optional .uyujoy.api.channelim.frontend.channelMsgRecord msg = 1;
  if (this->has_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msg_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rcvChannelMsgRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uyujoy.api.channelim.frontend.rcvChannelMsgRecord)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const rcvChannelMsgRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rcvChannelMsgRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uyujoy.api.channelim.frontend.rcvChannelMsgRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uyujoy.api.channelim.frontend.rcvChannelMsgRecord)
    UnsafeMergeFrom(*source);
  }
}

void rcvChannelMsgRecord::MergeFrom(const rcvChannelMsgRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uyujoy.api.channelim.frontend.rcvChannelMsgRecord)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void rcvChannelMsgRecord::UnsafeMergeFrom(const rcvChannelMsgRecord& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_msg()) {
    mutable_msg()->::uyujoy::api::channelim::frontend::channelMsgRecord::MergeFrom(from.msg());
  }
}

void rcvChannelMsgRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uyujoy.api.channelim.frontend.rcvChannelMsgRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rcvChannelMsgRecord::CopyFrom(const rcvChannelMsgRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uyujoy.api.channelim.frontend.rcvChannelMsgRecord)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool rcvChannelMsgRecord::IsInitialized() const {

  return true;
}

void rcvChannelMsgRecord::Swap(rcvChannelMsgRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rcvChannelMsgRecord::InternalSwap(rcvChannelMsgRecord* other) {
  std::swap(msg_, other->msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rcvChannelMsgRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rcvChannelMsgRecord_descriptor_;
  metadata.reflection = rcvChannelMsgRecord_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rcvChannelMsgRecord

// optional .uyujoy.api.channelim.frontend.channelMsgRecord msg = 1;
bool rcvChannelMsgRecord::has_msg() const {
  return this != internal_default_instance() && msg_ != NULL;
}
void rcvChannelMsgRecord::clear_msg() {
  if (GetArenaNoVirtual() == NULL && msg_ != NULL) delete msg_;
  msg_ = NULL;
}
const ::uyujoy::api::channelim::frontend::channelMsgRecord& rcvChannelMsgRecord::msg() const {
  // @@protoc_insertion_point(field_get:uyujoy.api.channelim.frontend.rcvChannelMsgRecord.msg)
  return msg_ != NULL ? *msg_
                         : *::uyujoy::api::channelim::frontend::channelMsgRecord::internal_default_instance();
}
::uyujoy::api::channelim::frontend::channelMsgRecord* rcvChannelMsgRecord::mutable_msg() {
  
  if (msg_ == NULL) {
    msg_ = new ::uyujoy::api::channelim::frontend::channelMsgRecord;
  }
  // @@protoc_insertion_point(field_mutable:uyujoy.api.channelim.frontend.rcvChannelMsgRecord.msg)
  return msg_;
}
::uyujoy::api::channelim::frontend::channelMsgRecord* rcvChannelMsgRecord::release_msg() {
  // @@protoc_insertion_point(field_release:uyujoy.api.channelim.frontend.rcvChannelMsgRecord.msg)
  
  ::uyujoy::api::channelim::frontend::channelMsgRecord* temp = msg_;
  msg_ = NULL;
  return temp;
}
void rcvChannelMsgRecord::set_allocated_msg(::uyujoy::api::channelim::frontend::channelMsgRecord* msg) {
  delete msg_;
  msg_ = msg;
  if (msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uyujoy.api.channelim.frontend.rcvChannelMsgRecord.msg)
}

inline const rcvChannelMsgRecord* rcvChannelMsgRecord::internal_default_instance() {
  return &rcvChannelMsgRecord_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int getDiffChannelMsgRecord::kMsgIdFieldNumber;
const int getDiffChannelMsgRecord::kChannelIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

getDiffChannelMsgRecord::getDiffChannelMsgRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_channelIm_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:uyujoy.api.channelim.frontend.getDiffChannelMsgRecord)
}

void getDiffChannelMsgRecord::InitAsDefaultInstance() {
}

getDiffChannelMsgRecord::getDiffChannelMsgRecord(const getDiffChannelMsgRecord& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uyujoy.api.channelim.frontend.getDiffChannelMsgRecord)
}

void getDiffChannelMsgRecord::SharedCtor() {
  channelid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgid_ = 0u;
  _cached_size_ = 0;
}

getDiffChannelMsgRecord::~getDiffChannelMsgRecord() {
  // @@protoc_insertion_point(destructor:uyujoy.api.channelim.frontend.getDiffChannelMsgRecord)
  SharedDtor();
}

void getDiffChannelMsgRecord::SharedDtor() {
  channelid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void getDiffChannelMsgRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* getDiffChannelMsgRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return getDiffChannelMsgRecord_descriptor_;
}

const getDiffChannelMsgRecord& getDiffChannelMsgRecord::default_instance() {
  protobuf_InitDefaults_channelIm_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<getDiffChannelMsgRecord> getDiffChannelMsgRecord_default_instance_;

getDiffChannelMsgRecord* getDiffChannelMsgRecord::New(::google::protobuf::Arena* arena) const {
  getDiffChannelMsgRecord* n = new getDiffChannelMsgRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void getDiffChannelMsgRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:uyujoy.api.channelim.frontend.getDiffChannelMsgRecord)
  msgid_ = 0u;
  channelid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool getDiffChannelMsgRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uyujoy.api.channelim.frontend.getDiffChannelMsgRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 msgId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_channelId;
        break;
      }

      // optional string channelId = 2;
      case 2: {
        if (tag == 18) {
         parse_channelId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channelid().data(), this->channelid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "uyujoy.api.channelim.frontend.getDiffChannelMsgRecord.channelId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uyujoy.api.channelim.frontend.getDiffChannelMsgRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uyujoy.api.channelim.frontend.getDiffChannelMsgRecord)
  return false;
#undef DO_
}

void getDiffChannelMsgRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uyujoy.api.channelim.frontend.getDiffChannelMsgRecord)
  // optional uint32 msgId = 1;
  if (this->msgid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msgid(), output);
  }

  // optional string channelId = 2;
  if (this->channelid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "uyujoy.api.channelim.frontend.getDiffChannelMsgRecord.channelId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->channelid(), output);
  }

  // @@protoc_insertion_point(serialize_end:uyujoy.api.channelim.frontend.getDiffChannelMsgRecord)
}

::google::protobuf::uint8* getDiffChannelMsgRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:uyujoy.api.channelim.frontend.getDiffChannelMsgRecord)
  // optional uint32 msgId = 1;
  if (this->msgid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msgid(), target);
  }

  // optional string channelId = 2;
  if (this->channelid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "uyujoy.api.channelim.frontend.getDiffChannelMsgRecord.channelId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->channelid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uyujoy.api.channelim.frontend.getDiffChannelMsgRecord)
  return target;
}

size_t getDiffChannelMsgRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uyujoy.api.channelim.frontend.getDiffChannelMsgRecord)
  size_t total_size = 0;

  // optional uint32 msgId = 1;
  if (this->msgid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgid());
  }

  // optional string channelId = 2;
  if (this->channelid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channelid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void getDiffChannelMsgRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uyujoy.api.channelim.frontend.getDiffChannelMsgRecord)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const getDiffChannelMsgRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const getDiffChannelMsgRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uyujoy.api.channelim.frontend.getDiffChannelMsgRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uyujoy.api.channelim.frontend.getDiffChannelMsgRecord)
    UnsafeMergeFrom(*source);
  }
}

void getDiffChannelMsgRecord::MergeFrom(const getDiffChannelMsgRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uyujoy.api.channelim.frontend.getDiffChannelMsgRecord)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void getDiffChannelMsgRecord::UnsafeMergeFrom(const getDiffChannelMsgRecord& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.msgid() != 0) {
    set_msgid(from.msgid());
  }
  if (from.channelid().size() > 0) {

    channelid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channelid_);
  }
}

void getDiffChannelMsgRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uyujoy.api.channelim.frontend.getDiffChannelMsgRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getDiffChannelMsgRecord::CopyFrom(const getDiffChannelMsgRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uyujoy.api.channelim.frontend.getDiffChannelMsgRecord)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool getDiffChannelMsgRecord::IsInitialized() const {

  return true;
}

void getDiffChannelMsgRecord::Swap(getDiffChannelMsgRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void getDiffChannelMsgRecord::InternalSwap(getDiffChannelMsgRecord* other) {
  std::swap(msgid_, other->msgid_);
  channelid_.Swap(&other->channelid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata getDiffChannelMsgRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = getDiffChannelMsgRecord_descriptor_;
  metadata.reflection = getDiffChannelMsgRecord_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// getDiffChannelMsgRecord

// optional uint32 msgId = 1;
void getDiffChannelMsgRecord::clear_msgid() {
  msgid_ = 0u;
}
::google::protobuf::uint32 getDiffChannelMsgRecord::msgid() const {
  // @@protoc_insertion_point(field_get:uyujoy.api.channelim.frontend.getDiffChannelMsgRecord.msgId)
  return msgid_;
}
void getDiffChannelMsgRecord::set_msgid(::google::protobuf::uint32 value) {
  
  msgid_ = value;
  // @@protoc_insertion_point(field_set:uyujoy.api.channelim.frontend.getDiffChannelMsgRecord.msgId)
}

// optional string channelId = 2;
void getDiffChannelMsgRecord::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& getDiffChannelMsgRecord::channelid() const {
  // @@protoc_insertion_point(field_get:uyujoy.api.channelim.frontend.getDiffChannelMsgRecord.channelId)
  return channelid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void getDiffChannelMsgRecord::set_channelid(const ::std::string& value) {
  
  channelid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:uyujoy.api.channelim.frontend.getDiffChannelMsgRecord.channelId)
}
void getDiffChannelMsgRecord::set_channelid(const char* value) {
  
  channelid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:uyujoy.api.channelim.frontend.getDiffChannelMsgRecord.channelId)
}
void getDiffChannelMsgRecord::set_channelid(const char* value, size_t size) {
  
  channelid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:uyujoy.api.channelim.frontend.getDiffChannelMsgRecord.channelId)
}
::std::string* getDiffChannelMsgRecord::mutable_channelid() {
  
  // @@protoc_insertion_point(field_mutable:uyujoy.api.channelim.frontend.getDiffChannelMsgRecord.channelId)
  return channelid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* getDiffChannelMsgRecord::release_channelid() {
  // @@protoc_insertion_point(field_release:uyujoy.api.channelim.frontend.getDiffChannelMsgRecord.channelId)
  
  return channelid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void getDiffChannelMsgRecord::set_allocated_channelid(::std::string* channelid) {
  if (channelid != NULL) {
    
  } else {
    
  }
  channelid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:uyujoy.api.channelim.frontend.getDiffChannelMsgRecord.channelId)
}

inline const getDiffChannelMsgRecord* getDiffChannelMsgRecord::internal_default_instance() {
  return &getDiffChannelMsgRecord_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int getDiffChannelMsgRecordAck::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

getDiffChannelMsgRecordAck::getDiffChannelMsgRecordAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_channelIm_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:uyujoy.api.channelim.frontend.getDiffChannelMsgRecordAck)
}

void getDiffChannelMsgRecordAck::InitAsDefaultInstance() {
}

getDiffChannelMsgRecordAck::getDiffChannelMsgRecordAck(const getDiffChannelMsgRecordAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uyujoy.api.channelim.frontend.getDiffChannelMsgRecordAck)
}

void getDiffChannelMsgRecordAck::SharedCtor() {
  _cached_size_ = 0;
}

getDiffChannelMsgRecordAck::~getDiffChannelMsgRecordAck() {
  // @@protoc_insertion_point(destructor:uyujoy.api.channelim.frontend.getDiffChannelMsgRecordAck)
  SharedDtor();
}

void getDiffChannelMsgRecordAck::SharedDtor() {
}

void getDiffChannelMsgRecordAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* getDiffChannelMsgRecordAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return getDiffChannelMsgRecordAck_descriptor_;
}

const getDiffChannelMsgRecordAck& getDiffChannelMsgRecordAck::default_instance() {
  protobuf_InitDefaults_channelIm_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<getDiffChannelMsgRecordAck> getDiffChannelMsgRecordAck_default_instance_;

getDiffChannelMsgRecordAck* getDiffChannelMsgRecordAck::New(::google::protobuf::Arena* arena) const {
  getDiffChannelMsgRecordAck* n = new getDiffChannelMsgRecordAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void getDiffChannelMsgRecordAck::Clear() {
// @@protoc_insertion_point(message_clear_start:uyujoy.api.channelim.frontend.getDiffChannelMsgRecordAck)
  list_.Clear();
}

bool getDiffChannelMsgRecordAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uyujoy.api.channelim.frontend.getDiffChannelMsgRecordAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .uyujoy.api.channelim.frontend.channelMsgRecord list = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uyujoy.api.channelim.frontend.getDiffChannelMsgRecordAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uyujoy.api.channelim.frontend.getDiffChannelMsgRecordAck)
  return false;
#undef DO_
}

void getDiffChannelMsgRecordAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uyujoy.api.channelim.frontend.getDiffChannelMsgRecordAck)
  // repeated .uyujoy.api.channelim.frontend.channelMsgRecord list = 1;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // @@protoc_insertion_point(serialize_end:uyujoy.api.channelim.frontend.getDiffChannelMsgRecordAck)
}

::google::protobuf::uint8* getDiffChannelMsgRecordAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:uyujoy.api.channelim.frontend.getDiffChannelMsgRecordAck)
  // repeated .uyujoy.api.channelim.frontend.channelMsgRecord list = 1;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->list(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uyujoy.api.channelim.frontend.getDiffChannelMsgRecordAck)
  return target;
}

size_t getDiffChannelMsgRecordAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uyujoy.api.channelim.frontend.getDiffChannelMsgRecordAck)
  size_t total_size = 0;

  // repeated .uyujoy.api.channelim.frontend.channelMsgRecord list = 1;
  {
    unsigned int count = this->list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void getDiffChannelMsgRecordAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uyujoy.api.channelim.frontend.getDiffChannelMsgRecordAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const getDiffChannelMsgRecordAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const getDiffChannelMsgRecordAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uyujoy.api.channelim.frontend.getDiffChannelMsgRecordAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uyujoy.api.channelim.frontend.getDiffChannelMsgRecordAck)
    UnsafeMergeFrom(*source);
  }
}

void getDiffChannelMsgRecordAck::MergeFrom(const getDiffChannelMsgRecordAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uyujoy.api.channelim.frontend.getDiffChannelMsgRecordAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void getDiffChannelMsgRecordAck::UnsafeMergeFrom(const getDiffChannelMsgRecordAck& from) {
  GOOGLE_DCHECK(&from != this);
  list_.MergeFrom(from.list_);
}

void getDiffChannelMsgRecordAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uyujoy.api.channelim.frontend.getDiffChannelMsgRecordAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getDiffChannelMsgRecordAck::CopyFrom(const getDiffChannelMsgRecordAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uyujoy.api.channelim.frontend.getDiffChannelMsgRecordAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool getDiffChannelMsgRecordAck::IsInitialized() const {

  return true;
}

void getDiffChannelMsgRecordAck::Swap(getDiffChannelMsgRecordAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void getDiffChannelMsgRecordAck::InternalSwap(getDiffChannelMsgRecordAck* other) {
  list_.UnsafeArenaSwap(&other->list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata getDiffChannelMsgRecordAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = getDiffChannelMsgRecordAck_descriptor_;
  metadata.reflection = getDiffChannelMsgRecordAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// getDiffChannelMsgRecordAck

// repeated .uyujoy.api.channelim.frontend.channelMsgRecord list = 1;
int getDiffChannelMsgRecordAck::list_size() const {
  return list_.size();
}
void getDiffChannelMsgRecordAck::clear_list() {
  list_.Clear();
}
const ::uyujoy::api::channelim::frontend::channelMsgRecord& getDiffChannelMsgRecordAck::list(int index) const {
  // @@protoc_insertion_point(field_get:uyujoy.api.channelim.frontend.getDiffChannelMsgRecordAck.list)
  return list_.Get(index);
}
::uyujoy::api::channelim::frontend::channelMsgRecord* getDiffChannelMsgRecordAck::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:uyujoy.api.channelim.frontend.getDiffChannelMsgRecordAck.list)
  return list_.Mutable(index);
}
::uyujoy::api::channelim::frontend::channelMsgRecord* getDiffChannelMsgRecordAck::add_list() {
  // @@protoc_insertion_point(field_add:uyujoy.api.channelim.frontend.getDiffChannelMsgRecordAck.list)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::uyujoy::api::channelim::frontend::channelMsgRecord >*
getDiffChannelMsgRecordAck::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:uyujoy.api.channelim.frontend.getDiffChannelMsgRecordAck.list)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::uyujoy::api::channelim::frontend::channelMsgRecord >&
getDiffChannelMsgRecordAck::list() const {
  // @@protoc_insertion_point(field_list:uyujoy.api.channelim.frontend.getDiffChannelMsgRecordAck.list)
  return list_;
}

inline const getDiffChannelMsgRecordAck* getDiffChannelMsgRecordAck::internal_default_instance() {
  return &getDiffChannelMsgRecordAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace frontend
}  // namespace channelim
}  // namespace api
}  // namespace uyujoy

// @@protoc_insertion_point(global_scope)
