// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "task.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace batprotobuf {

namespace {

const ::google::protobuf::Descriptor* task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  task_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_task_list_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_task_list_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_task_list_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_task_list_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_remaining_task_num_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_remaining_task_num_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_remaining_task_num_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_remaining_task_num_res_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_task_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_task_2eproto() {
  protobuf_AddDesc_task_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "task.proto");
  GOOGLE_CHECK(file != NULL);
  task_descriptor_ = file->message_type(0);
  static const int task_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task, cate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task, diamonds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task, finished_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task, total_),
  };
  task_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      task_descriptor_,
      task::internal_default_instance(),
      task_offsets_,
      -1,
      -1,
      -1,
      sizeof(task),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task, _internal_metadata_));
  get_task_list_req_descriptor_ = file->message_type(1);
  static const int get_task_list_req_offsets_[1] = {
  };
  get_task_list_req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      get_task_list_req_descriptor_,
      get_task_list_req::internal_default_instance(),
      get_task_list_req_offsets_,
      -1,
      -1,
      -1,
      sizeof(get_task_list_req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_task_list_req, _internal_metadata_));
  get_task_list_res_descriptor_ = file->message_type(2);
  static const int get_task_list_res_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_task_list_res, list_),
  };
  get_task_list_res_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      get_task_list_res_descriptor_,
      get_task_list_res::internal_default_instance(),
      get_task_list_res_offsets_,
      -1,
      -1,
      -1,
      sizeof(get_task_list_res),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_task_list_res, _internal_metadata_));
  get_remaining_task_num_req_descriptor_ = file->message_type(3);
  static const int get_remaining_task_num_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_remaining_task_num_req, cate_),
  };
  get_remaining_task_num_req_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      get_remaining_task_num_req_descriptor_,
      get_remaining_task_num_req::internal_default_instance(),
      get_remaining_task_num_req_offsets_,
      -1,
      -1,
      -1,
      sizeof(get_remaining_task_num_req),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_remaining_task_num_req, _internal_metadata_));
  get_remaining_task_num_res_descriptor_ = file->message_type(4);
  static const int get_remaining_task_num_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_remaining_task_num_res, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_remaining_task_num_res, diamonds_),
  };
  get_remaining_task_num_res_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      get_remaining_task_num_res_descriptor_,
      get_remaining_task_num_res::internal_default_instance(),
      get_remaining_task_num_res_offsets_,
      -1,
      -1,
      -1,
      sizeof(get_remaining_task_num_res),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_remaining_task_num_res, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_task_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      task_descriptor_, task::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      get_task_list_req_descriptor_, get_task_list_req::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      get_task_list_res_descriptor_, get_task_list_res::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      get_remaining_task_num_req_descriptor_, get_remaining_task_num_req::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      get_remaining_task_num_res_descriptor_, get_remaining_task_num_res::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_task_2eproto() {
  task_default_instance_.Shutdown();
  delete task_reflection_;
  get_task_list_req_default_instance_.Shutdown();
  delete get_task_list_req_reflection_;
  get_task_list_res_default_instance_.Shutdown();
  delete get_task_list_res_reflection_;
  get_remaining_task_num_req_default_instance_.Shutdown();
  delete get_remaining_task_num_req_reflection_;
  get_remaining_task_num_res_default_instance_.Shutdown();
  delete get_remaining_task_num_res_reflection_;
}

void protobuf_InitDefaults_task_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  task_default_instance_.DefaultConstruct();
  get_task_list_req_default_instance_.DefaultConstruct();
  get_task_list_res_default_instance_.DefaultConstruct();
  get_remaining_task_num_req_default_instance_.DefaultConstruct();
  get_remaining_task_num_res_default_instance_.DefaultConstruct();
  task_default_instance_.get_mutable()->InitAsDefaultInstance();
  get_task_list_req_default_instance_.get_mutable()->InitAsDefaultInstance();
  get_task_list_res_default_instance_.get_mutable()->InitAsDefaultInstance();
  get_remaining_task_num_req_default_instance_.get_mutable()->InitAsDefaultInstance();
  get_remaining_task_num_res_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_task_2eproto_once_);
void protobuf_InitDefaults_task_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_task_2eproto_once_,
                 &protobuf_InitDefaults_task_2eproto_impl);
}
void protobuf_AddDesc_task_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_task_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ntask.proto\022\013batprotobuf\"G\n\004task\022\014\n\004cat"
    "e\030\001 \001(\r\022\020\n\010diamonds\030\002 \001(\r\022\020\n\010finished\030\003 "
    "\001(\r\022\r\n\005total\030\004 \001(\r\"\023\n\021get_task_list_req\""
    "4\n\021get_task_list_res\022\037\n\004list\030\001 \003(\0132\021.bat"
    "protobuf.task\"*\n\032get_remaining_task_num_"
    "req\022\014\n\004cate\030\001 \001(\r\";\n\032get_remaining_task_"
    "num_res\022\013\n\003num\030\001 \001(\r\022\020\n\010diamonds\030\002 \001(\rB#"
    "Z!bat_common/protobuffs/batprotobufb\006pro"
    "to3", 323);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "task.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_task_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_task_2eproto_once_);
void protobuf_AddDesc_task_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_task_2eproto_once_,
                 &protobuf_AddDesc_task_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_task_2eproto {
  StaticDescriptorInitializer_task_2eproto() {
    protobuf_AddDesc_task_2eproto();
  }
} static_descriptor_initializer_task_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int task::kCateFieldNumber;
const int task::kDiamondsFieldNumber;
const int task::kFinishedFieldNumber;
const int task::kTotalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

task::task()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_task_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:batprotobuf.task)
}

void task::InitAsDefaultInstance() {
}

task::task(const task& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:batprotobuf.task)
}

void task::SharedCtor() {
  ::memset(&cate_, 0, reinterpret_cast<char*>(&total_) -
    reinterpret_cast<char*>(&cate_) + sizeof(total_));
  _cached_size_ = 0;
}

task::~task() {
  // @@protoc_insertion_point(destructor:batprotobuf.task)
  SharedDtor();
}

void task::SharedDtor() {
}

void task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return task_descriptor_;
}

const task& task::default_instance() {
  protobuf_InitDefaults_task_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<task> task_default_instance_;

task* task::New(::google::protobuf::Arena* arena) const {
  task* n = new task;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void task::Clear() {
// @@protoc_insertion_point(message_clear_start:batprotobuf.task)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(task, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<task*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(cate_, total_);

#undef ZR_HELPER_
#undef ZR_

}

bool task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:batprotobuf.task)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cate = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cate_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_diamonds;
        break;
      }

      // optional uint32 diamonds = 2;
      case 2: {
        if (tag == 16) {
         parse_diamonds:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamonds_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_finished;
        break;
      }

      // optional uint32 finished = 3;
      case 3: {
        if (tag == 24) {
         parse_finished:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finished_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_total;
        break;
      }

      // optional uint32 total = 4;
      case 4: {
        if (tag == 32) {
         parse_total:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:batprotobuf.task)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:batprotobuf.task)
  return false;
#undef DO_
}

void task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:batprotobuf.task)
  // optional uint32 cate = 1;
  if (this->cate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cate(), output);
  }

  // optional uint32 diamonds = 2;
  if (this->diamonds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->diamonds(), output);
  }

  // optional uint32 finished = 3;
  if (this->finished() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->finished(), output);
  }

  // optional uint32 total = 4;
  if (this->total() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->total(), output);
  }

  // @@protoc_insertion_point(serialize_end:batprotobuf.task)
}

::google::protobuf::uint8* task::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:batprotobuf.task)
  // optional uint32 cate = 1;
  if (this->cate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cate(), target);
  }

  // optional uint32 diamonds = 2;
  if (this->diamonds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->diamonds(), target);
  }

  // optional uint32 finished = 3;
  if (this->finished() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->finished(), target);
  }

  // optional uint32 total = 4;
  if (this->total() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->total(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:batprotobuf.task)
  return target;
}

size_t task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:batprotobuf.task)
  size_t total_size = 0;

  // optional uint32 cate = 1;
  if (this->cate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cate());
  }

  // optional uint32 diamonds = 2;
  if (this->diamonds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->diamonds());
  }

  // optional uint32 finished = 3;
  if (this->finished() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->finished());
  }

  // optional uint32 total = 4;
  if (this->total() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void task::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:batprotobuf.task)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const task* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const task>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:batprotobuf.task)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:batprotobuf.task)
    UnsafeMergeFrom(*source);
  }
}

void task::MergeFrom(const task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:batprotobuf.task)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void task::UnsafeMergeFrom(const task& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.cate() != 0) {
    set_cate(from.cate());
  }
  if (from.diamonds() != 0) {
    set_diamonds(from.diamonds());
  }
  if (from.finished() != 0) {
    set_finished(from.finished());
  }
  if (from.total() != 0) {
    set_total(from.total());
  }
}

void task::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:batprotobuf.task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void task::CopyFrom(const task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:batprotobuf.task)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool task::IsInitialized() const {

  return true;
}

void task::Swap(task* other) {
  if (other == this) return;
  InternalSwap(other);
}
void task::InternalSwap(task* other) {
  std::swap(cate_, other->cate_);
  std::swap(diamonds_, other->diamonds_);
  std::swap(finished_, other->finished_);
  std::swap(total_, other->total_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = task_descriptor_;
  metadata.reflection = task_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// task

// optional uint32 cate = 1;
void task::clear_cate() {
  cate_ = 0u;
}
::google::protobuf::uint32 task::cate() const {
  // @@protoc_insertion_point(field_get:batprotobuf.task.cate)
  return cate_;
}
void task::set_cate(::google::protobuf::uint32 value) {
  
  cate_ = value;
  // @@protoc_insertion_point(field_set:batprotobuf.task.cate)
}

// optional uint32 diamonds = 2;
void task::clear_diamonds() {
  diamonds_ = 0u;
}
::google::protobuf::uint32 task::diamonds() const {
  // @@protoc_insertion_point(field_get:batprotobuf.task.diamonds)
  return diamonds_;
}
void task::set_diamonds(::google::protobuf::uint32 value) {
  
  diamonds_ = value;
  // @@protoc_insertion_point(field_set:batprotobuf.task.diamonds)
}

// optional uint32 finished = 3;
void task::clear_finished() {
  finished_ = 0u;
}
::google::protobuf::uint32 task::finished() const {
  // @@protoc_insertion_point(field_get:batprotobuf.task.finished)
  return finished_;
}
void task::set_finished(::google::protobuf::uint32 value) {
  
  finished_ = value;
  // @@protoc_insertion_point(field_set:batprotobuf.task.finished)
}

// optional uint32 total = 4;
void task::clear_total() {
  total_ = 0u;
}
::google::protobuf::uint32 task::total() const {
  // @@protoc_insertion_point(field_get:batprotobuf.task.total)
  return total_;
}
void task::set_total(::google::protobuf::uint32 value) {
  
  total_ = value;
  // @@protoc_insertion_point(field_set:batprotobuf.task.total)
}

inline const task* task::internal_default_instance() {
  return &task_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

get_task_list_req::get_task_list_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_task_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:batprotobuf.get_task_list_req)
}

void get_task_list_req::InitAsDefaultInstance() {
}

get_task_list_req::get_task_list_req(const get_task_list_req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:batprotobuf.get_task_list_req)
}

void get_task_list_req::SharedCtor() {
  _cached_size_ = 0;
}

get_task_list_req::~get_task_list_req() {
  // @@protoc_insertion_point(destructor:batprotobuf.get_task_list_req)
  SharedDtor();
}

void get_task_list_req::SharedDtor() {
}

void get_task_list_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_task_list_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_task_list_req_descriptor_;
}

const get_task_list_req& get_task_list_req::default_instance() {
  protobuf_InitDefaults_task_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<get_task_list_req> get_task_list_req_default_instance_;

get_task_list_req* get_task_list_req::New(::google::protobuf::Arena* arena) const {
  get_task_list_req* n = new get_task_list_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void get_task_list_req::Clear() {
// @@protoc_insertion_point(message_clear_start:batprotobuf.get_task_list_req)
}

bool get_task_list_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:batprotobuf.get_task_list_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:batprotobuf.get_task_list_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:batprotobuf.get_task_list_req)
  return false;
#undef DO_
}

void get_task_list_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:batprotobuf.get_task_list_req)
  // @@protoc_insertion_point(serialize_end:batprotobuf.get_task_list_req)
}

::google::protobuf::uint8* get_task_list_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:batprotobuf.get_task_list_req)
  // @@protoc_insertion_point(serialize_to_array_end:batprotobuf.get_task_list_req)
  return target;
}

size_t get_task_list_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:batprotobuf.get_task_list_req)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_task_list_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:batprotobuf.get_task_list_req)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const get_task_list_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const get_task_list_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:batprotobuf.get_task_list_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:batprotobuf.get_task_list_req)
    UnsafeMergeFrom(*source);
  }
}

void get_task_list_req::MergeFrom(const get_task_list_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:batprotobuf.get_task_list_req)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void get_task_list_req::UnsafeMergeFrom(const get_task_list_req& from) {
  GOOGLE_DCHECK(&from != this);
}

void get_task_list_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:batprotobuf.get_task_list_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_task_list_req::CopyFrom(const get_task_list_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:batprotobuf.get_task_list_req)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool get_task_list_req::IsInitialized() const {

  return true;
}

void get_task_list_req::Swap(get_task_list_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void get_task_list_req::InternalSwap(get_task_list_req* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata get_task_list_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_task_list_req_descriptor_;
  metadata.reflection = get_task_list_req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// get_task_list_req

inline const get_task_list_req* get_task_list_req::internal_default_instance() {
  return &get_task_list_req_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int get_task_list_res::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

get_task_list_res::get_task_list_res()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_task_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:batprotobuf.get_task_list_res)
}

void get_task_list_res::InitAsDefaultInstance() {
}

get_task_list_res::get_task_list_res(const get_task_list_res& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:batprotobuf.get_task_list_res)
}

void get_task_list_res::SharedCtor() {
  _cached_size_ = 0;
}

get_task_list_res::~get_task_list_res() {
  // @@protoc_insertion_point(destructor:batprotobuf.get_task_list_res)
  SharedDtor();
}

void get_task_list_res::SharedDtor() {
}

void get_task_list_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_task_list_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_task_list_res_descriptor_;
}

const get_task_list_res& get_task_list_res::default_instance() {
  protobuf_InitDefaults_task_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<get_task_list_res> get_task_list_res_default_instance_;

get_task_list_res* get_task_list_res::New(::google::protobuf::Arena* arena) const {
  get_task_list_res* n = new get_task_list_res;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void get_task_list_res::Clear() {
// @@protoc_insertion_point(message_clear_start:batprotobuf.get_task_list_res)
  list_.Clear();
}

bool get_task_list_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:batprotobuf.get_task_list_res)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .batprotobuf.task list = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:batprotobuf.get_task_list_res)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:batprotobuf.get_task_list_res)
  return false;
#undef DO_
}

void get_task_list_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:batprotobuf.get_task_list_res)
  // repeated .batprotobuf.task list = 1;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // @@protoc_insertion_point(serialize_end:batprotobuf.get_task_list_res)
}

::google::protobuf::uint8* get_task_list_res::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:batprotobuf.get_task_list_res)
  // repeated .batprotobuf.task list = 1;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->list(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:batprotobuf.get_task_list_res)
  return target;
}

size_t get_task_list_res::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:batprotobuf.get_task_list_res)
  size_t total_size = 0;

  // repeated .batprotobuf.task list = 1;
  {
    unsigned int count = this->list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_task_list_res::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:batprotobuf.get_task_list_res)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const get_task_list_res* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const get_task_list_res>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:batprotobuf.get_task_list_res)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:batprotobuf.get_task_list_res)
    UnsafeMergeFrom(*source);
  }
}

void get_task_list_res::MergeFrom(const get_task_list_res& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:batprotobuf.get_task_list_res)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void get_task_list_res::UnsafeMergeFrom(const get_task_list_res& from) {
  GOOGLE_DCHECK(&from != this);
  list_.MergeFrom(from.list_);
}

void get_task_list_res::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:batprotobuf.get_task_list_res)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_task_list_res::CopyFrom(const get_task_list_res& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:batprotobuf.get_task_list_res)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool get_task_list_res::IsInitialized() const {

  return true;
}

void get_task_list_res::Swap(get_task_list_res* other) {
  if (other == this) return;
  InternalSwap(other);
}
void get_task_list_res::InternalSwap(get_task_list_res* other) {
  list_.UnsafeArenaSwap(&other->list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata get_task_list_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_task_list_res_descriptor_;
  metadata.reflection = get_task_list_res_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// get_task_list_res

// repeated .batprotobuf.task list = 1;
int get_task_list_res::list_size() const {
  return list_.size();
}
void get_task_list_res::clear_list() {
  list_.Clear();
}
const ::batprotobuf::task& get_task_list_res::list(int index) const {
  // @@protoc_insertion_point(field_get:batprotobuf.get_task_list_res.list)
  return list_.Get(index);
}
::batprotobuf::task* get_task_list_res::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:batprotobuf.get_task_list_res.list)
  return list_.Mutable(index);
}
::batprotobuf::task* get_task_list_res::add_list() {
  // @@protoc_insertion_point(field_add:batprotobuf.get_task_list_res.list)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::batprotobuf::task >*
get_task_list_res::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:batprotobuf.get_task_list_res.list)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::batprotobuf::task >&
get_task_list_res::list() const {
  // @@protoc_insertion_point(field_list:batprotobuf.get_task_list_res.list)
  return list_;
}

inline const get_task_list_res* get_task_list_res::internal_default_instance() {
  return &get_task_list_res_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int get_remaining_task_num_req::kCateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

get_remaining_task_num_req::get_remaining_task_num_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_task_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:batprotobuf.get_remaining_task_num_req)
}

void get_remaining_task_num_req::InitAsDefaultInstance() {
}

get_remaining_task_num_req::get_remaining_task_num_req(const get_remaining_task_num_req& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:batprotobuf.get_remaining_task_num_req)
}

void get_remaining_task_num_req::SharedCtor() {
  cate_ = 0u;
  _cached_size_ = 0;
}

get_remaining_task_num_req::~get_remaining_task_num_req() {
  // @@protoc_insertion_point(destructor:batprotobuf.get_remaining_task_num_req)
  SharedDtor();
}

void get_remaining_task_num_req::SharedDtor() {
}

void get_remaining_task_num_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_remaining_task_num_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_remaining_task_num_req_descriptor_;
}

const get_remaining_task_num_req& get_remaining_task_num_req::default_instance() {
  protobuf_InitDefaults_task_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<get_remaining_task_num_req> get_remaining_task_num_req_default_instance_;

get_remaining_task_num_req* get_remaining_task_num_req::New(::google::protobuf::Arena* arena) const {
  get_remaining_task_num_req* n = new get_remaining_task_num_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void get_remaining_task_num_req::Clear() {
// @@protoc_insertion_point(message_clear_start:batprotobuf.get_remaining_task_num_req)
  cate_ = 0u;
}

bool get_remaining_task_num_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:batprotobuf.get_remaining_task_num_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cate = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cate_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:batprotobuf.get_remaining_task_num_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:batprotobuf.get_remaining_task_num_req)
  return false;
#undef DO_
}

void get_remaining_task_num_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:batprotobuf.get_remaining_task_num_req)
  // optional uint32 cate = 1;
  if (this->cate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cate(), output);
  }

  // @@protoc_insertion_point(serialize_end:batprotobuf.get_remaining_task_num_req)
}

::google::protobuf::uint8* get_remaining_task_num_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:batprotobuf.get_remaining_task_num_req)
  // optional uint32 cate = 1;
  if (this->cate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cate(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:batprotobuf.get_remaining_task_num_req)
  return target;
}

size_t get_remaining_task_num_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:batprotobuf.get_remaining_task_num_req)
  size_t total_size = 0;

  // optional uint32 cate = 1;
  if (this->cate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_remaining_task_num_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:batprotobuf.get_remaining_task_num_req)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const get_remaining_task_num_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const get_remaining_task_num_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:batprotobuf.get_remaining_task_num_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:batprotobuf.get_remaining_task_num_req)
    UnsafeMergeFrom(*source);
  }
}

void get_remaining_task_num_req::MergeFrom(const get_remaining_task_num_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:batprotobuf.get_remaining_task_num_req)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void get_remaining_task_num_req::UnsafeMergeFrom(const get_remaining_task_num_req& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.cate() != 0) {
    set_cate(from.cate());
  }
}

void get_remaining_task_num_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:batprotobuf.get_remaining_task_num_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_remaining_task_num_req::CopyFrom(const get_remaining_task_num_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:batprotobuf.get_remaining_task_num_req)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool get_remaining_task_num_req::IsInitialized() const {

  return true;
}

void get_remaining_task_num_req::Swap(get_remaining_task_num_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void get_remaining_task_num_req::InternalSwap(get_remaining_task_num_req* other) {
  std::swap(cate_, other->cate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata get_remaining_task_num_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_remaining_task_num_req_descriptor_;
  metadata.reflection = get_remaining_task_num_req_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// get_remaining_task_num_req

// optional uint32 cate = 1;
void get_remaining_task_num_req::clear_cate() {
  cate_ = 0u;
}
::google::protobuf::uint32 get_remaining_task_num_req::cate() const {
  // @@protoc_insertion_point(field_get:batprotobuf.get_remaining_task_num_req.cate)
  return cate_;
}
void get_remaining_task_num_req::set_cate(::google::protobuf::uint32 value) {
  
  cate_ = value;
  // @@protoc_insertion_point(field_set:batprotobuf.get_remaining_task_num_req.cate)
}

inline const get_remaining_task_num_req* get_remaining_task_num_req::internal_default_instance() {
  return &get_remaining_task_num_req_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int get_remaining_task_num_res::kNumFieldNumber;
const int get_remaining_task_num_res::kDiamondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

get_remaining_task_num_res::get_remaining_task_num_res()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_task_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:batprotobuf.get_remaining_task_num_res)
}

void get_remaining_task_num_res::InitAsDefaultInstance() {
}

get_remaining_task_num_res::get_remaining_task_num_res(const get_remaining_task_num_res& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:batprotobuf.get_remaining_task_num_res)
}

void get_remaining_task_num_res::SharedCtor() {
  ::memset(&num_, 0, reinterpret_cast<char*>(&diamonds_) -
    reinterpret_cast<char*>(&num_) + sizeof(diamonds_));
  _cached_size_ = 0;
}

get_remaining_task_num_res::~get_remaining_task_num_res() {
  // @@protoc_insertion_point(destructor:batprotobuf.get_remaining_task_num_res)
  SharedDtor();
}

void get_remaining_task_num_res::SharedDtor() {
}

void get_remaining_task_num_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_remaining_task_num_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_remaining_task_num_res_descriptor_;
}

const get_remaining_task_num_res& get_remaining_task_num_res::default_instance() {
  protobuf_InitDefaults_task_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<get_remaining_task_num_res> get_remaining_task_num_res_default_instance_;

get_remaining_task_num_res* get_remaining_task_num_res::New(::google::protobuf::Arena* arena) const {
  get_remaining_task_num_res* n = new get_remaining_task_num_res;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void get_remaining_task_num_res::Clear() {
// @@protoc_insertion_point(message_clear_start:batprotobuf.get_remaining_task_num_res)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(get_remaining_task_num_res, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<get_remaining_task_num_res*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(num_, diamonds_);

#undef ZR_HELPER_
#undef ZR_

}

bool get_remaining_task_num_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:batprotobuf.get_remaining_task_num_res)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_diamonds;
        break;
      }

      // optional uint32 diamonds = 2;
      case 2: {
        if (tag == 16) {
         parse_diamonds:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamonds_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:batprotobuf.get_remaining_task_num_res)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:batprotobuf.get_remaining_task_num_res)
  return false;
#undef DO_
}

void get_remaining_task_num_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:batprotobuf.get_remaining_task_num_res)
  // optional uint32 num = 1;
  if (this->num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  // optional uint32 diamonds = 2;
  if (this->diamonds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->diamonds(), output);
  }

  // @@protoc_insertion_point(serialize_end:batprotobuf.get_remaining_task_num_res)
}

::google::protobuf::uint8* get_remaining_task_num_res::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:batprotobuf.get_remaining_task_num_res)
  // optional uint32 num = 1;
  if (this->num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  // optional uint32 diamonds = 2;
  if (this->diamonds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->diamonds(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:batprotobuf.get_remaining_task_num_res)
  return target;
}

size_t get_remaining_task_num_res::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:batprotobuf.get_remaining_task_num_res)
  size_t total_size = 0;

  // optional uint32 num = 1;
  if (this->num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num());
  }

  // optional uint32 diamonds = 2;
  if (this->diamonds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->diamonds());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_remaining_task_num_res::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:batprotobuf.get_remaining_task_num_res)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const get_remaining_task_num_res* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const get_remaining_task_num_res>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:batprotobuf.get_remaining_task_num_res)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:batprotobuf.get_remaining_task_num_res)
    UnsafeMergeFrom(*source);
  }
}

void get_remaining_task_num_res::MergeFrom(const get_remaining_task_num_res& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:batprotobuf.get_remaining_task_num_res)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void get_remaining_task_num_res::UnsafeMergeFrom(const get_remaining_task_num_res& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.num() != 0) {
    set_num(from.num());
  }
  if (from.diamonds() != 0) {
    set_diamonds(from.diamonds());
  }
}

void get_remaining_task_num_res::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:batprotobuf.get_remaining_task_num_res)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_remaining_task_num_res::CopyFrom(const get_remaining_task_num_res& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:batprotobuf.get_remaining_task_num_res)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool get_remaining_task_num_res::IsInitialized() const {

  return true;
}

void get_remaining_task_num_res::Swap(get_remaining_task_num_res* other) {
  if (other == this) return;
  InternalSwap(other);
}
void get_remaining_task_num_res::InternalSwap(get_remaining_task_num_res* other) {
  std::swap(num_, other->num_);
  std::swap(diamonds_, other->diamonds_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata get_remaining_task_num_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_remaining_task_num_res_descriptor_;
  metadata.reflection = get_remaining_task_num_res_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// get_remaining_task_num_res

// optional uint32 num = 1;
void get_remaining_task_num_res::clear_num() {
  num_ = 0u;
}
::google::protobuf::uint32 get_remaining_task_num_res::num() const {
  // @@protoc_insertion_point(field_get:batprotobuf.get_remaining_task_num_res.num)
  return num_;
}
void get_remaining_task_num_res::set_num(::google::protobuf::uint32 value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:batprotobuf.get_remaining_task_num_res.num)
}

// optional uint32 diamonds = 2;
void get_remaining_task_num_res::clear_diamonds() {
  diamonds_ = 0u;
}
::google::protobuf::uint32 get_remaining_task_num_res::diamonds() const {
  // @@protoc_insertion_point(field_get:batprotobuf.get_remaining_task_num_res.diamonds)
  return diamonds_;
}
void get_remaining_task_num_res::set_diamonds(::google::protobuf::uint32 value) {
  
  diamonds_ = value;
  // @@protoc_insertion_point(field_set:batprotobuf.get_remaining_task_num_res.diamonds)
}

inline const get_remaining_task_num_res* get_remaining_task_num_res::internal_default_instance() {
  return &get_remaining_task_num_res_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace batprotobuf

// @@protoc_insertion_point(global_scope)
