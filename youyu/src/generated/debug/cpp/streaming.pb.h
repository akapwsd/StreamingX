// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: streaming.proto

#ifndef PROTOBUF_streaming_2eproto__INCLUDED
#define PROTOBUF_streaming_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "streamingBase.pb.h"
// @@protoc_insertion_point(includes)

namespace batprotobuf {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_streaming_2eproto();
void protobuf_InitDefaults_streaming_2eproto();
void protobuf_AssignDesc_streaming_2eproto();
void protobuf_ShutdownFile_streaming_2eproto();

class channelStateChange;
class channelUserStateChange;
class ping;
class pong;

// ===================================================================

class channelStateChange : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:batprotobuf.channelStateChange) */ {
 public:
  channelStateChange();
  virtual ~channelStateChange();

  channelStateChange(const channelStateChange& from);

  inline channelStateChange& operator=(const channelStateChange& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const channelStateChange& default_instance();

  static const channelStateChange* internal_default_instance();

  void Swap(channelStateChange* other);

  // implements Message ----------------------------------------------

  inline channelStateChange* New() const { return New(NULL); }

  channelStateChange* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const channelStateChange& from);
  void MergeFrom(const channelStateChange& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(channelStateChange* other);
  void UnsafeMergeFrom(const channelStateChange& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .batprotobuf.channel ch = 1;
  bool has_ch() const;
  void clear_ch();
  static const int kChFieldNumber = 1;
  const ::batprotobuf::channel& ch() const;
  ::batprotobuf::channel* mutable_ch();
  ::batprotobuf::channel* release_ch();
  void set_allocated_ch(::batprotobuf::channel* ch);

  // @@protoc_insertion_point(class_scope:batprotobuf.channelStateChange)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::batprotobuf::channel* ch_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_streaming_2eproto_impl();
  friend void  protobuf_AddDesc_streaming_2eproto_impl();
  friend void protobuf_AssignDesc_streaming_2eproto();
  friend void protobuf_ShutdownFile_streaming_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<channelStateChange> channelStateChange_default_instance_;

// -------------------------------------------------------------------

class channelUserStateChange : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:batprotobuf.channelUserStateChange) */ {
 public:
  channelUserStateChange();
  virtual ~channelUserStateChange();

  channelUserStateChange(const channelUserStateChange& from);

  inline channelUserStateChange& operator=(const channelUserStateChange& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const channelUserStateChange& default_instance();

  static const channelUserStateChange* internal_default_instance();

  void Swap(channelUserStateChange* other);

  // implements Message ----------------------------------------------

  inline channelUserStateChange* New() const { return New(NULL); }

  channelUserStateChange* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const channelUserStateChange& from);
  void MergeFrom(const channelUserStateChange& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(channelUserStateChange* other);
  void UnsafeMergeFrom(const channelUserStateChange& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .batprotobuf.channelUser chu = 1;
  bool has_chu() const;
  void clear_chu();
  static const int kChuFieldNumber = 1;
  const ::batprotobuf::channelUser& chu() const;
  ::batprotobuf::channelUser* mutable_chu();
  ::batprotobuf::channelUser* release_chu();
  void set_allocated_chu(::batprotobuf::channelUser* chu);

  // @@protoc_insertion_point(class_scope:batprotobuf.channelUserStateChange)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::batprotobuf::channelUser* chu_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_streaming_2eproto_impl();
  friend void  protobuf_AddDesc_streaming_2eproto_impl();
  friend void protobuf_AssignDesc_streaming_2eproto();
  friend void protobuf_ShutdownFile_streaming_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<channelUserStateChange> channelUserStateChange_default_instance_;

// -------------------------------------------------------------------

class ping : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:batprotobuf.ping) */ {
 public:
  ping();
  virtual ~ping();

  ping(const ping& from);

  inline ping& operator=(const ping& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ping& default_instance();

  static const ping* internal_default_instance();

  void Swap(ping* other);

  // implements Message ----------------------------------------------

  inline ping* New() const { return New(NULL); }

  ping* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ping& from);
  void MergeFrom(const ping& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ping* other);
  void UnsafeMergeFrom(const ping& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:batprotobuf.ping)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_streaming_2eproto_impl();
  friend void  protobuf_AddDesc_streaming_2eproto_impl();
  friend void protobuf_AssignDesc_streaming_2eproto();
  friend void protobuf_ShutdownFile_streaming_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ping> ping_default_instance_;

// -------------------------------------------------------------------

class pong : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:batprotobuf.pong) */ {
 public:
  pong();
  virtual ~pong();

  pong(const pong& from);

  inline pong& operator=(const pong& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pong& default_instance();

  static const pong* internal_default_instance();

  void Swap(pong* other);

  // implements Message ----------------------------------------------

  inline pong* New() const { return New(NULL); }

  pong* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pong& from);
  void MergeFrom(const pong& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(pong* other);
  void UnsafeMergeFrom(const pong& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:batprotobuf.pong)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_streaming_2eproto_impl();
  friend void  protobuf_AddDesc_streaming_2eproto_impl();
  friend void protobuf_AssignDesc_streaming_2eproto();
  friend void protobuf_ShutdownFile_streaming_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<pong> pong_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// channelStateChange

// optional .batprotobuf.channel ch = 1;
inline bool channelStateChange::has_ch() const {
  return this != internal_default_instance() && ch_ != NULL;
}
inline void channelStateChange::clear_ch() {
  if (GetArenaNoVirtual() == NULL && ch_ != NULL) delete ch_;
  ch_ = NULL;
}
inline const ::batprotobuf::channel& channelStateChange::ch() const {
  // @@protoc_insertion_point(field_get:batprotobuf.channelStateChange.ch)
  return ch_ != NULL ? *ch_
                         : *::batprotobuf::channel::internal_default_instance();
}
inline ::batprotobuf::channel* channelStateChange::mutable_ch() {
  
  if (ch_ == NULL) {
    ch_ = new ::batprotobuf::channel;
  }
  // @@protoc_insertion_point(field_mutable:batprotobuf.channelStateChange.ch)
  return ch_;
}
inline ::batprotobuf::channel* channelStateChange::release_ch() {
  // @@protoc_insertion_point(field_release:batprotobuf.channelStateChange.ch)
  
  ::batprotobuf::channel* temp = ch_;
  ch_ = NULL;
  return temp;
}
inline void channelStateChange::set_allocated_ch(::batprotobuf::channel* ch) {
  delete ch_;
  ch_ = ch;
  if (ch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:batprotobuf.channelStateChange.ch)
}

inline const channelStateChange* channelStateChange::internal_default_instance() {
  return &channelStateChange_default_instance_.get();
}
// -------------------------------------------------------------------

// channelUserStateChange

// optional .batprotobuf.channelUser chu = 1;
inline bool channelUserStateChange::has_chu() const {
  return this != internal_default_instance() && chu_ != NULL;
}
inline void channelUserStateChange::clear_chu() {
  if (GetArenaNoVirtual() == NULL && chu_ != NULL) delete chu_;
  chu_ = NULL;
}
inline const ::batprotobuf::channelUser& channelUserStateChange::chu() const {
  // @@protoc_insertion_point(field_get:batprotobuf.channelUserStateChange.chu)
  return chu_ != NULL ? *chu_
                         : *::batprotobuf::channelUser::internal_default_instance();
}
inline ::batprotobuf::channelUser* channelUserStateChange::mutable_chu() {
  
  if (chu_ == NULL) {
    chu_ = new ::batprotobuf::channelUser;
  }
  // @@protoc_insertion_point(field_mutable:batprotobuf.channelUserStateChange.chu)
  return chu_;
}
inline ::batprotobuf::channelUser* channelUserStateChange::release_chu() {
  // @@protoc_insertion_point(field_release:batprotobuf.channelUserStateChange.chu)
  
  ::batprotobuf::channelUser* temp = chu_;
  chu_ = NULL;
  return temp;
}
inline void channelUserStateChange::set_allocated_chu(::batprotobuf::channelUser* chu) {
  delete chu_;
  chu_ = chu;
  if (chu) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:batprotobuf.channelUserStateChange.chu)
}

inline const channelUserStateChange* channelUserStateChange::internal_default_instance() {
  return &channelUserStateChange_default_instance_.get();
}
// -------------------------------------------------------------------

// ping

inline const ping* ping::internal_default_instance() {
  return &ping_default_instance_.get();
}
// -------------------------------------------------------------------

// pong

inline const pong* pong::internal_default_instance() {
  return &pong_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace batprotobuf

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_streaming_2eproto__INCLUDED
